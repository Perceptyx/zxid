/* c/zx-gl.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_gl_AreaComparison(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'returnLocation', data.returnLocation);

  for (i=1; tag = find_xml_local(x[2], 'CivilData', i); ++i) {
    h =  hash [];
    parse_gl_CivilData(h, tag);
    push data{'CivilData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'shape', i); ++i) {
    h =  hash [];
    parse_gl_shape(h, tag);
    push data{'shape'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_AreaComparison(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'returnLocation', data.returnLocation);

  for d(data{'CivilData'}) push body,build_gl_CivilData(d);
  for d(data{'shape'}) push body,build_gl_shape(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:AreaComparison', attr, body);
}




function parse_gl_Box(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'coord', i); ++i) {
    h =  hash [];
    parse_gl_coord(h, tag);
    push data{'coord'}, h;
  }

}

function build_gl_Box(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'coord'}) push body,build_gl_coord(d);

  return TAG('gl:Box', attr, body);
}




function parse_gl_ChangeArea(data, x) {
  POPATTR(x[1], 'event', data.event);

  for (i=1; tag = find_xml_local(x[2], 'CivilData', i); ++i) {
    h =  hash [];
    parse_gl_CivilData(h, tag);
    push data{'CivilData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'shape', i); ++i) {
    h =  hash [];
    parse_gl_shape(h, tag);
    push data{'shape'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_ChangeArea(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'event', data.event);

  for d(data{'CivilData'}) push body,build_gl_CivilData(d);
  for d(data{'shape'}) push body,build_gl_shape(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:ChangeArea', attr, body);
}




function parse_gl_CircularArcArea(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'coord', 1);
  h =  hash [];
  parse_gl_coord(h, aux1);
  data{'coord'} = h;
  POPTAG_RAW(x[2],  'inRadius', data.inRadius);
  POPTAG_RAW(x[2],  'outRadius', data.outRadius);
  POPTAG_RAW(x[2],  'startAngle', data.startAngle);
  POPTAG_RAW(x[2],  'stopAngle', data.stopAngle);
  POPTAG_RAW(x[2],  'angularUnit', data.angularUnit);
  POPTAG_RAW(x[2],  'distanceUnit', data.distanceUnit);

}

function build_gl_CircularArcArea(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_coord(data{'coord'});
  PUSHTAG_RAW(body, 'inRadius', data.inRadius);
  PUSHTAG_RAW(body, 'outRadius', data.outRadius);
  PUSHTAG_RAW(body, 'startAngle', data.startAngle);
  PUSHTAG_RAW(body, 'stopAngle', data.stopAngle);
  PUSHTAG_RAW(body, 'angularUnit', data.angularUnit);
  PUSHTAG_RAW(body, 'distanceUnit', data.distanceUnit);

  return TAG('gl:CircularArcArea', attr, body);
}




function parse_gl_CircularArea(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'coord', 1);
  h =  hash [];
  parse_gl_coord(h, aux1);
  data{'coord'} = h;
  POPTAG_RAW(x[2],  'radius', data.radius);
  POPTAG_RAW(x[2],  'distanceUnit', data.distanceUnit);

}

function build_gl_CircularArea(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_coord(data{'coord'});
  PUSHTAG_RAW(body, 'radius', data.radius);
  PUSHTAG_RAW(body, 'distanceUnit', data.distanceUnit);

  return TAG('gl:CircularArea', attr, body);
}




function parse_gl_CivilData(data, x) {

  POPTAG_RAW(x[2],  'PostalAddress', data.PostalAddress);
  for (i=1; tag = find_xml_local(x[2], 'LPostalAddress', i); ++i) {
    h =  hash [];
    parse_gl_LPostalAddress(h, tag);
    push data{'LPostalAddress'}, h;
  }
  POPTAG_RAW(x[2],  'PostalCode', data.PostalCode);
  POPTAG_RAW(x[2],  'L', data.L);
  for (i=1; tag = find_xml_local(x[2], 'LL', i); ++i) {
    h =  hash [];
    parse_gl_LL(h, tag);
    push data{'LL'}, h;
  }
  POPTAG_RAW(x[2],  'St', data.St);
  for (i=1; tag = find_xml_local(x[2], 'LSt', i); ++i) {
    h =  hash [];
    parse_gl_LSt(h, tag);
    push data{'LSt'}, h;
  }
  POPTAG_RAW(x[2],  'C', data.C);
  POPTAG_RAW(x[2],  'MNC', data.MNC);
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_CivilData(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PostalAddress', data.PostalAddress);
  for d(data{'LPostalAddress'}) push body,build_gl_LPostalAddress(d);
  PUSHTAG_RAW(body, 'PostalCode', data.PostalCode);
  PUSHTAG_RAW(body, 'L', data.L);
  for d(data{'LL'}) push body,build_gl_LL(d);
  PUSHTAG_RAW(body, 'St', data.St);
  for d(data{'LSt'}) push body,build_gl_LSt(d);
  PUSHTAG_RAW(body, 'C', data.C);
  PUSHTAG_RAW(body, 'MNC', data.MNC);
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:CivilData', attr, body);
}




function parse_gl_ComparisonResult(data, x) {
  POPATTR(x[1], 'ItemIDRef', data.ItemIDRef);


}

function build_gl_ComparisonResult(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ItemIDRef', data.ItemIDRef);


  return TAG('gl:ComparisonResult', attr, body);
}




function parse_gl_CoordinateReferenceSystem(data, x) {

  tag = find_xml_local(x[2], 'Identifier', 1);
  h =  hash [];
  parse_gl_Identifier(h, aux1);
  data{'Identifier'} = h;

}

function build_gl_CoordinateReferenceSystem(data) {
  attr = [];
  body = [];

  push body, build_gl_Identifier(data{'Identifier'});

  return TAG('gl:CoordinateReferenceSystem', attr, body);
}




function parse_gl_Create(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_gl_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_gl_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_gl_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CreateItem', i); ++i) {
    h =  hash [];
    parse_gl_CreateItem(h, tag);
    push data{'CreateItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_gl_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Create(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_ResourceID(data{'ResourceID'});
  push body, build_gl_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_gl_Subscription(d);
  for d(data{'CreateItem'}) push body,build_gl_CreateItem(d);
  for d(data{'ItemSelection'}) push body,build_gl_ItemSelection(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Create', attr, body);
}




function parse_gl_CreateItem(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'objectType', data.objectType);

  tag = find_xml_local(x[2], 'NewData', 1);
  h =  hash [];
  parse_gl_NewData(h, aux1);
  data{'NewData'} = h;

}

function build_gl_CreateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'objectType', data.objectType);

  push body, build_gl_NewData(data{'NewData'});

  return TAG('gl:CreateItem', attr, body);
}




function parse_gl_CreateResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_gl_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_gl_ItemData(h, tag);
    push data{'ItemData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_CreateResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_gl_Status(data{'Status'});
  for d(data{'ItemData'}) push body,build_gl_ItemData(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:CreateResponse', attr, body);
}




function parse_gl_Credential(data, x) {
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);

  tag = find_xml_local(x[2], 'Assertion', 1);
  h =  hash [];
  parse_sa_Assertion(h, aux1);
  data{'Assertion'} = h;

}

function build_gl_Credential(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);

  push body, build_sa_Assertion(data{'Assertion'});

  return TAG('gl:Credential', attr, body);
}




function parse_gl_Data(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'nextOffset', data.nextOffset);
  POPATTR(x[1], 'notSorted', data.notSorted);
  POPATTR(x[1], 'remaining', data.remaining);
  POPATTR(x[1], 'setID', data.setID);
  POPATTR(x[1], 'gl_changeFormat', data.gl_changeFormat);


}

function build_gl_Data(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'nextOffset', data.nextOffset);
  PUSHATTR(attr, 'notSorted', data.notSorted);
  PUSHATTR(attr, 'remaining', data.remaining);
  PUSHATTR(attr, 'setID', data.setID);
  PUSHATTR(attr, 'gl_changeFormat', data.gl_changeFormat);


  return TAG('gl:Data', attr, body);
}




function parse_gl_Delete(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_gl_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_gl_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'DeleteItem', i); ++i) {
    h =  hash [];
    parse_gl_DeleteItem(h, tag);
    push data{'DeleteItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Delete(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_ResourceID(data{'ResourceID'});
  push body, build_gl_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'DeleteItem'}) push body,build_gl_DeleteItem(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Delete', attr, body);
}




function parse_gl_DeleteItem(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'notChangedSince', data.notChangedSince);
  POPATTR(x[1], 'objectType', data.objectType);
  POPATTR(x[1], 'predefined', data.predefined);

  POPTAG_RAW(x[2],  'Select', data.Select);

}

function build_gl_DeleteItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'notChangedSince', data.notChangedSince);
  PUSHATTR(attr, 'objectType', data.objectType);
  PUSHATTR(attr, 'predefined', data.predefined);

  PUSHTAG_RAW(body, 'Select', data.Select);

  return TAG('gl:DeleteItem', attr, body);
}




function parse_gl_DeleteResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_gl_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_DeleteResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:DeleteResponse', attr, body);
}




function parse_gl_EllipticalArea(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'coord', 1);
  h =  hash [];
  parse_gl_coord(h, aux1);
  data{'coord'} = h;
  POPTAG_RAW(x[2],  'angle', data.angle);
  POPTAG_RAW(x[2],  'semiMajor', data.semiMajor);
  POPTAG_RAW(x[2],  'semiMinor', data.semiMinor);
  POPTAG_RAW(x[2],  'angularUnit', data.angularUnit);
  POPTAG_RAW(x[2],  'distanceUnit', data.distanceUnit);

}

function build_gl_EllipticalArea(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_coord(data{'coord'});
  PUSHTAG_RAW(body, 'angle', data.angle);
  PUSHTAG_RAW(body, 'semiMajor', data.semiMajor);
  PUSHTAG_RAW(body, 'semiMinor', data.semiMinor);
  PUSHTAG_RAW(body, 'angularUnit', data.angularUnit);
  PUSHTAG_RAW(body, 'distanceUnit', data.distanceUnit);

  return TAG('gl:EllipticalArea', attr, body);
}




function parse_gl_EncryptedResourceID(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  tag = find_xml_local(x[2], 'EncryptedKey', 1);
  h =  hash [];
  parse_xenc_EncryptedKey(h, aux1);
  data{'EncryptedKey'} = h;

}

function build_gl_EncryptedResourceID(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  push body, build_xenc_EncryptedKey(data{'EncryptedKey'});

  return TAG('gl:EncryptedResourceID', attr, body);
}




function parse_gl_Extension(data, x) {


}

function build_gl_Extension(data) {
  attr = [];
  body = [];


  return TAG('gl:Extension', attr, body);
}




function parse_gl_GeometryCollection(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'shape', i); ++i) {
    h =  hash [];
    parse_gl_shape(h, tag);
    push data{'shape'}, h;
  }

}

function build_gl_GeometryCollection(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'shape'}) push body,build_gl_shape(d);

  return TAG('gl:GeometryCollection', attr, body);
}




function parse_gl_Identifier(data, x) {

  POPTAG_RAW(x[2],  'code', data.code);
  POPTAG_RAW(x[2],  'codeSpace', data.codeSpace);
  POPTAG_RAW(x[2],  'edition', data.edition);

}

function build_gl_Identifier(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'code', data.code);
  PUSHTAG_RAW(body, 'codeSpace', data.codeSpace);
  PUSHTAG_RAW(body, 'edition', data.edition);

  return TAG('gl:Identifier', attr, body);
}




function parse_gl_ItemData(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'notSorted', data.notSorted);
  POPATTR(x[1], 'gl_changeFormat', data.gl_changeFormat);


}

function build_gl_ItemData(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'notSorted', data.notSorted);
  PUSHATTR(attr, 'gl_changeFormat', data.gl_changeFormat);


  return TAG('gl:ItemData', attr, body);
}




function parse_gl_ItemSelection(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AreaComparison', i); ++i) {
    h =  hash [];
    parse_gl_AreaComparison(h, tag);
    push data{'AreaComparison'}, h;
  }
  tag = find_xml_local(x[2], 'eqop', 1);
  h =  hash [];
  parse_gl_eqop(h, aux1);
  data{'eqop'} = h;
  tag = find_xml_local(x[2], 'geoinfo', 1);
  h =  hash [];
  parse_gl_geoinfo(h, aux1);
  data{'geoinfo'} = h;
  tag = find_xml_local(x[2], 'loc_type', 1);
  h =  hash [];
  parse_gl_loc_type(h, aux1);
  data{'loc_type'} = h;
  tag = find_xml_local(x[2], 'prio', 1);
  h =  hash [];
  parse_gl_prio(h, aux1);
  data{'prio'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_ItemSelection(data) {
  attr = [];
  body = [];

  for d(data{'AreaComparison'}) push body,build_gl_AreaComparison(d);
  push body, build_gl_eqop(data{'eqop'});
  push body, build_gl_geoinfo(data{'geoinfo'});
  push body, build_gl_loc_type(data{'loc_type'});
  push body, build_gl_prio(data{'prio'});
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:ItemSelection', attr, body);
}




function parse_gl_LL(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);
  POPATTR(x[1], 'gl_script', data.gl_script);


}

function build_gl_LL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);
  PUSHATTR(attr, 'gl_script', data.gl_script);


  return TAG('gl:LL', attr, body);
}




function parse_gl_LPostalAddress(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);
  POPATTR(x[1], 'gl_script', data.gl_script);


}

function build_gl_LPostalAddress(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);
  PUSHATTR(attr, 'gl_script', data.gl_script);


  return TAG('gl:LPostalAddress', attr, body);
}




function parse_gl_LSt(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);
  POPATTR(x[1], 'gl_script', data.gl_script);


}

function build_gl_LSt(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);
  PUSHATTR(attr, 'gl_script', data.gl_script);


  return TAG('gl:LSt', attr, body);
}




function parse_gl_LineString(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'coord', i); ++i) {
    h =  hash [];
    parse_gl_coord(h, tag);
    push data{'coord'}, h;
  }

}

function build_gl_LineString(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'coord'}) push body,build_gl_coord(d);

  return TAG('gl:LineString', attr, body);
}




function parse_gl_LinearRing(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'coord', i); ++i) {
    h =  hash [];
    parse_gl_coord(h, tag);
    push data{'coord'}, h;
  }

}

function build_gl_LinearRing(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'coord'}) push body,build_gl_coord(d);

  return TAG('gl:LinearRing', attr, body);
}




function parse_gl_Modification(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'notChangedSince', data.notChangedSince);
  POPATTR(x[1], 'objectType', data.objectType);
  POPATTR(x[1], 'overrideAllowed', data.overrideAllowed);

  POPTAG_RAW(x[2],  'Select', data.Select);
  tag = find_xml_local(x[2], 'NewData', 1);
  h =  hash [];
  parse_gl_NewData(h, aux1);
  data{'NewData'} = h;

}

function build_gl_Modification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'notChangedSince', data.notChangedSince);
  PUSHATTR(attr, 'objectType', data.objectType);
  PUSHATTR(attr, 'overrideAllowed', data.overrideAllowed);

  PUSHTAG_RAW(body, 'Select', data.Select);
  push body, build_gl_NewData(data{'NewData'});

  return TAG('gl:Modification', attr, body);
}




function parse_gl_Modify(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_gl_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_gl_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_gl_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Modification', i); ++i) {
    h =  hash [];
    parse_gl_Modification(h, tag);
    push data{'Modification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_gl_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Modify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_ResourceID(data{'ResourceID'});
  push body, build_gl_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_gl_Subscription(d);
  for d(data{'Modification'}) push body,build_gl_Modification(d);
  for d(data{'ItemSelection'}) push body,build_gl_ItemSelection(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Modify', attr, body);
}




function parse_gl_ModifyResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_gl_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_gl_ItemData(h, tag);
    push data{'ItemData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_ModifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_gl_Status(data{'Status'});
  for d(data{'ItemData'}) push body,build_gl_ItemData(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:ModifyResponse', attr, body);
}




function parse_gl_MultiLineString(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'LineString', i); ++i) {
    h =  hash [];
    parse_gl_LineString(h, tag);
    push data{'LineString'}, h;
  }

}

function build_gl_MultiLineString(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'LineString'}) push body,build_gl_LineString(d);

  return TAG('gl:MultiLineString', attr, body);
}




function parse_gl_MultiPoint(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  for (i=1; tag = find_xml_local(x[2], 'Point', i); ++i) {
    h =  hash [];
    parse_gl_Point(h, tag);
    push data{'Point'}, h;
  }

}

function build_gl_MultiPoint(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  for d(data{'Point'}) push body,build_gl_Point(d);

  return TAG('gl:MultiPoint', attr, body);
}




function parse_gl_MultiPolygon(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'Polygon', 1);
  h =  hash [];
  parse_gl_Polygon(h, aux1);
  data{'Polygon'} = h;
  tag = find_xml_local(x[2], 'Box', 1);
  h =  hash [];
  parse_gl_Box(h, aux1);
  data{'Box'} = h;
  tag = find_xml_local(x[2], 'CircularArea', 1);
  h =  hash [];
  parse_gl_CircularArea(h, aux1);
  data{'CircularArea'} = h;
  tag = find_xml_local(x[2], 'CircularArcArea', 1);
  h =  hash [];
  parse_gl_CircularArcArea(h, aux1);
  data{'CircularArcArea'} = h;
  tag = find_xml_local(x[2], 'EllipticalArea', 1);
  h =  hash [];
  parse_gl_EllipticalArea(h, aux1);
  data{'EllipticalArea'} = h;

}

function build_gl_MultiPolygon(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_Polygon(data{'Polygon'});
  push body, build_gl_Box(data{'Box'});
  push body, build_gl_CircularArea(data{'CircularArea'});
  push body, build_gl_CircularArcArea(data{'CircularArcArea'});
  push body, build_gl_EllipticalArea(data{'EllipticalArea'});

  return TAG('gl:MultiPolygon', attr, body);
}




function parse_gl_NewData(data, x) {


}

function build_gl_NewData(data) {
  attr = [];
  body = [];


  return TAG('gl:NewData', attr, body);
}




function parse_gl_Notification(data, x) {
  POPATTR(x[1], 'endReason', data.endReason);
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_gl_ItemData(h, tag);
    push data{'ItemData'}, h;
  }

}

function build_gl_Notification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'endReason', data.endReason);
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'ItemData'}) push body,build_gl_ItemData(d);

  return TAG('gl:Notification', attr, body);
}




function parse_gl_Notify(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  for (i=1; tag = find_xml_local(x[2], 'Notification', i); ++i) {
    h =  hash [];
    parse_gl_Notification(h, tag);
    push data{'Notification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Notify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  for d(data{'Notification'}) push body,build_gl_Notification(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Notify', attr, body);
}




function parse_gl_NotifyAdminTo(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Credential', i); ++i) {
    h =  hash [];
    parse_gl_Credential(h, tag);
    push data{'Credential'}, h;
  }
  POPTAG_RAW(x[2],  'Endpoint', data.Endpoint);

}

function build_gl_NotifyAdminTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Credential'}) push body,build_gl_Credential(d);
  PUSHTAG_RAW(body, 'Endpoint', data.Endpoint);

  return TAG('gl:NotifyAdminTo', attr, body);
}




function parse_gl_NotifyResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_gl_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_NotifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:NotifyResponse', attr, body);
}




function parse_gl_NotifyTo(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Credential', i); ++i) {
    h =  hash [];
    parse_gl_Credential(h, tag);
    push data{'Credential'}, h;
  }
  POPTAG_RAW(x[2],  'Endpoint', data.Endpoint);

}

function build_gl_NotifyTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Credential'}) push body,build_gl_Credential(d);
  PUSHTAG_RAW(body, 'Endpoint', data.Endpoint);

  return TAG('gl:NotifyTo', attr, body);
}




function parse_gl_Point(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'coord', 1);
  h =  hash [];
  parse_gl_coord(h, aux1);
  data{'coord'} = h;

}

function build_gl_Point(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_coord(data{'coord'});

  return TAG('gl:Point', attr, body);
}




function parse_gl_Polygon(data, x) {
  POPATTR(x[1], 'gid', data.gid);
  POPATTR(x[1], 'srsName', data.srsName);

  tag = find_xml_local(x[2], 'outerBoundaryIs', 1);
  h =  hash [];
  parse_gl_outerBoundaryIs(h, aux1);
  data{'outerBoundaryIs'} = h;
  for (i=1; tag = find_xml_local(x[2], 'innerBoundaryIs', i); ++i) {
    h =  hash [];
    parse_gl_innerBoundaryIs(h, tag);
    push data{'innerBoundaryIs'}, h;
  }

}

function build_gl_Polygon(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gid', data.gid);
  PUSHATTR(attr, 'srsName', data.srsName);

  push body, build_gl_outerBoundaryIs(data{'outerBoundaryIs'});
  for d(data{'innerBoundaryIs'}) push body,build_gl_innerBoundaryIs(d);

  return TAG('gl:Polygon', attr, body);
}




function parse_gl_Query(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_gl_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_gl_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_gl_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'QueryItem', i); ++i) {
    h =  hash [];
    parse_gl_QueryItem(h, tag);
    push data{'QueryItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Query(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_gl_ResourceID(data{'ResourceID'});
  push body, build_gl_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_gl_Subscription(d);
  for d(data{'QueryItem'}) push body,build_gl_QueryItem(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Query', attr, body);
}




function parse_gl_QueryItem(data, x) {
  POPATTR(x[1], 'count', data.count);
  POPATTR(x[1], 'offset', data.offset);
  POPATTR(x[1], 'setID', data.setID);
  POPATTR(x[1], 'setReq', data.setReq);

  for (i=1; tag = find_xml_local(x[2], 'AreaComparison', i); ++i) {
    h =  hash [];
    parse_gl_AreaComparison(h, tag);
    push data{'AreaComparison'}, h;
  }
  tag = find_xml_local(x[2], 'eqop', 1);
  h =  hash [];
  parse_gl_eqop(h, aux1);
  data{'eqop'} = h;
  tag = find_xml_local(x[2], 'geoinfo', 1);
  h =  hash [];
  parse_gl_geoinfo(h, aux1);
  data{'geoinfo'} = h;
  tag = find_xml_local(x[2], 'loc_type', 1);
  h =  hash [];
  parse_gl_loc_type(h, aux1);
  data{'loc_type'} = h;
  tag = find_xml_local(x[2], 'prio', 1);
  h =  hash [];
  parse_gl_prio(h, aux1);
  data{'prio'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_QueryItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'count', data.count);
  PUSHATTR(attr, 'offset', data.offset);
  PUSHATTR(attr, 'setID', data.setID);
  PUSHATTR(attr, 'setReq', data.setReq);

  for d(data{'AreaComparison'}) push body,build_gl_AreaComparison(d);
  push body, build_gl_eqop(data{'eqop'});
  push body, build_gl_geoinfo(data{'geoinfo'});
  push body, build_gl_loc_type(data{'loc_type'});
  push body, build_gl_prio(data{'prio'});
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:QueryItem', attr, body);
}




function parse_gl_QueryResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_gl_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Data', i); ++i) {
    h =  hash [];
    parse_gl_Data(h, tag);
    push data{'Data'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_QueryResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_gl_Status(data{'Status'});
  for d(data{'Data'}) push body,build_gl_Data(d);
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:QueryResponse', attr, body);
}




function parse_gl_RefItem(data, x) {
  POPATTR(x[1], 'ItemIDRef', data.ItemIDRef);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);


}

function build_gl_RefItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ItemIDRef', data.ItemIDRef);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);


  return TAG('gl:RefItem', attr, body);
}




function parse_gl_ResourceID(data, x) {
  POPATTR(x[1], 'id', data.id);


}

function build_gl_ResourceID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);


  return TAG('gl:ResourceID', attr, body);
}




function parse_gl_Status(data, x) {
  POPATTR(x[1], 'code', data.code);
  POPATTR(x[1], 'comment', data.comment);
  POPATTR(x[1], 'ref', data.ref);

  for (i=1; tag = find_xml_local(x[2], 'Status', i); ++i) {
    h =  hash [];
    parse_gl_Status(h, tag);
    push data{'Status'}, h;
  }

}

function build_gl_Status(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'code', data.code);
  PUSHATTR(attr, 'comment', data.comment);
  PUSHATTR(attr, 'ref', data.ref);

  for d(data{'Status'}) push body,build_gl_Status(d);

  return TAG('gl:Status', attr, body);
}




function parse_gl_Subscription(data, x) {
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'includeData', data.includeData);
  POPATTR(x[1], 'starts', data.starts);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_gl_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RefItem', i); ++i) {
    h =  hash [];
    parse_gl_RefItem(h, tag);
    push data{'RefItem'}, h;
  }
  tag = find_xml_local(x[2], 'NotifyTo', 1);
  h =  hash [];
  parse_gl_NotifyTo(h, aux1);
  data{'NotifyTo'} = h;
  tag = find_xml_local(x[2], 'NotifyAdminTo', 1);
  h =  hash [];
  parse_gl_NotifyAdminTo(h, aux1);
  data{'NotifyAdminTo'} = h;
  POPTAG_RAW(x[2],  'Aggregation', data.Aggregation);
  tag = find_xml_local(x[2], 'Trigger', 1);
  h =  hash [];
  parse_gl_Trigger(h, aux1);
  data{'Trigger'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_gl_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_gl_Subscription(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'includeData', data.includeData);
  PUSHATTR(attr, 'starts', data.starts);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'ItemSelection'}) push body,build_gl_ItemSelection(d);
  for d(data{'RefItem'}) push body,build_gl_RefItem(d);
  push body, build_gl_NotifyTo(data{'NotifyTo'});
  push body, build_gl_NotifyAdminTo(data{'NotifyAdminTo'});
  PUSHTAG_RAW(body, 'Aggregation', data.Aggregation);
  push body, build_gl_Trigger(data{'Trigger'});
  for d(data{'Extension'}) push body,build_gl_Extension(d);

  return TAG('gl:Subscription', attr, body);
}




function parse_gl_Trigger(data, x) {

  POPTAG_RAW(x[2],  'Granularity', data.Granularity);
  POPTAG_RAW(x[2],  'Interval', data.Interval);
  tag = find_xml_local(x[2], 'ms_action', 1);
  h =  hash [];
  parse_gl_ms_action(h, aux1);
  data{'ms_action'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ChangeArea', i); ++i) {
    h =  hash [];
    parse_gl_ChangeArea(h, tag);
    push data{'ChangeArea'}, h;
  }
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_Trigger(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Granularity', data.Granularity);
  PUSHTAG_RAW(body, 'Interval', data.Interval);
  push body, build_gl_ms_action(data{'ms_action'});
  for d(data{'ChangeArea'}) push body,build_gl_ChangeArea(d);
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:Trigger', attr, body);
}




function parse_gl_coord(data, x) {

  POPTAG_RAW(x[2],  'X', data.X);
  POPTAG_RAW(x[2],  'Y', data.Y);
  POPTAG_RAW(x[2],  'Z', data.Z);

}

function build_gl_coord(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'X', data.X);
  PUSHTAG_RAW(body, 'Y', data.Y);
  PUSHTAG_RAW(body, 'Z', data.Z);

  return TAG('gl:coord', attr, body);
}




function parse_gl_eqop(data, x) {

  tag = find_xml_local(x[2], 'resp_req', 1);
  h =  hash [];
  parse_gl_resp_req(h, aux1);
  data{'resp_req'} = h;
  POPTAG_RAW(x[2],  'll_acc', data.ll_acc);
  POPTAG_RAW(x[2],  'hor_acc', data.hor_acc);
  POPTAG_RAW(x[2],  'alt_acc', data.alt_acc);
  POPTAG_RAW(x[2],  'max_loc_age', data.max_loc_age);
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_eqop(data) {
  attr = [];
  body = [];

  push body, build_gl_resp_req(data{'resp_req'});
  PUSHTAG_RAW(body, 'll_acc', data.ll_acc);
  PUSHTAG_RAW(body, 'hor_acc', data.hor_acc);
  PUSHTAG_RAW(body, 'alt_acc', data.alt_acc);
  PUSHTAG_RAW(body, 'max_loc_age', data.max_loc_age);
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:eqop', attr, body);
}




function parse_gl_esrd(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_esrd(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:esrd', attr, body);
}




function parse_gl_esrk(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_esrk(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:esrk', attr, body);
}




function parse_gl_geoinfo(data, x) {

  tag = find_xml_local(x[2], 'CoordinateReferenceSystem', 1);
  h =  hash [];
  parse_gl_CoordinateReferenceSystem(h, aux1);
  data{'CoordinateReferenceSystem'} = h;
  tag = find_xml_local(x[2], 'CivilData', 1);
  h =  hash [];
  parse_gl_CivilData(h, aux1);
  data{'CivilData'} = h;
  tag = find_xml_local(x[2], 'shape', 1);
  h =  hash [];
  parse_gl_shape(h, aux1);
  data{'shape'} = h;
  POPTAG_RAW(x[2],  'speed', data.speed);
  POPTAG_RAW(x[2],  'alt', data.alt);
  POPTAG_RAW(x[2],  'direction', data.direction);
  POPTAG_RAW(x[2],  'Heading', data.Heading);
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_geoinfo(data) {
  attr = [];
  body = [];

  push body, build_gl_CoordinateReferenceSystem(data{'CoordinateReferenceSystem'});
  push body, build_gl_CivilData(data{'CivilData'});
  push body, build_gl_shape(data{'shape'});
  PUSHTAG_RAW(body, 'speed', data.speed);
  PUSHTAG_RAW(body, 'alt', data.alt);
  PUSHTAG_RAW(body, 'direction', data.direction);
  PUSHTAG_RAW(body, 'Heading', data.Heading);
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:geoinfo', attr, body);
}




function parse_gl_innerBoundaryIs(data, x) {

  tag = find_xml_local(x[2], 'LinearRing', 1);
  h =  hash [];
  parse_gl_LinearRing(h, aux1);
  data{'LinearRing'} = h;

}

function build_gl_innerBoundaryIs(data) {
  attr = [];
  body = [];

  push body, build_gl_LinearRing(data{'LinearRing'});

  return TAG('gl:innerBoundaryIs', attr, body);
}




function parse_gl_loc_type(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_loc_type(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:loc_type', attr, body);
}




function parse_gl_ms_action(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_ms_action(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:ms_action', attr, body);
}




function parse_gl_outerBoundaryIs(data, x) {

  tag = find_xml_local(x[2], 'LinearRing', 1);
  h =  hash [];
  parse_gl_LinearRing(h, aux1);
  data{'LinearRing'} = h;

}

function build_gl_outerBoundaryIs(data) {
  attr = [];
  body = [];

  push body, build_gl_LinearRing(data{'LinearRing'});

  return TAG('gl:outerBoundaryIs', attr, body);
}




function parse_gl_pd(data, x) {
  POPATTR(x[1], 'gl_ACC', data.gl_ACC);

  POPTAG_RAW(x[2],  'time', data.time);
  tag = find_xml_local(x[2], 'CivilData', 1);
  h =  hash [];
  parse_gl_CivilData(h, aux1);
  data{'CivilData'} = h;
  tag = find_xml_local(x[2], 'shape', 1);
  h =  hash [];
  parse_gl_shape(h, aux1);
  data{'shape'} = h;
  POPTAG_RAW(x[2],  'alt', data.alt);
  POPTAG_RAW(x[2],  'alt_acc', data.alt_acc);
  POPTAG_RAW(x[2],  'speed', data.speed);
  POPTAG_RAW(x[2],  'direction', data.direction);
  POPTAG_RAW(x[2],  'Heading', data.Heading);
  POPTAG_RAW(x[2],  'lev_conf', data.lev_conf);
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_pd(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'gl_ACC', data.gl_ACC);

  PUSHTAG_RAW(body, 'time', data.time);
  push body, build_gl_CivilData(data{'CivilData'});
  push body, build_gl_shape(data{'shape'});
  PUSHTAG_RAW(body, 'alt', data.alt);
  PUSHTAG_RAW(body, 'alt_acc', data.alt_acc);
  PUSHTAG_RAW(body, 'speed', data.speed);
  PUSHTAG_RAW(body, 'direction', data.direction);
  PUSHTAG_RAW(body, 'Heading', data.Heading);
  PUSHTAG_RAW(body, 'lev_conf', data.lev_conf);
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:pd', attr, body);
}




function parse_gl_prio(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_prio(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:prio', attr, body);
}




function parse_gl_resp_req(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_gl_resp_req(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('gl:resp_req', attr, body);
}




function parse_gl_shape(data, x) {

  tag = find_xml_local(x[2], 'Point', 1);
  h =  hash [];
  parse_gl_Point(h, aux1);
  data{'Point'} = h;
  tag = find_xml_local(x[2], 'LineString', 1);
  h =  hash [];
  parse_gl_LineString(h, aux1);
  data{'LineString'} = h;
  tag = find_xml_local(x[2], 'Polygon', 1);
  h =  hash [];
  parse_gl_Polygon(h, aux1);
  data{'Polygon'} = h;
  tag = find_xml_local(x[2], 'Box', 1);
  h =  hash [];
  parse_gl_Box(h, aux1);
  data{'Box'} = h;
  tag = find_xml_local(x[2], 'CircularArea', 1);
  h =  hash [];
  parse_gl_CircularArea(h, aux1);
  data{'CircularArea'} = h;
  tag = find_xml_local(x[2], 'CircularArcArea', 1);
  h =  hash [];
  parse_gl_CircularArcArea(h, aux1);
  data{'CircularArcArea'} = h;
  tag = find_xml_local(x[2], 'EllipticalArea', 1);
  h =  hash [];
  parse_gl_EllipticalArea(h, aux1);
  data{'EllipticalArea'} = h;
  tag = find_xml_local(x[2], 'GeometryCollection', 1);
  h =  hash [];
  parse_gl_GeometryCollection(h, aux1);
  data{'GeometryCollection'} = h;
  tag = find_xml_local(x[2], 'MultiLineString', 1);
  h =  hash [];
  parse_gl_MultiLineString(h, aux1);
  data{'MultiLineString'} = h;
  tag = find_xml_local(x[2], 'MultiPoint', 1);
  h =  hash [];
  parse_gl_MultiPoint(h, aux1);
  data{'MultiPoint'} = h;
  tag = find_xml_local(x[2], 'MultiPolygon', 1);
  h =  hash [];
  parse_gl_MultiPolygon(h, aux1);
  data{'MultiPolygon'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_gl_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_gl_shape(data) {
  attr = [];
  body = [];

  push body, build_gl_Point(data{'Point'});
  push body, build_gl_LineString(data{'LineString'});
  push body, build_gl_Polygon(data{'Polygon'});
  push body, build_gl_Box(data{'Box'});
  push body, build_gl_CircularArea(data{'CircularArea'});
  push body, build_gl_CircularArcArea(data{'CircularArcArea'});
  push body, build_gl_EllipticalArea(data{'EllipticalArea'});
  push body, build_gl_GeometryCollection(data{'GeometryCollection'});
  push body, build_gl_MultiLineString(data{'MultiLineString'});
  push body, build_gl_MultiPoint(data{'MultiPoint'});
  push body, build_gl_MultiPolygon(data{'MultiPolygon'});
  push body, build_gl_Extension(data{'Extension'});

  return TAG('gl:shape', attr, body);
}


/* EOF -- c/zx-gl.ds */
