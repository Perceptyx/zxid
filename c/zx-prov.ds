/* c/zx-prov.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_prov_CallbackEPR(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_prov_CallbackEPR(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('prov:CallbackEPR', attr, body);
}




function parse_prov_PMActivate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMActivateItem', i); ++i) {
    h =  hash [];
    parse_prov_PMActivateItem(h, tag);
    push data{'PMActivateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_prov_PMActivate(data) {
  attr = [];
  body = [];

  for d(data{'PMActivateItem'}) push body,build_prov_PMActivateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('prov:PMActivate', attr, body);
}




function parse_prov_PMActivateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_prov_PMActivateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('prov:PMActivateItem', attr, body);
}




function parse_prov_PMActivateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMActivateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMActivateResponse', attr, body);
}




function parse_prov_PMDeactivate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMDeactivateItem', i); ++i) {
    h =  hash [];
    parse_prov_PMDeactivateItem(h, tag);
    push data{'PMDeactivateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_prov_PMDeactivate(data) {
  attr = [];
  body = [];

  for d(data{'PMDeactivateItem'}) push body,build_prov_PMDeactivateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('prov:PMDeactivate', attr, body);
}




function parse_prov_PMDeactivateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_prov_PMDeactivateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('prov:PMDeactivateItem', attr, body);
}




function parse_prov_PMDeactivateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMDeactivateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMDeactivateResponse', attr, body);
}




function parse_prov_PMDelete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMDeleteItem', i); ++i) {
    h =  hash [];
    parse_prov_PMDeleteItem(h, tag);
    push data{'PMDeleteItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_prov_PMDelete(data) {
  attr = [];
  body = [];

  for d(data{'PMDeleteItem'}) push body,build_prov_PMDeleteItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('prov:PMDelete', attr, body);
}




function parse_prov_PMDeleteItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_prov_PMDeleteItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('prov:PMDeleteItem', attr, body);
}




function parse_prov_PMDeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMDeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMDeleteResponse', attr, body);
}




function parse_prov_PMDescriptor(data, x) {
  POPATTR(x[1], 'activate', data.activate);
  POPATTR(x[1], 'activateAt', data.activateAt);
  POPATTR(x[1], 'deactivateAt', data.deactivateAt);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;
  POPTAG_RAW(x[2],  'PMEngineRef', data.PMEngineRef);
  POPTAG_RAW(x[2],  'PMInitData', data.PMInitData);
  POPTAG_RAW(x[2],  'PMRTData', data.PMRTData);
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_prov_PMDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'activate', data.activate);
  PUSHATTR(attr, 'activateAt', data.activateAt);
  PUSHATTR(attr, 'deactivateAt', data.deactivateAt);

  push body, build_prov_PMID(data{'PMID'});
  PUSHTAG_RAW(body, 'PMEngineRef', data.PMEngineRef);
  PUSHTAG_RAW(body, 'PMInitData', data.PMInitData);
  PUSHTAG_RAW(body, 'PMRTData', data.PMRTData);
  push body, build_ds_Signature(data{'Signature'});

  return TAG('prov:PMDescriptor', attr, body);
}




function parse_prov_PMEDelete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMEngineRef', i); ++i)
    push data{'PMEngineRef'}, tag[2];

}

function build_prov_PMEDelete(data) {
  attr = [];
  body = [];

  for d(data{'PMEngineRef'})PUSHTAG_RAW(body,'PMEngineRef',d);

  return TAG('prov:PMEDelete', attr, body);
}




function parse_prov_PMEDeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMEDeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMEDeleteResponse', attr, body);
}




function parse_prov_PMEDisable(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMEngineRef', i); ++i)
    push data{'PMEngineRef'}, tag[2];

}

function build_prov_PMEDisable(data) {
  attr = [];
  body = [];

  for d(data{'PMEngineRef'})PUSHTAG_RAW(body,'PMEngineRef',d);

  return TAG('prov:PMEDisable', attr, body);
}




function parse_prov_PMEDisableResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMEDisableResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMEDisableResponse', attr, body);
}




function parse_prov_PMEDownload(data, x) {

  POPTAG_RAW(x[2],  'PMEngineRef', data.PMEngineRef);

}

function build_prov_PMEDownload(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PMEngineRef', data.PMEngineRef);

  return TAG('prov:PMEDownload', attr, body);
}




function parse_prov_PMEDownloadResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'EngineData', data.EngineData);

}

function build_prov_PMEDownloadResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  PUSHTAG_RAW(body, 'EngineData', data.EngineData);

  return TAG('prov:PMEDownloadResponse', attr, body);
}




function parse_prov_PMEEnable(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMEngineRef', i); ++i)
    push data{'PMEngineRef'}, tag[2];

}

function build_prov_PMEEnable(data) {
  attr = [];
  body = [];

  for d(data{'PMEngineRef'})PUSHTAG_RAW(body,'PMEngineRef',d);

  return TAG('prov:PMEEnable', attr, body);
}




function parse_prov_PMEEnableResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMEEnableResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMEEnableResponse', attr, body);
}




function parse_prov_PMEGetInfo(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMEngineRef', i); ++i)
    push data{'PMEngineRef'}, tag[2];

}

function build_prov_PMEGetInfo(data) {
  attr = [];
  body = [];

  for d(data{'PMEngineRef'})PUSHTAG_RAW(body,'PMEngineRef',d);

  return TAG('prov:PMEGetInfo', attr, body);
}




function parse_prov_PMEGetInfoResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PMEInfo', i); ++i) {
    h =  hash [];
    parse_prov_PMEInfo(h, tag);
    push data{'PMEInfo'}, h;
  }

}

function build_prov_PMEGetInfoResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'PMEInfo'}) push body,build_prov_PMEInfo(d);

  return TAG('prov:PMEGetInfoResponse', attr, body);
}




function parse_prov_PMEHash(data, x) {
  POPATTR(x[1], 'method', data.method);


}

function build_prov_PMEHash(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'method', data.method);


  return TAG('prov:PMEHash', attr, body);
}




function parse_prov_PMEInfo(data, x) {

  POPTAG_RAW(x[2],  'PMEngineRef', data.PMEngineRef);
  POPTAG_RAW(x[2],  'PMECreatorID', data.PMECreatorID);
  POPTAG_RAW(x[2],  'PMEWhenCreated', data.PMEWhenCreated);
  POPTAG_RAW(x[2],  'PMEEnabled', data.PMEEnabled);
  POPTAG_RAW(x[2],  'PMEWhenEnabled', data.PMEWhenEnabled);
  POPTAG_RAW(x[2],  'PMESize', data.PMESize);
  tag = find_xml_local(x[2], 'PMEHash', 1);
  h =  hash [];
  parse_prov_PMEHash(h, aux1);
  data{'PMEHash'} = h;

}

function build_prov_PMEInfo(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PMEngineRef', data.PMEngineRef);
  PUSHTAG_RAW(body, 'PMECreatorID', data.PMECreatorID);
  PUSHTAG_RAW(body, 'PMEWhenCreated', data.PMEWhenCreated);
  PUSHTAG_RAW(body, 'PMEEnabled', data.PMEEnabled);
  PUSHTAG_RAW(body, 'PMEWhenEnabled', data.PMEWhenEnabled);
  PUSHTAG_RAW(body, 'PMESize', data.PMESize);
  push body, build_prov_PMEHash(data{'PMEHash'});

  return TAG('prov:PMEInfo', attr, body);
}




function parse_prov_PMERegister(data, x) {

  POPTAG_RAW(x[2],  'PMEngineRef', data.PMEngineRef);
  POPTAG_RAW(x[2],  'PMESize', data.PMESize);
  tag = find_xml_local(x[2], 'PMEHash', 1);
  h =  hash [];
  parse_prov_PMEHash(h, aux1);
  data{'PMEHash'} = h;

}

function build_prov_PMERegister(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PMEngineRef', data.PMEngineRef);
  PUSHTAG_RAW(body, 'PMESize', data.PMESize);
  push body, build_prov_PMEHash(data{'PMEHash'});

  return TAG('prov:PMERegister', attr, body);
}




function parse_prov_PMERegisterResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'PMEUploadMax', data.PMEUploadMax);

}

function build_prov_PMERegisterResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  PUSHTAG_RAW(body, 'PMEUploadMax', data.PMEUploadMax);

  return TAG('prov:PMERegisterResponse', attr, body);
}




function parse_prov_PMEUpload(data, x) {
  POPATTR(x[1], 'offset', data.offset);
  POPATTR(x[1], 'remaining', data.remaining);

  POPTAG_RAW(x[2],  'PMEngineRef', data.PMEngineRef);
  POPTAG_RAW(x[2],  'EngineData', data.EngineData);

}

function build_prov_PMEUpload(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'offset', data.offset);
  PUSHATTR(attr, 'remaining', data.remaining);

  PUSHTAG_RAW(body, 'PMEngineRef', data.PMEngineRef);
  PUSHTAG_RAW(body, 'EngineData', data.EngineData);

  return TAG('prov:PMEUpload', attr, body);
}




function parse_prov_PMEUploadResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMEUploadResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMEUploadResponse', attr, body);
}




function parse_prov_PMGetDescriptor(data, x) {

  POPTAG_RAW(x[2],  'PMDArtifact', data.PMDArtifact);
  for (i=1; tag = find_xml_local(x[2], 'CallbackEPR', i); ++i) {
    h =  hash [];
    parse_prov_CallbackEPR(h, tag);
    push data{'CallbackEPR'}, h;
  }

}

function build_prov_PMGetDescriptor(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PMDArtifact', data.PMDArtifact);
  for d(data{'CallbackEPR'}) push body,build_prov_CallbackEPR(d);

  return TAG('prov:PMGetDescriptor', attr, body);
}




function parse_prov_PMGetDescriptorResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'PMDescriptor', 1);
  h =  hash [];
  parse_prov_PMDescriptor(h, aux1);
  data{'PMDescriptor'} = h;

}

function build_prov_PMGetDescriptorResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  push body, build_prov_PMDescriptor(data{'PMDescriptor'});

  return TAG('prov:PMGetDescriptorResponse', attr, body);
}




function parse_prov_PMGetStatus(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMID', i); ++i) {
    h =  hash [];
    parse_prov_PMID(h, tag);
    push data{'PMID'}, h;
  }

}

function build_prov_PMGetStatus(data) {
  attr = [];
  body = [];

  for d(data{'PMID'}) push body,build_prov_PMID(d);

  return TAG('prov:PMGetStatus', attr, body);
}




function parse_prov_PMGetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PMStatus', i); ++i) {
    h =  hash [];
    parse_prov_PMStatus(h, tag);
    push data{'PMStatus'}, h;
  }

}

function build_prov_PMGetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'PMStatus'}) push body,build_prov_PMStatus(d);

  return TAG('prov:PMGetStatusResponse', attr, body);
}




function parse_prov_PMID(data, x) {
  POPATTR(x[1], 'issuer', data.issuer);


}

function build_prov_PMID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'issuer', data.issuer);


  return TAG('prov:PMID', attr, body);
}




function parse_prov_PMRegisterDescriptor(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMRegisterDescriptorItem', i); ++i) {
    h =  hash [];
    parse_prov_PMRegisterDescriptorItem(h, tag);
    push data{'PMRegisterDescriptorItem'}, h;
  }

}

function build_prov_PMRegisterDescriptor(data) {
  attr = [];
  body = [];

  for d(data{'PMRegisterDescriptorItem'}) push body,build_prov_PMRegisterDescriptorItem(d);

  return TAG('prov:PMRegisterDescriptor', attr, body);
}




function parse_prov_PMRegisterDescriptorItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMDescriptor', 1);
  h =  hash [];
  parse_prov_PMDescriptor(h, aux1);
  data{'PMDescriptor'} = h;

}

function build_prov_PMRegisterDescriptorItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMDescriptor(data{'PMDescriptor'});

  return TAG('prov:PMRegisterDescriptorItem', attr, body);
}




function parse_prov_PMRegisterDescriptorResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PMRegisterDescriptorResponseItem', i); ++i) {
    h =  hash [];
    parse_prov_PMRegisterDescriptorResponseItem(h, tag);
    push data{'PMRegisterDescriptorResponseItem'}, h;
  }

}

function build_prov_PMRegisterDescriptorResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'PMRegisterDescriptorResponseItem'}) push body,build_prov_PMRegisterDescriptorResponseItem(d);

  return TAG('prov:PMRegisterDescriptorResponse', attr, body);
}




function parse_prov_PMRegisterDescriptorResponseItem(data, x) {
  POPATTR(x[1], 'ref', data.ref);

  tag = find_xml_local(x[2], 'ProvisioningHandle', 1);
  h =  hash [];
  parse_prov_ProvisioningHandle(h, aux1);
  data{'ProvisioningHandle'} = h;

}

function build_prov_PMRegisterDescriptorResponseItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ref', data.ref);

  push body, build_prov_ProvisioningHandle(data{'ProvisioningHandle'});

  return TAG('prov:PMRegisterDescriptorResponseItem', attr, body);
}




function parse_prov_PMSetStatus(data, x) {

  tag = find_xml_local(x[2], 'PMStatus', 1);
  h =  hash [];
  parse_prov_PMStatus(h, aux1);
  data{'PMStatus'} = h;

}

function build_prov_PMSetStatus(data) {
  attr = [];
  body = [];

  push body, build_prov_PMStatus(data{'PMStatus'});

  return TAG('prov:PMSetStatus', attr, body);
}




function parse_prov_PMSetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMSetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMSetStatusResponse', attr, body);
}




function parse_prov_PMStatus(data, x) {

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;
  tag = find_xml_local(x[2], 'State', 1);
  h =  hash [];
  parse_prov_State(h, aux1);
  data{'State'} = h;

}

function build_prov_PMStatus(data) {
  attr = [];
  body = [];

  push body, build_prov_PMID(data{'PMID'});
  push body, build_prov_State(data{'State'});

  return TAG('prov:PMStatus', attr, body);
}




function parse_prov_PMUpdate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMUpdateItem', i); ++i) {
    h =  hash [];
    parse_prov_PMUpdateItem(h, tag);
    push data{'PMUpdateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_prov_PMUpdate(data) {
  attr = [];
  body = [];

  for d(data{'PMUpdateItem'}) push body,build_prov_PMUpdateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('prov:PMUpdate', attr, body);
}




function parse_prov_PMUpdateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'type', data.type);

  tag = find_xml_local(x[2], 'PMDescriptor', 1);
  h =  hash [];
  parse_prov_PMDescriptor(h, aux1);
  data{'PMDescriptor'} = h;

}

function build_prov_PMUpdateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'type', data.type);

  push body, build_prov_PMDescriptor(data{'PMDescriptor'});

  return TAG('prov:PMUpdateItem', attr, body);
}




function parse_prov_PMUpdateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_PMUpdateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:PMUpdateResponse', attr, body);
}




function parse_prov_Poll(data, x) {
  POPATTR(x[1], 'wait', data.wait);

  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_a_Action(h, tag);
    push data{'Action'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Response', i); ++i) {
    h =  hash [];
    parse_dp_Response(h, tag);
    push data{'Response'}, h;
  }

}

function build_prov_Poll(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wait', data.wait);

  for d(data{'Action'}) push body,build_a_Action(d);
  for d(data{'Response'}) push body,build_dp_Response(d);

  return TAG('prov:Poll', attr, body);
}




function parse_prov_PollResponse(data, x) {
  POPATTR(x[1], 'nextPoll', data.nextPoll);

  for (i=1; tag = find_xml_local(x[2], 'Request', i); ++i) {
    h =  hash [];
    parse_dp_Request(h, tag);
    push data{'Request'}, h;
  }

}

function build_prov_PollResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'nextPoll', data.nextPoll);

  for d(data{'Request'}) push body,build_dp_Request(d);

  return TAG('prov:PollResponse', attr, body);
}




function parse_prov_ProvisioningHandle(data, x) {
  POPATTR(x[1], 'expires', data.expires);

  POPTAG_RAW(x[2],  'PMDArtifact', data.PMDArtifact);
  tag = find_xml_local(x[2], 'ProvisioningServiceEPR', 1);
  h =  hash [];
  parse_prov_ProvisioningServiceEPR(h, aux1);
  data{'ProvisioningServiceEPR'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_prov_ProvisioningHandle(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'expires', data.expires);

  PUSHTAG_RAW(body, 'PMDArtifact', data.PMDArtifact);
  push body, build_prov_ProvisioningServiceEPR(data{'ProvisioningServiceEPR'});
  push body, build_ds_Signature(data{'Signature'});

  return TAG('prov:ProvisioningHandle', attr, body);
}




function parse_prov_ProvisioningServiceEPR(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_prov_ProvisioningServiceEPR(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('prov:ProvisioningServiceEPR', attr, body);
}




function parse_prov_State(data, x) {
  POPATTR(x[1], 'asof', data.asof);


}

function build_prov_State(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'asof', data.asof);


  return TAG('prov:State', attr, body);
}




function parse_prov_UpdateEPR(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'UpdateEPRItem', i); ++i) {
    h =  hash [];
    parse_prov_UpdateEPRItem(h, tag);
    push data{'UpdateEPRItem'}, h;
  }

}

function build_prov_UpdateEPR(data) {
  attr = [];
  body = [];

  for d(data{'UpdateEPRItem'}) push body,build_prov_UpdateEPRItem(d);

  return TAG('prov:UpdateEPR', attr, body);
}




function parse_prov_UpdateEPRItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;
  tag = find_xml_local(x[2], 'CallbackEPR', 1);
  h =  hash [];
  parse_prov_CallbackEPR(h, aux1);
  data{'CallbackEPR'} = h;

}

function build_prov_UpdateEPRItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});
  push body, build_prov_CallbackEPR(data{'CallbackEPR'});

  return TAG('prov:UpdateEPRItem', attr, body);
}




function parse_prov_UpdateEPRResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_prov_UpdateEPRResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('prov:UpdateEPRResponse', attr, body);
}


/* EOF -- c/zx-prov.ds */
