/* c/zx-b12-data.h - WARNING: This header was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Datastructure design, topography, and layout
 * Copyright (c) 2006,2010 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for
 * terms and conditions of use. Element and attributes names as well
 * as some topography are derived from schema descriptions that were used as
 * input and may be subject to their own copright. */

#ifndef _c_zx_b12_data_h
#define _c_zx_b12_data_h

#include "zx.h"
#include "c/zx-const.h"
#include "c/zx-data.h"

#ifndef ZX_ELEM_EXT
#define ZX_ELEM_EXT  /* This extension point should be defined by who includes this file. */
#endif

/* -------------------------- b12_Consent -------------------------- */
/* refby( zx_e_Header_s ) */
#ifndef zx_b12_Consent_EXT
#define zx_b12_Consent_EXT
#endif
struct zx_b12_Consent_s {
  ZX_ELEM_EXT
  zx_b12_Consent_EXT
  struct zx_attr_s* id;	/* {0,1} attribute xs:ID */
  struct zx_attr_s* timestamp;	/* {0,1} attribute xs:dateTime */
  struct zx_attr_s* uri;	/* {1,1} attribute xs:anyURI */
  struct zx_attr_s* actor;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* mustUnderstand;	/* {0,1} attribute xs:boolean */
};

#define zx_NEW_b12_Consent(c, father) (struct zx_b12_Consent_s*)zx_new_elem((c),(father),zx_b12_Consent_ELEM)
int zx_DEC_ATTR_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x);
int zx_DEC_ELEM_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x);

#ifdef ZX_ENA_AUX
struct zx_b12_Consent_s* zx_DEEP_CLONE_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x, int dup_strs);
void zx_DUP_STRS_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x);
int zx_WALK_SO_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
int zx_WALK_WO_b12_Consent(struct zx_ctx* c, struct zx_b12_Consent_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
#endif

#ifdef ZX_ENA_GETPUT
struct zx_attr_s* zx_b12_Consent_GET_id(struct zx_b12_Consent_s* x);
struct zx_attr_s* zx_b12_Consent_GET_timestamp(struct zx_b12_Consent_s* x);
struct zx_attr_s* zx_b12_Consent_GET_uri(struct zx_b12_Consent_s* x);
struct zx_attr_s* zx_b12_Consent_GET_actor(struct zx_b12_Consent_s* x);
struct zx_attr_s* zx_b12_Consent_GET_mustUnderstand(struct zx_b12_Consent_s* x);





void zx_b12_Consent_PUT_id(struct zx_b12_Consent_s* x, struct zx_attr_s* y);
void zx_b12_Consent_PUT_timestamp(struct zx_b12_Consent_s* x, struct zx_attr_s* y);
void zx_b12_Consent_PUT_uri(struct zx_b12_Consent_s* x, struct zx_attr_s* y);
void zx_b12_Consent_PUT_actor(struct zx_b12_Consent_s* x, struct zx_attr_s* y);
void zx_b12_Consent_PUT_mustUnderstand(struct zx_b12_Consent_s* x, struct zx_attr_s* y);





#endif
/* -------------------------- b12_Correlation -------------------------- */
/* refby( zx_e_Header_s ) */
#ifndef zx_b12_Correlation_EXT
#define zx_b12_Correlation_EXT
#endif
struct zx_b12_Correlation_s {
  ZX_ELEM_EXT
  zx_b12_Correlation_EXT
  struct zx_attr_s* id;	/* {0,1} attribute xs:ID */
  struct zx_attr_s* messageID;	/* {1,1} attribute xs:string */
  struct zx_attr_s* refToMessageID;	/* {0,1} attribute xs:string */
  struct zx_attr_s* timestamp;	/* {1,1} attribute xs:dateTime */
  struct zx_attr_s* actor;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* mustUnderstand;	/* {0,1} attribute xs:boolean */
};

#define zx_NEW_b12_Correlation(c, father) (struct zx_b12_Correlation_s*)zx_new_elem((c),(father),zx_b12_Correlation_ELEM)
int zx_DEC_ATTR_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x);
int zx_DEC_ELEM_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x);

#ifdef ZX_ENA_AUX
struct zx_b12_Correlation_s* zx_DEEP_CLONE_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x, int dup_strs);
void zx_DUP_STRS_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x);
int zx_WALK_SO_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
int zx_WALK_WO_b12_Correlation(struct zx_ctx* c, struct zx_b12_Correlation_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
#endif

#ifdef ZX_ENA_GETPUT
struct zx_attr_s* zx_b12_Correlation_GET_id(struct zx_b12_Correlation_s* x);
struct zx_attr_s* zx_b12_Correlation_GET_messageID(struct zx_b12_Correlation_s* x);
struct zx_attr_s* zx_b12_Correlation_GET_refToMessageID(struct zx_b12_Correlation_s* x);
struct zx_attr_s* zx_b12_Correlation_GET_timestamp(struct zx_b12_Correlation_s* x);
struct zx_attr_s* zx_b12_Correlation_GET_actor(struct zx_b12_Correlation_s* x);
struct zx_attr_s* zx_b12_Correlation_GET_mustUnderstand(struct zx_b12_Correlation_s* x);





void zx_b12_Correlation_PUT_id(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);
void zx_b12_Correlation_PUT_messageID(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);
void zx_b12_Correlation_PUT_refToMessageID(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);
void zx_b12_Correlation_PUT_timestamp(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);
void zx_b12_Correlation_PUT_actor(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);
void zx_b12_Correlation_PUT_mustUnderstand(struct zx_b12_Correlation_s* x, struct zx_attr_s* y);





#endif
/* -------------------------- b12_ProcessingContext -------------------------- */
/* refby( zx_e_Header_s ) */
#ifndef zx_b12_ProcessingContext_EXT
#define zx_b12_ProcessingContext_EXT
#endif
struct zx_b12_ProcessingContext_s {
  ZX_ELEM_EXT
  zx_b12_ProcessingContext_EXT
  struct zx_attr_s* id;	/* {0,1} attribute xs:ID */
  struct zx_attr_s* actor;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* mustUnderstand;	/* {0,1} attribute xs:boolean */
};

#define zx_NEW_b12_ProcessingContext(c, father) (struct zx_b12_ProcessingContext_s*)zx_new_elem((c),(father),zx_b12_ProcessingContext_ELEM)
int zx_DEC_ATTR_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x);
int zx_DEC_ELEM_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x);

#ifdef ZX_ENA_AUX
struct zx_b12_ProcessingContext_s* zx_DEEP_CLONE_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x, int dup_strs);
void zx_DUP_STRS_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x);
int zx_WALK_SO_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
int zx_WALK_WO_b12_ProcessingContext(struct zx_ctx* c, struct zx_b12_ProcessingContext_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
#endif

#ifdef ZX_ENA_GETPUT
struct zx_attr_s* zx_b12_ProcessingContext_GET_id(struct zx_b12_ProcessingContext_s* x);
struct zx_attr_s* zx_b12_ProcessingContext_GET_actor(struct zx_b12_ProcessingContext_s* x);
struct zx_attr_s* zx_b12_ProcessingContext_GET_mustUnderstand(struct zx_b12_ProcessingContext_s* x);





void zx_b12_ProcessingContext_PUT_id(struct zx_b12_ProcessingContext_s* x, struct zx_attr_s* y);
void zx_b12_ProcessingContext_PUT_actor(struct zx_b12_ProcessingContext_s* x, struct zx_attr_s* y);
void zx_b12_ProcessingContext_PUT_mustUnderstand(struct zx_b12_ProcessingContext_s* x, struct zx_attr_s* y);





#endif
/* -------------------------- b12_Provider -------------------------- */
/* refby( zx_e_Header_s ) */
#ifndef zx_b12_Provider_EXT
#define zx_b12_Provider_EXT
#endif
struct zx_b12_Provider_s {
  ZX_ELEM_EXT
  zx_b12_Provider_EXT
  struct zx_attr_s* affiliationID;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* id;	/* {0,1} attribute xs:ID */
  struct zx_attr_s* providerID;	/* {1,1} attribute xs:anyURI */
  struct zx_attr_s* actor;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* mustUnderstand;	/* {0,1} attribute xs:boolean */
};

#define zx_NEW_b12_Provider(c, father) (struct zx_b12_Provider_s*)zx_new_elem((c),(father),zx_b12_Provider_ELEM)
int zx_DEC_ATTR_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x);
int zx_DEC_ELEM_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x);

#ifdef ZX_ENA_AUX
struct zx_b12_Provider_s* zx_DEEP_CLONE_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x, int dup_strs);
void zx_DUP_STRS_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x);
int zx_WALK_SO_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
int zx_WALK_WO_b12_Provider(struct zx_ctx* c, struct zx_b12_Provider_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
#endif

#ifdef ZX_ENA_GETPUT
struct zx_attr_s* zx_b12_Provider_GET_affiliationID(struct zx_b12_Provider_s* x);
struct zx_attr_s* zx_b12_Provider_GET_id(struct zx_b12_Provider_s* x);
struct zx_attr_s* zx_b12_Provider_GET_providerID(struct zx_b12_Provider_s* x);
struct zx_attr_s* zx_b12_Provider_GET_actor(struct zx_b12_Provider_s* x);
struct zx_attr_s* zx_b12_Provider_GET_mustUnderstand(struct zx_b12_Provider_s* x);





void zx_b12_Provider_PUT_affiliationID(struct zx_b12_Provider_s* x, struct zx_attr_s* y);
void zx_b12_Provider_PUT_id(struct zx_b12_Provider_s* x, struct zx_attr_s* y);
void zx_b12_Provider_PUT_providerID(struct zx_b12_Provider_s* x, struct zx_attr_s* y);
void zx_b12_Provider_PUT_actor(struct zx_b12_Provider_s* x, struct zx_attr_s* y);
void zx_b12_Provider_PUT_mustUnderstand(struct zx_b12_Provider_s* x, struct zx_attr_s* y);





#endif
/* -------------------------- b12_UsageDirective -------------------------- */
/* refby( zx_e_Header_s ) */
#ifndef zx_b12_UsageDirective_EXT
#define zx_b12_UsageDirective_EXT
#endif
struct zx_b12_UsageDirective_s {
  ZX_ELEM_EXT
  zx_b12_UsageDirective_EXT
  struct zx_attr_s* id;	/* {0,1} attribute xs:ID */
  struct zx_attr_s* ref;	/* {1,1} attribute xs:anyURI */
  struct zx_attr_s* actor;	/* {0,1} attribute xs:anyURI */
  struct zx_attr_s* mustUnderstand;	/* {0,1} attribute xs:boolean */
};

#define zx_NEW_b12_UsageDirective(c, father) (struct zx_b12_UsageDirective_s*)zx_new_elem((c),(father),zx_b12_UsageDirective_ELEM)
int zx_DEC_ATTR_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x);
int zx_DEC_ELEM_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x);

#ifdef ZX_ENA_AUX
struct zx_b12_UsageDirective_s* zx_DEEP_CLONE_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x, int dup_strs);
void zx_DUP_STRS_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x);
int zx_WALK_SO_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
int zx_WALK_WO_b12_UsageDirective(struct zx_ctx* c, struct zx_b12_UsageDirective_s* x, void* ctx, int (*callback)(struct zx_node_s* node, void* ctx));
#endif

#ifdef ZX_ENA_GETPUT
struct zx_attr_s* zx_b12_UsageDirective_GET_id(struct zx_b12_UsageDirective_s* x);
struct zx_attr_s* zx_b12_UsageDirective_GET_ref(struct zx_b12_UsageDirective_s* x);
struct zx_attr_s* zx_b12_UsageDirective_GET_actor(struct zx_b12_UsageDirective_s* x);
struct zx_attr_s* zx_b12_UsageDirective_GET_mustUnderstand(struct zx_b12_UsageDirective_s* x);





void zx_b12_UsageDirective_PUT_id(struct zx_b12_UsageDirective_s* x, struct zx_attr_s* y);
void zx_b12_UsageDirective_PUT_ref(struct zx_b12_UsageDirective_s* x, struct zx_attr_s* y);
void zx_b12_UsageDirective_PUT_actor(struct zx_b12_UsageDirective_s* x, struct zx_attr_s* y);
void zx_b12_UsageDirective_PUT_mustUnderstand(struct zx_b12_UsageDirective_s* x, struct zx_attr_s* y);





#endif

#endif
