/* c/zx-m20.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_m20_AdditionalMetaLocation(data, x) {
  POPATTR(x[1], 'namespace', data.namespace);


}

function build_m20_AdditionalMetaLocation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'namespace', data.namespace);


  return TAG('m20:AdditionalMetaLocation', attr, body);
}




function parse_m20_AffiliationDescriptor(data, x) {
  POPATTR(x[1], 'affiliationOwnerID', data.affiliationOwnerID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'validUntil', data.validUntil);

  for (i=1; tag = find_xml_local(x[2], 'AffiliateMember', i); ++i)
    push data{'AffiliateMember'}, tag[2];
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_m20_AffiliationDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'affiliationOwnerID', data.affiliationOwnerID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  for d(data{'AffiliateMember'})PUSHTAG_RAW(body,'AffiliateMember',d);
  push body, build_m20_Extension(data{'Extension'});
  for d(data{'KeyDescriptor'}) push body,build_m20_KeyDescriptor(d);
  push body, build_ds_Signature(data{'Signature'});

  return TAG('m20:AffiliationDescriptor', attr, body);
}




function parse_m20_AssertionConsumerServiceURL(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_m20_AssertionConsumerServiceURL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('m20:AssertionConsumerServiceURL', attr, body);
}




function parse_m20_ContactPerson(data, x) {
  POPATTR(x[1], 'contactType', data.contactType);
  POPATTR(x[1], 'libertyPrincipalIdentifier', data.libertyPrincipalIdentifier);

  POPTAG_RAW(x[2],  'Company', data.Company);
  POPTAG_RAW(x[2],  'GivenName', data.GivenName);
  POPTAG_RAW(x[2],  'SurName', data.SurName);
  for (i=1; tag = find_xml_local(x[2], 'EmailAddress', i); ++i)
    push data{'EmailAddress'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'TelephoneNumber', i); ++i)
    push data{'TelephoneNumber'}, tag[2];
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_m20_ContactPerson(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'contactType', data.contactType);
  PUSHATTR(attr, 'libertyPrincipalIdentifier', data.libertyPrincipalIdentifier);

  PUSHTAG_RAW(body, 'Company', data.Company);
  PUSHTAG_RAW(body, 'GivenName', data.GivenName);
  PUSHTAG_RAW(body, 'SurName', data.SurName);
  for d(data{'EmailAddress'})PUSHTAG_RAW(body,'EmailAddress',d);
  for d(data{'TelephoneNumber'})PUSHTAG_RAW(body,'TelephoneNumber',d);
  push body, build_m20_Extension(data{'Extension'});

  return TAG('m20:ContactPerson', attr, body);
}




function parse_m20_EntitiesDescriptor(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'EntityDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_EntityDescriptor(h, tag);
    push data{'EntityDescriptor'}, h;
  }

}

function build_m20_EntitiesDescriptor(data) {
  attr = [];
  body = [];

  for d(data{'EntityDescriptor'}) push body,build_m20_EntityDescriptor(d);

  return TAG('m20:EntitiesDescriptor', attr, body);
}




function parse_m20_EntityDescriptor(data, x) {
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'providerID', data.providerID);
  POPATTR(x[1], 'validUntil', data.validUntil);

  for (i=1; tag = find_xml_local(x[2], 'IDPDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_IDPDescriptor(h, tag);
    push data{'IDPDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SPDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_SPDescriptor(h, tag);
    push data{'SPDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AffiliationDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_AffiliationDescriptor(h, tag);
    push data{'AffiliationDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'ContactPerson', 1);
  h =  hash [];
  parse_m20_ContactPerson(h, aux1);
  data{'ContactPerson'} = h;
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_m20_Organization(h, aux1);
  data{'Organization'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_m20_EntityDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'providerID', data.providerID);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  for d(data{'IDPDescriptor'}) push body,build_m20_IDPDescriptor(d);
  for d(data{'SPDescriptor'}) push body,build_m20_SPDescriptor(d);
  for d(data{'AffiliationDescriptor'}) push body,build_m20_AffiliationDescriptor(d);
  push body, build_m20_ContactPerson(data{'ContactPerson'});
  push body, build_m20_Organization(data{'Organization'});
  push body, build_m20_Extension(data{'Extension'});
  push body, build_ds_Signature(data{'Signature'});

  return TAG('m20:EntityDescriptor', attr, body);
}




function parse_m20_Extension(data, x) {


}

function build_m20_Extension(data) {
  attr = [];
  body = [];


  return TAG('m20:Extension', attr, body);
}




function parse_m20_IDPDescriptor(data, x) {
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  POPTAG_RAW(x[2],  'SoapEndpoint', data.SoapEndpoint);
  POPTAG_RAW(x[2],  'SingleLogoutServiceURL', data.SingleLogoutServiceURL);
  POPTAG_RAW(x[2],  'SingleLogoutServiceReturnURL', data.SingleLogoutServiceReturnURL);
  POPTAG_RAW(x[2],  'FederationTerminationServiceURL', data.FederationTerminationServiceURL);
  POPTAG_RAW(x[2],  'FederationTerminationServiceReturnURL', data.FederationTerminationServiceReturnURL);
  for (i=1; tag = find_xml_local(x[2], 'FederationTerminationNotificationProtocolProfile', i); ++i)
    push data{'FederationTerminationNotificationProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SingleLogoutProtocolProfile', i); ++i)
    push data{'SingleLogoutProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'RegisterNameIdentifierProtocolProfile', i); ++i)
    push data{'RegisterNameIdentifierProtocolProfile'}, tag[2];
  POPTAG_RAW(x[2],  'RegisterNameIdentifierServiceURL', data.RegisterNameIdentifierServiceURL);
  POPTAG_RAW(x[2],  'RegisterNameIdentifierServiceReturnURL', data.RegisterNameIdentifierServiceReturnURL);
  for (i=1; tag = find_xml_local(x[2], 'NameIdentifierMappingProtocolProfile', i); ++i)
    push data{'NameIdentifierMappingProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'NameIdentifierMappingEncryptionProfile', i); ++i)
    push data{'NameIdentifierMappingEncryptionProfile'}, tag[2];
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_m20_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_m20_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalMetaLocation', i); ++i) {
    h =  hash [];
    parse_m20_AdditionalMetaLocation(h, tag);
    push data{'AdditionalMetaLocation'}, h;
  }
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  POPTAG_RAW(x[2],  'SingleSignOnServiceURL', data.SingleSignOnServiceURL);
  for (i=1; tag = find_xml_local(x[2], 'SingleSignOnProtocolProfile', i); ++i)
    push data{'SingleSignOnProtocolProfile'}, tag[2];
  POPTAG_RAW(x[2],  'AuthnServiceURL', data.AuthnServiceURL);

}

function build_m20_IDPDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  for d(data{'KeyDescriptor'}) push body,build_m20_KeyDescriptor(d);
  PUSHTAG_RAW(body, 'SoapEndpoint', data.SoapEndpoint);
  PUSHTAG_RAW(body, 'SingleLogoutServiceURL', data.SingleLogoutServiceURL);
  PUSHTAG_RAW(body, 'SingleLogoutServiceReturnURL', data.SingleLogoutServiceReturnURL);
  PUSHTAG_RAW(body, 'FederationTerminationServiceURL', data.FederationTerminationServiceURL);
  PUSHTAG_RAW(body, 'FederationTerminationServiceReturnURL', data.FederationTerminationServiceReturnURL);
  for d(data{'FederationTerminationNotificationProtocolProfile'})PUSHTAG_RAW(body,'FederationTerminationNotificationProtocolProfile',d);
  for d(data{'SingleLogoutProtocolProfile'})PUSHTAG_RAW(body,'SingleLogoutProtocolProfile',d);
  for d(data{'RegisterNameIdentifierProtocolProfile'})PUSHTAG_RAW(body,'RegisterNameIdentifierProtocolProfile',d);
  PUSHTAG_RAW(body, 'RegisterNameIdentifierServiceURL', data.RegisterNameIdentifierServiceURL);
  PUSHTAG_RAW(body, 'RegisterNameIdentifierServiceReturnURL', data.RegisterNameIdentifierServiceReturnURL);
  for d(data{'NameIdentifierMappingProtocolProfile'})PUSHTAG_RAW(body,'NameIdentifierMappingProtocolProfile',d);
  for d(data{'NameIdentifierMappingEncryptionProfile'})PUSHTAG_RAW(body,'NameIdentifierMappingEncryptionProfile',d);
  push body, build_m20_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_m20_ContactPerson(d);
  for d(data{'AdditionalMetaLocation'}) push body,build_m20_AdditionalMetaLocation(d);
  push body, build_m20_Extension(data{'Extension'});
  push body, build_ds_Signature(data{'Signature'});
  PUSHTAG_RAW(body, 'SingleSignOnServiceURL', data.SingleSignOnServiceURL);
  for d(data{'SingleSignOnProtocolProfile'})PUSHTAG_RAW(body,'SingleSignOnProtocolProfile',d);
  PUSHTAG_RAW(body, 'AuthnServiceURL', data.AuthnServiceURL);

  return TAG('m20:IDPDescriptor', attr, body);
}




function parse_m20_KeyDescriptor(data, x) {
  POPATTR(x[1], 'use', data.use);

  POPTAG_RAW(x[2],  'EncryptionMethod', data.EncryptionMethod);
  POPTAG_RAW(x[2],  'KeySize', data.KeySize);
  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_m20_KeyDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'use', data.use);

  PUSHTAG_RAW(body, 'EncryptionMethod', data.EncryptionMethod);
  PUSHTAG_RAW(body, 'KeySize', data.KeySize);
  push body, build_ds_KeyInfo(data{'KeyInfo'});
  push body, build_m20_Extension(data{'Extension'});

  return TAG('m20:KeyDescriptor', attr, body);
}




function parse_m20_Organization(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'OrganizationName', i); ++i) {
    h =  hash [];
    parse_m20_OrganizationName(h, tag);
    push data{'OrganizationName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrganizationDisplayName', i); ++i) {
    h =  hash [];
    parse_m20_OrganizationDisplayName(h, tag);
    push data{'OrganizationDisplayName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrganizationURL', i); ++i) {
    h =  hash [];
    parse_m20_OrganizationURL(h, tag);
    push data{'OrganizationURL'}, h;
  }
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_m20_Organization(data) {
  attr = [];
  body = [];

  for d(data{'OrganizationName'}) push body,build_m20_OrganizationName(d);
  for d(data{'OrganizationDisplayName'}) push body,build_m20_OrganizationDisplayName(d);
  for d(data{'OrganizationURL'}) push body,build_m20_OrganizationURL(d);
  push body, build_m20_Extension(data{'Extension'});

  return TAG('m20:Organization', attr, body);
}




function parse_m20_OrganizationDisplayName(data, x) {
  POPATTR(x[1], 'lang', data.lang);


}

function build_m20_OrganizationDisplayName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'lang', data.lang);


  return TAG('m20:OrganizationDisplayName', attr, body);
}




function parse_m20_OrganizationName(data, x) {
  POPATTR(x[1], 'lang', data.lang);


}

function build_m20_OrganizationName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'lang', data.lang);


  return TAG('m20:OrganizationName', attr, body);
}




function parse_m20_OrganizationURL(data, x) {
  POPATTR(x[1], 'lang', data.lang);


}

function build_m20_OrganizationURL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'lang', data.lang);


  return TAG('m20:OrganizationURL', attr, body);
}




function parse_m20_SPDescriptor(data, x) {
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_m20_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  POPTAG_RAW(x[2],  'SoapEndpoint', data.SoapEndpoint);
  POPTAG_RAW(x[2],  'SingleLogoutServiceURL', data.SingleLogoutServiceURL);
  POPTAG_RAW(x[2],  'SingleLogoutServiceReturnURL', data.SingleLogoutServiceReturnURL);
  POPTAG_RAW(x[2],  'FederationTerminationServiceURL', data.FederationTerminationServiceURL);
  POPTAG_RAW(x[2],  'FederationTerminationServiceReturnURL', data.FederationTerminationServiceReturnURL);
  for (i=1; tag = find_xml_local(x[2], 'FederationTerminationNotificationProtocolProfile', i); ++i)
    push data{'FederationTerminationNotificationProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SingleLogoutProtocolProfile', i); ++i)
    push data{'SingleLogoutProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'RegisterNameIdentifierProtocolProfile', i); ++i)
    push data{'RegisterNameIdentifierProtocolProfile'}, tag[2];
  POPTAG_RAW(x[2],  'RegisterNameIdentifierServiceURL', data.RegisterNameIdentifierServiceURL);
  POPTAG_RAW(x[2],  'RegisterNameIdentifierServiceReturnURL', data.RegisterNameIdentifierServiceReturnURL);
  for (i=1; tag = find_xml_local(x[2], 'NameIdentifierMappingProtocolProfile', i); ++i)
    push data{'NameIdentifierMappingProtocolProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'NameIdentifierMappingEncryptionProfile', i); ++i)
    push data{'NameIdentifierMappingEncryptionProfile'}, tag[2];
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_m20_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_m20_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalMetaLocation', i); ++i) {
    h =  hash [];
    parse_m20_AdditionalMetaLocation(h, tag);
    push data{'AdditionalMetaLocation'}, h;
  }
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_m20_Extension(h, aux1);
  data{'Extension'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AssertionConsumerServiceURL', i); ++i) {
    h =  hash [];
    parse_m20_AssertionConsumerServiceURL(h, tag);
    push data{'AssertionConsumerServiceURL'}, h;
  }
  POPTAG_RAW(x[2],  'AuthnRequestsSigned', data.AuthnRequestsSigned);

}

function build_m20_SPDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  for d(data{'KeyDescriptor'}) push body,build_m20_KeyDescriptor(d);
  PUSHTAG_RAW(body, 'SoapEndpoint', data.SoapEndpoint);
  PUSHTAG_RAW(body, 'SingleLogoutServiceURL', data.SingleLogoutServiceURL);
  PUSHTAG_RAW(body, 'SingleLogoutServiceReturnURL', data.SingleLogoutServiceReturnURL);
  PUSHTAG_RAW(body, 'FederationTerminationServiceURL', data.FederationTerminationServiceURL);
  PUSHTAG_RAW(body, 'FederationTerminationServiceReturnURL', data.FederationTerminationServiceReturnURL);
  for d(data{'FederationTerminationNotificationProtocolProfile'})PUSHTAG_RAW(body,'FederationTerminationNotificationProtocolProfile',d);
  for d(data{'SingleLogoutProtocolProfile'})PUSHTAG_RAW(body,'SingleLogoutProtocolProfile',d);
  for d(data{'RegisterNameIdentifierProtocolProfile'})PUSHTAG_RAW(body,'RegisterNameIdentifierProtocolProfile',d);
  PUSHTAG_RAW(body, 'RegisterNameIdentifierServiceURL', data.RegisterNameIdentifierServiceURL);
  PUSHTAG_RAW(body, 'RegisterNameIdentifierServiceReturnURL', data.RegisterNameIdentifierServiceReturnURL);
  for d(data{'NameIdentifierMappingProtocolProfile'})PUSHTAG_RAW(body,'NameIdentifierMappingProtocolProfile',d);
  for d(data{'NameIdentifierMappingEncryptionProfile'})PUSHTAG_RAW(body,'NameIdentifierMappingEncryptionProfile',d);
  push body, build_m20_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_m20_ContactPerson(d);
  for d(data{'AdditionalMetaLocation'}) push body,build_m20_AdditionalMetaLocation(d);
  push body, build_m20_Extension(data{'Extension'});
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'AssertionConsumerServiceURL'}) push body,build_m20_AssertionConsumerServiceURL(d);
  PUSHTAG_RAW(body, 'AuthnRequestsSigned', data.AuthnRequestsSigned);

  return TAG('m20:SPDescriptor', attr, body);
}


/* EOF -- c/zx-m20.ds */
