/* c/zx-hrxml.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_hrxml_AccountingCode(data, x) {
  POPATTR(x[1], 'description', data.description);


}

function build_hrxml_AccountingCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);


  return TAG('hrxml:AccountingCode', attr, body);
}




function parse_hrxml_Achievement(data, x) {

  POPTAG_RAW(x[2],  'Date', data.Date);
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  tag = find_xml_local(x[2], 'IssuingAuthority', 1);
  h =  hash [];
  parse_hrxml_IssuingAuthority(h, aux1);
  data{'IssuingAuthority'} = h;

}

function build_hrxml_Achievement(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Date', data.Date);
  push body, build_hrxml_Description(data{'Description'});
  push body, build_hrxml_IssuingAuthority(data{'IssuingAuthority'});

  return TAG('hrxml:Achievement', attr, body);
}




function parse_hrxml_Achievements(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Achievement', i); ++i) {
    h =  hash [];
    parse_hrxml_Achievement(h, tag);
    push data{'Achievement'}, h;
  }

}

function build_hrxml_Achievements(data) {
  attr = [];
  body = [];

  for d(data{'Achievement'}) push body,build_hrxml_Achievement(d);

  return TAG('hrxml:Achievements', attr, body);
}




function parse_hrxml_AffirmativeActionPlanJobGroupId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_AffirmativeActionPlanJobGroupId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:AffirmativeActionPlanJobGroupId', attr, body);
}




function parse_hrxml_Affix(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_Affix(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:Affix', attr, body);
}




function parse_hrxml_AlternateScript(data, x) {
  POPATTR(x[1], 'script', data.script);

  POPTAG_RAW(x[2],  'FormattedName', data.FormattedName);
  POPTAG_RAW(x[2],  'LegalName', data.LegalName);
  for (i=1; tag = find_xml_local(x[2], 'GivenName', i); ++i)
    push data{'GivenName'}, tag[2];
  POPTAG_RAW(x[2],  'PreferredGivenName', data.PreferredGivenName);
  POPTAG_RAW(x[2],  'MiddleName', data.MiddleName);
  for (i=1; tag = find_xml_local(x[2], 'FamilyName', i); ++i) {
    h =  hash [];
    parse_hrxml_FamilyName(h, tag);
    push data{'FamilyName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Affix', i); ++i) {
    h =  hash [];
    parse_hrxml_Affix(h, tag);
    push data{'Affix'}, h;
  }

}

function build_hrxml_AlternateScript(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'script', data.script);

  PUSHTAG_RAW(body, 'FormattedName', data.FormattedName);
  PUSHTAG_RAW(body, 'LegalName', data.LegalName);
  for d(data{'GivenName'})PUSHTAG_RAW(body,'GivenName',d);
  PUSHTAG_RAW(body, 'PreferredGivenName', data.PreferredGivenName);
  PUSHTAG_RAW(body, 'MiddleName', data.MiddleName);
  for d(data{'FamilyName'}) push body,build_hrxml_FamilyName(d);
  for d(data{'Affix'}) push body,build_hrxml_Affix(d);

  return TAG('hrxml:AlternateScript', attr, body);
}




function parse_hrxml_Area(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'Value', data.Value);
  for (i=1; tag = find_xml_local(x[2], 'Area', i); ++i) {
    h =  hash [];
    parse_hrxml_Area(h, tag);
    push data{'Area'}, h;
  }

}

function build_hrxml_Area(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'Value', data.Value);
  for d(data{'Area'}) push body,build_hrxml_Area(d);

  return TAG('hrxml:Area', attr, body);
}




function parse_hrxml_Article(data, x) {

  POPTAG_RAW(x[2],  'Title', data.Title);
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];
  tag = find_xml_local(x[2], 'PublicationDate', 1);
  h =  hash [];
  parse_hrxml_PublicationDate(h, aux1);
  data{'PublicationDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Link', i); ++i)
    push data{'Link'}, tag[2];
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  tag = find_xml_local(x[2], 'Copyright', 1);
  h =  hash [];
  parse_hrxml_Copyright(h, aux1);
  data{'Copyright'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'JournalOrSerialName', data.JournalOrSerialName);
  POPTAG_RAW(x[2],  'ISSN', data.ISSN);
  POPTAG_RAW(x[2],  'Volume', data.Volume);
  POPTAG_RAW(x[2],  'Issue', data.Issue);
  POPTAG_RAW(x[2],  'PageNumber', data.PageNumber);
  tag = find_xml_local(x[2], 'PublicationLanguage', 1);
  h =  hash [];
  parse_hrxml_PublicationLanguage(h, aux1);
  data{'PublicationLanguage'} = h;

}

function build_hrxml_Article(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Title', data.Title);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);
  push body, build_hrxml_PublicationDate(data{'PublicationDate'});
  for d(data{'Link'})PUSHTAG_RAW(body,'Link',d);
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  push body, build_hrxml_Copyright(data{'Copyright'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'JournalOrSerialName', data.JournalOrSerialName);
  PUSHTAG_RAW(body, 'ISSN', data.ISSN);
  PUSHTAG_RAW(body, 'Volume', data.Volume);
  PUSHTAG_RAW(body, 'Issue', data.Issue);
  PUSHTAG_RAW(body, 'PageNumber', data.PageNumber);
  push body, build_hrxml_PublicationLanguage(data{'PublicationLanguage'});

  return TAG('hrxml:Article', attr, body);
}




function parse_hrxml_Association(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'Name', data.Name);
  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Link', data.Link);
  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Role', i); ++i)
    push data{'Role'}, tag[2];
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Association(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'Name', data.Name);
  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Link', data.Link);
  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});
  for d(data{'Role'})PUSHTAG_RAW(body,'Role',d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Association', attr, body);
}




function parse_hrxml_Associations(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Association', i); ++i) {
    h =  hash [];
    parse_hrxml_Association(h, tag);
    push data{'Association'}, h;
  }

}

function build_hrxml_Associations(data) {
  attr = [];
  body = [];

  for d(data{'Association'}) push body,build_hrxml_Association(d);

  return TAG('hrxml:Associations', attr, body);
}




function parse_hrxml_AttachmentReference(data, x) {
  POPATTR(x[1], 'context', data.context);
  POPATTR(x[1], 'mimeType', data.mimeType);


}

function build_hrxml_AttachmentReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'context', data.context);
  PUSHATTR(attr, 'mimeType', data.mimeType);


  return TAG('hrxml:AttachmentReference', attr, body);
}




function parse_hrxml_AvailabilityDates(data, x) {

  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;

}

function build_hrxml_AvailabilityDates(data) {
  attr = [];
  body = [];

  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});

  return TAG('hrxml:AvailabilityDates', attr, body);
}




function parse_hrxml_AvailabilityInfo(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AvailabilityDates', i); ++i) {
    h =  hash [];
    parse_hrxml_AvailabilityDates(h, tag);
    push data{'AvailabilityDates'}, h;
  }
  tag = find_xml_local(x[2], 'TermOfNotice', 1);
  h =  hash [];
  parse_hrxml_TermOfNotice(h, aux1);
  data{'TermOfNotice'} = h;

}

function build_hrxml_AvailabilityInfo(data) {
  attr = [];
  body = [];

  for d(data{'AvailabilityDates'}) push body,build_hrxml_AvailabilityDates(d);
  push body, build_hrxml_TermOfNotice(data{'TermOfNotice'});

  return TAG('hrxml:AvailabilityInfo', attr, body);
}




function parse_hrxml_BKZClassification(data, x) {

  tag = find_xml_local(x[2], 'BKZId', 1);
  h =  hash [];
  parse_hrxml_BKZId(h, aux1);
  data{'BKZId'} = h;
  POPTAG_RAW(x[2],  'BKZName', data.BKZName);

}

function build_hrxml_BKZClassification(data) {
  attr = [];
  body = [];

  push body, build_hrxml_BKZId(data{'BKZId'});
  PUSHTAG_RAW(body, 'BKZName', data.BKZName);

  return TAG('hrxml:BKZClassification', attr, body);
}




function parse_hrxml_BKZId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_BKZId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:BKZId', attr, body);
}




function parse_hrxml_BasePay(data, x) {
  POPATTR(x[1], 'baseInterval', data.baseInterval);
  POPATTR(x[1], 'currencyCode', data.currencyCode);

  POPTAG_RAW(x[2],  'BasePayAmountMin', data.BasePayAmountMin);
  POPTAG_RAW(x[2],  'BasePayAmountMax', data.BasePayAmountMax);

}

function build_hrxml_BasePay(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'baseInterval', data.baseInterval);
  PUSHATTR(attr, 'currencyCode', data.currencyCode);

  PUSHTAG_RAW(body, 'BasePayAmountMin', data.BasePayAmountMin);
  PUSHTAG_RAW(body, 'BasePayAmountMax', data.BasePayAmountMax);

  return TAG('hrxml:BasePay', attr, body);
}




function parse_hrxml_Benefits(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Insurance', i); ++i) {
    h =  hash [];
    parse_hrxml_Insurance(h, tag);
    push data{'Insurance'}, h;
  }
  POPTAG_RAW(x[2],  'RetirementOrSavingsPlan', data.RetirementOrSavingsPlan);
  for (i=1; tag = find_xml_local(x[2], 'CompanyVehicle', i); ++i) {
    h =  hash [];
    parse_hrxml_CompanyVehicle(h, tag);
    push data{'CompanyVehicle'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RelocationAssistance', i); ++i) {
    h =  hash [];
    parse_hrxml_RelocationAssistance(h, tag);
    push data{'RelocationAssistance'}, h;
  }
  POPTAG_RAW(x[2],  'VisaSponsorship', data.VisaSponsorship);
  for (i=1; tag = find_xml_local(x[2], 'TimeOffAllowance', i); ++i) {
    h =  hash [];
    parse_hrxml_TimeOffAllowance(h, tag);
    push data{'TimeOffAllowance'}, h;
  }
  tag = find_xml_local(x[2], 'ExpatriateBenefits', 1);
  h =  hash [];
  parse_hrxml_ExpatriateBenefits(h, aux1);
  data{'ExpatriateBenefits'} = h;
  for (i=1; tag = find_xml_local(x[2], 'OtherBenefits', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherBenefits(h, tag);
    push data{'OtherBenefits'}, h;
  }
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Benefits(data) {
  attr = [];
  body = [];

  for d(data{'Insurance'}) push body,build_hrxml_Insurance(d);
  PUSHTAG_RAW(body, 'RetirementOrSavingsPlan', data.RetirementOrSavingsPlan);
  for d(data{'CompanyVehicle'}) push body,build_hrxml_CompanyVehicle(d);
  for d(data{'RelocationAssistance'}) push body,build_hrxml_RelocationAssistance(d);
  PUSHTAG_RAW(body, 'VisaSponsorship', data.VisaSponsorship);
  for d(data{'TimeOffAllowance'}) push body,build_hrxml_TimeOffAllowance(d);
  push body, build_hrxml_ExpatriateBenefits(data{'ExpatriateBenefits'});
  for d(data{'OtherBenefits'}) push body,build_hrxml_OtherBenefits(d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Benefits', attr, body);
}




function parse_hrxml_BiologicalDescriptors(data, x) {

  POPTAG_RAW(x[2],  'DateOfBirth', data.DateOfBirth);
  POPTAG_RAW(x[2],  'MonthDayOfBirth', data.MonthDayOfBirth);
  POPTAG_RAW(x[2],  'Age', data.Age);
  POPTAG_RAW(x[2],  'GenderCode', data.GenderCode);
  POPTAG_RAW(x[2],  'EyeColor', data.EyeColor);
  POPTAG_RAW(x[2],  'HairColor', data.HairColor);
  tag = find_xml_local(x[2], 'Height', 1);
  h =  hash [];
  parse_hrxml_Height(h, aux1);
  data{'Height'} = h;
  tag = find_xml_local(x[2], 'Weight', 1);
  h =  hash [];
  parse_hrxml_Weight(h, aux1);
  data{'Weight'} = h;
  for (i=1; tag = find_xml_local(x[2], 'IdentifyingMarks', i); ++i)
    push data{'IdentifyingMarks'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'DisabilityInfo', i); ++i) {
    h =  hash [];
    parse_hrxml_DisabilityInfo(h, tag);
    push data{'DisabilityInfo'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_BiologicalDescriptors(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'DateOfBirth', data.DateOfBirth);
  PUSHTAG_RAW(body, 'MonthDayOfBirth', data.MonthDayOfBirth);
  PUSHTAG_RAW(body, 'Age', data.Age);
  PUSHTAG_RAW(body, 'GenderCode', data.GenderCode);
  PUSHTAG_RAW(body, 'EyeColor', data.EyeColor);
  PUSHTAG_RAW(body, 'HairColor', data.HairColor);
  push body, build_hrxml_Height(data{'Height'});
  push body, build_hrxml_Weight(data{'Weight'});
  for d(data{'IdentifyingMarks'})PUSHTAG_RAW(body,'IdentifyingMarks',d);
  for d(data{'DisabilityInfo'}) push body,build_hrxml_DisabilityInfo(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:BiologicalDescriptors', attr, body);
}




function parse_hrxml_Book(data, x) {

  POPTAG_RAW(x[2],  'Title', data.Title);
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];
  tag = find_xml_local(x[2], 'PublicationDate', 1);
  h =  hash [];
  parse_hrxml_PublicationDate(h, aux1);
  data{'PublicationDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Link', i); ++i)
    push data{'Link'}, tag[2];
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  tag = find_xml_local(x[2], 'Copyright', 1);
  h =  hash [];
  parse_hrxml_Copyright(h, aux1);
  data{'Copyright'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'Edition', data.Edition);
  POPTAG_RAW(x[2],  'Chapter', data.Chapter);
  POPTAG_RAW(x[2],  'ISSN', data.ISSN);
  POPTAG_RAW(x[2],  'ISBN', data.ISBN);
  POPTAG_RAW(x[2],  'NumberOfPages', data.NumberOfPages);
  POPTAG_RAW(x[2],  'PublisherName', data.PublisherName);
  POPTAG_RAW(x[2],  'PublisherLocation', data.PublisherLocation);

}

function build_hrxml_Book(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Title', data.Title);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);
  push body, build_hrxml_PublicationDate(data{'PublicationDate'});
  for d(data{'Link'})PUSHTAG_RAW(body,'Link',d);
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  push body, build_hrxml_Copyright(data{'Copyright'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'Edition', data.Edition);
  PUSHTAG_RAW(body, 'Chapter', data.Chapter);
  PUSHTAG_RAW(body, 'ISSN', data.ISSN);
  PUSHTAG_RAW(body, 'ISBN', data.ISBN);
  PUSHTAG_RAW(body, 'NumberOfPages', data.NumberOfPages);
  PUSHTAG_RAW(body, 'PublisherName', data.PublisherName);
  PUSHTAG_RAW(body, 'PublisherLocation', data.PublisherLocation);

  return TAG('hrxml:Book', attr, body);
}




function parse_hrxml_Candidate(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);

  tag = find_xml_local(x[2], 'CandidateRecordInfo', 1);
  h =  hash [];
  parse_hrxml_CandidateRecordInfo(h, aux1);
  data{'CandidateRecordInfo'} = h;
  tag = find_xml_local(x[2], 'RelatedPositionPostings', 1);
  h =  hash [];
  parse_hrxml_RelatedPositionPostings(h, aux1);
  data{'RelatedPositionPostings'} = h;
  for (i=1; tag = find_xml_local(x[2], 'CandidateSupplier', i); ++i) {
    h =  hash [];
    parse_hrxml_CandidateSupplier(h, tag);
    push data{'CandidateSupplier'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DistributionGuidelines', i); ++i)
    push data{'DistributionGuidelines'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'CandidateProfile', i); ++i) {
    h =  hash [];
    parse_hrxml_CandidateProfile(h, tag);
    push data{'CandidateProfile'}, h;
  }
  tag = find_xml_local(x[2], 'Resume', 1);
  h =  hash [];
  parse_hrxml_Resume(h, aux1);
  data{'Resume'} = h;
  for (i=1; tag = find_xml_local(x[2], 'UserArea', i); ++i) {
    h =  hash [];
    parse_hrxml_UserArea(h, tag);
    push data{'UserArea'}, h;
  }

}

function build_hrxml_Candidate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);

  push body, build_hrxml_CandidateRecordInfo(data{'CandidateRecordInfo'});
  push body, build_hrxml_RelatedPositionPostings(data{'RelatedPositionPostings'});
  for d(data{'CandidateSupplier'}) push body,build_hrxml_CandidateSupplier(d);
  for d(data{'DistributionGuidelines'})PUSHTAG_RAW(body,'DistributionGuidelines',d);
  for d(data{'CandidateProfile'}) push body,build_hrxml_CandidateProfile(d);
  push body, build_hrxml_Resume(data{'Resume'});
  for d(data{'UserArea'}) push body,build_hrxml_UserArea(d);

  return TAG('hrxml:Candidate', attr, body);
}




function parse_hrxml_CandidateProfile(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);

  tag = find_xml_local(x[2], 'ProfileId', 1);
  h =  hash [];
  parse_hrxml_ProfileId(h, aux1);
  data{'ProfileId'} = h;
  POPTAG_RAW(x[2],  'ProfileName', data.ProfileName);
  for (i=1; tag = find_xml_local(x[2], 'AvailabilityInfo', i); ++i) {
    h =  hash [];
    parse_hrxml_AvailabilityInfo(h, tag);
    push data{'AvailabilityInfo'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DistributionGuidelines', i); ++i)
    push data{'DistributionGuidelines'}, tag[2];
  tag = find_xml_local(x[2], 'PersonalData', 1);
  h =  hash [];
  parse_hrxml_PersonalData(h, aux1);
  data{'PersonalData'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PreferredPosition', i); ++i) {
    h =  hash [];
    parse_hrxml_PreferredPosition(h, tag);
    push data{'PreferredPosition'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EmploymentHistory', i); ++i) {
    h =  hash [];
    parse_hrxml_EmploymentHistory(h, tag);
    push data{'EmploymentHistory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EducationHistory', i); ++i) {
    h =  hash [];
    parse_hrxml_EducationHistory(h, tag);
    push data{'EducationHistory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'MilitaryHistory', i); ++i) {
    h =  hash [];
    parse_hrxml_MilitaryHistory(h, tag);
    push data{'MilitaryHistory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Associations', i); ++i) {
    h =  hash [];
    parse_hrxml_Associations(h, tag);
    push data{'Associations'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SupportingMaterials', i); ++i) {
    h =  hash [];
    parse_hrxml_SupportingMaterials(h, tag);
    push data{'SupportingMaterials'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'UserArea', i); ++i) {
    h =  hash [];
    parse_hrxml_UserArea(h, tag);
    push data{'UserArea'}, h;
  }

}

function build_hrxml_CandidateProfile(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);

  push body, build_hrxml_ProfileId(data{'ProfileId'});
  PUSHTAG_RAW(body, 'ProfileName', data.ProfileName);
  for d(data{'AvailabilityInfo'}) push body,build_hrxml_AvailabilityInfo(d);
  for d(data{'DistributionGuidelines'})PUSHTAG_RAW(body,'DistributionGuidelines',d);
  push body, build_hrxml_PersonalData(data{'PersonalData'});
  for d(data{'PreferredPosition'}) push body,build_hrxml_PreferredPosition(d);
  for d(data{'EmploymentHistory'}) push body,build_hrxml_EmploymentHistory(d);
  for d(data{'EducationHistory'}) push body,build_hrxml_EducationHistory(d);
  for d(data{'MilitaryHistory'}) push body,build_hrxml_MilitaryHistory(d);
  for d(data{'Associations'}) push body,build_hrxml_Associations(d);
  for d(data{'SupportingMaterials'}) push body,build_hrxml_SupportingMaterials(d);
  for d(data{'UserArea'}) push body,build_hrxml_UserArea(d);

  return TAG('hrxml:CandidateProfile', attr, body);
}




function parse_hrxml_CandidateRecordInfo(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Id', i); ++i) {
    h =  hash [];
    parse_hrxml_Id(h, tag);
    push data{'Id'}, h;
  }
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_hrxml_Status(h, aux1);
  data{'Status'} = h;

}

function build_hrxml_CandidateRecordInfo(data) {
  attr = [];
  body = [];

  for d(data{'Id'}) push body,build_hrxml_Id(d);
  push body, build_hrxml_Status(data{'Status'});

  return TAG('hrxml:CandidateRecordInfo', attr, body);
}




function parse_hrxml_CandidateSupplier(data, x) {
  POPATTR(x[1], 'relationship', data.relationship);

  tag = find_xml_local(x[2], 'SupplierId', 1);
  h =  hash [];
  parse_hrxml_SupplierId(h, aux1);
  data{'SupplierId'} = h;
  POPTAG_RAW(x[2],  'EntityName', data.EntityName);
  tag = find_xml_local(x[2], 'ContactName', 1);
  h =  hash [];
  parse_hrxml_ContactName(h, aux1);
  data{'ContactName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }
  tag = find_xml_local(x[2], 'SourceType', 1);
  h =  hash [];
  parse_hrxml_SourceType(h, aux1);
  data{'SourceType'} = h;

}

function build_hrxml_CandidateSupplier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'relationship', data.relationship);

  push body, build_hrxml_SupplierId(data{'SupplierId'});
  PUSHTAG_RAW(body, 'EntityName', data.EntityName);
  push body, build_hrxml_ContactName(data{'ContactName'});
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);
  push body, build_hrxml_SourceType(data{'SourceType'});

  return TAG('hrxml:CandidateSupplier', attr, body);
}




function parse_hrxml_ChildrenInfo(data, x) {

  POPTAG_RAW(x[2],  'NumberOfChildren', data.NumberOfChildren);
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_ChildrenInfo(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'NumberOfChildren', data.NumberOfChildren);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:ChildrenInfo', attr, body);
}




function parse_hrxml_ClassRank(data, x) {
  POPATTR(x[1], 'numberOfStudents', data.numberOfStudents);


}

function build_hrxml_ClassRank(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'numberOfStudents', data.numberOfStudents);


  return TAG('hrxml:ClassRank', attr, body);
}




function parse_hrxml_Commute(data, x) {

  tag = find_xml_local(x[2], 'TimeMax', 1);
  h =  hash [];
  parse_hrxml_TimeMax(h, aux1);
  data{'TimeMax'} = h;
  tag = find_xml_local(x[2], 'DistanceMax', 1);
  h =  hash [];
  parse_hrxml_DistanceMax(h, aux1);
  data{'DistanceMax'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Commute(data) {
  attr = [];
  body = [];

  push body, build_hrxml_TimeMax(data{'TimeMax'});
  push body, build_hrxml_DistanceMax(data{'DistanceMax'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Commute', attr, body);
}




function parse_hrxml_Company(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Name', data.Name);

}

function build_hrxml_Company(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Name', data.Name);

  return TAG('hrxml:Company', attr, body);
}




function parse_hrxml_CompanyVehicle(data, x) {
  POPATTR(x[1], 'companyOffered', data.companyOffered);

  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_CompanyVehicle(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'companyOffered', data.companyOffered);

  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:CompanyVehicle', attr, body);
}




function parse_hrxml_Compensation(data, x) {

  tag = find_xml_local(x[2], 'StartingCompensation', 1);
  h =  hash [];
  parse_hrxml_StartingCompensation(h, aux1);
  data{'StartingCompensation'} = h;
  tag = find_xml_local(x[2], 'EndingCompensation', 1);
  h =  hash [];
  parse_hrxml_EndingCompensation(h, aux1);
  data{'EndingCompensation'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  for (i=1; tag = find_xml_local(x[2], 'OtherCompensation', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherCompensation(h, tag);
    push data{'OtherCompensation'}, h;
  }

}

function build_hrxml_Compensation(data) {
  attr = [];
  body = [];

  push body, build_hrxml_StartingCompensation(data{'StartingCompensation'});
  push body, build_hrxml_EndingCompensation(data{'EndingCompensation'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  for d(data{'OtherCompensation'}) push body,build_hrxml_OtherCompensation(d);

  return TAG('hrxml:Compensation', attr, body);
}




function parse_hrxml_Competency(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'name', data.name);
  POPATTR(x[1], 'required', data.required);

  tag = find_xml_local(x[2], 'CompetencyId', 1);
  h =  hash [];
  parse_hrxml_CompetencyId(h, aux1);
  data{'CompetencyId'} = h;
  for (i=1; tag = find_xml_local(x[2], 'TaxonomyId', i); ++i) {
    h =  hash [];
    parse_hrxml_TaxonomyId(h, tag);
    push data{'TaxonomyId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CompetencyEvidence', i); ++i) {
    h =  hash [];
    parse_hrxml_CompetencyEvidence(h, tag);
    push data{'CompetencyEvidence'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CompetencyWeight', i); ++i) {
    h =  hash [];
    parse_hrxml_CompetencyWeight(h, tag);
    push data{'CompetencyWeight'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Competency', i); ++i) {
    h =  hash [];
    parse_hrxml_Competency(h, tag);
    push data{'Competency'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_Competency(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'name', data.name);
  PUSHATTR(attr, 'required', data.required);

  push body, build_hrxml_CompetencyId(data{'CompetencyId'});
  for d(data{'TaxonomyId'}) push body,build_hrxml_TaxonomyId(d);
  for d(data{'CompetencyEvidence'}) push body,build_hrxml_CompetencyEvidence(d);
  for d(data{'CompetencyWeight'}) push body,build_hrxml_CompetencyWeight(d);
  for d(data{'Competency'}) push body,build_hrxml_Competency(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:Competency', attr, body);
}




function parse_hrxml_CompetencyEvidence(data, x) {
  POPATTR(x[1], 'dateOfIncident', data.dateOfIncident);
  POPATTR(x[1], 'expirationDate', data.expirationDate);
  POPATTR(x[1], 'lastUsed', data.lastUsed);
  POPATTR(x[1], 'name', data.name);
  POPATTR(x[1], 'required', data.required);
  POPATTR(x[1], 'typeDescription', data.typeDescription);
  POPATTR(x[1], 'typeId', data.typeId);

  tag = find_xml_local(x[2], 'EvidenceId', 1);
  h =  hash [];
  parse_hrxml_EvidenceId(h, aux1);
  data{'EvidenceId'} = h;
  tag = find_xml_local(x[2], 'NumericValue', 1);
  h =  hash [];
  parse_hrxml_NumericValue(h, aux1);
  data{'NumericValue'} = h;
  tag = find_xml_local(x[2], 'StringValue', 1);
  h =  hash [];
  parse_hrxml_StringValue(h, aux1);
  data{'StringValue'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SupportingInformation', i); ++i)
    push data{'SupportingInformation'}, tag[2];

}

function build_hrxml_CompetencyEvidence(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateOfIncident', data.dateOfIncident);
  PUSHATTR(attr, 'expirationDate', data.expirationDate);
  PUSHATTR(attr, 'lastUsed', data.lastUsed);
  PUSHATTR(attr, 'name', data.name);
  PUSHATTR(attr, 'required', data.required);
  PUSHATTR(attr, 'typeDescription', data.typeDescription);
  PUSHATTR(attr, 'typeId', data.typeId);

  push body, build_hrxml_EvidenceId(data{'EvidenceId'});
  push body, build_hrxml_NumericValue(data{'NumericValue'});
  push body, build_hrxml_StringValue(data{'StringValue'});
  for d(data{'SupportingInformation'})PUSHTAG_RAW(body,'SupportingInformation',d);

  return TAG('hrxml:CompetencyEvidence', attr, body);
}




function parse_hrxml_CompetencyId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_CompetencyId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:CompetencyId', attr, body);
}




function parse_hrxml_CompetencyWeight(data, x) {
  POPATTR(x[1], 'type', data.type);

  tag = find_xml_local(x[2], 'NumericValue', 1);
  h =  hash [];
  parse_hrxml_NumericValue(h, aux1);
  data{'NumericValue'} = h;
  tag = find_xml_local(x[2], 'StringValue', 1);
  h =  hash [];
  parse_hrxml_StringValue(h, aux1);
  data{'StringValue'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SupportingInformation', i); ++i)
    push data{'SupportingInformation'}, tag[2];

}

function build_hrxml_CompetencyWeight(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  push body, build_hrxml_NumericValue(data{'NumericValue'});
  push body, build_hrxml_StringValue(data{'StringValue'});
  for d(data{'SupportingInformation'})PUSHTAG_RAW(body,'SupportingInformation',d);

  return TAG('hrxml:CompetencyWeight', attr, body);
}




function parse_hrxml_ConferenceDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_ConferenceDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:ConferenceDate', attr, body);
}




function parse_hrxml_ConferencePaper(data, x) {

  POPTAG_RAW(x[2],  'Title', data.Title);
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];
  tag = find_xml_local(x[2], 'PublicationDate', 1);
  h =  hash [];
  parse_hrxml_PublicationDate(h, aux1);
  data{'PublicationDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Link', i); ++i)
    push data{'Link'}, tag[2];
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  tag = find_xml_local(x[2], 'Copyright', 1);
  h =  hash [];
  parse_hrxml_Copyright(h, aux1);
  data{'Copyright'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'EventName', data.EventName);
  tag = find_xml_local(x[2], 'ConferenceDate', 1);
  h =  hash [];
  parse_hrxml_ConferenceDate(h, aux1);
  data{'ConferenceDate'} = h;
  POPTAG_RAW(x[2],  'ConferenceLocation', data.ConferenceLocation);

}

function build_hrxml_ConferencePaper(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Title', data.Title);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);
  push body, build_hrxml_PublicationDate(data{'PublicationDate'});
  for d(data{'Link'})PUSHTAG_RAW(body,'Link',d);
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  push body, build_hrxml_Copyright(data{'Copyright'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'EventName', data.EventName);
  push body, build_hrxml_ConferenceDate(data{'ConferenceDate'});
  PUSHTAG_RAW(body, 'ConferenceLocation', data.ConferenceLocation);

  return TAG('hrxml:ConferencePaper', attr, body);
}




function parse_hrxml_Considerations(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);

  for (i=1; tag = find_xml_local(x[2], 'General', i); ++i)
    push data{'General'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Physical', i); ++i)
    push data{'Physical'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SafetyEquipment', i); ++i) {
    h =  hash [];
    parse_hrxml_SafetyEquipment(h, tag);
    push data{'SafetyEquipment'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DressCode', i); ++i) {
    h =  hash [];
    parse_hrxml_DressCode(h, tag);
    push data{'DressCode'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_Considerations(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);

  for d(data{'General'})PUSHTAG_RAW(body,'General',d);
  for d(data{'Physical'})PUSHTAG_RAW(body,'Physical',d);
  for d(data{'SafetyEquipment'}) push body,build_hrxml_SafetyEquipment(d);
  for d(data{'DressCode'}) push body,build_hrxml_DressCode(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:Considerations', attr, body);
}




function parse_hrxml_ContactId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_ContactId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:ContactId', attr, body);
}




function parse_hrxml_ContactInfo(data, x) {

  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }

}

function build_hrxml_ContactInfo(data) {
  attr = [];
  body = [];

  push body, build_hrxml_PersonName(data{'PersonName'});
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);

  return TAG('hrxml:ContactInfo', attr, body);
}




function parse_hrxml_ContactMethod(data, x) {

  POPTAG_RAW(x[2],  'Use', data.Use);
  POPTAG_RAW(x[2],  'Location', data.Location);
  POPTAG_RAW(x[2],  'WhenAvailable', data.WhenAvailable);
  tag = find_xml_local(x[2], 'Telephone', 1);
  h =  hash [];
  parse_hrxml_Telephone(h, aux1);
  data{'Telephone'} = h;
  tag = find_xml_local(x[2], 'Mobile', 1);
  h =  hash [];
  parse_hrxml_Mobile(h, aux1);
  data{'Mobile'} = h;
  tag = find_xml_local(x[2], 'Fax', 1);
  h =  hash [];
  parse_hrxml_Fax(h, aux1);
  data{'Fax'} = h;
  tag = find_xml_local(x[2], 'Pager', 1);
  h =  hash [];
  parse_hrxml_Pager(h, aux1);
  data{'Pager'} = h;
  tag = find_xml_local(x[2], 'TTYTDD', 1);
  h =  hash [];
  parse_hrxml_TTYTDD(h, aux1);
  data{'TTYTDD'} = h;
  POPTAG_RAW(x[2],  'InternetEmailAddress', data.InternetEmailAddress);
  POPTAG_RAW(x[2],  'InternetWebAddress', data.InternetWebAddress);
  tag = find_xml_local(x[2], 'PostalAddress', 1);
  h =  hash [];
  parse_hrxml_PostalAddress(h, aux1);
  data{'PostalAddress'} = h;

}

function build_hrxml_ContactMethod(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Use', data.Use);
  PUSHTAG_RAW(body, 'Location', data.Location);
  PUSHTAG_RAW(body, 'WhenAvailable', data.WhenAvailable);
  push body, build_hrxml_Telephone(data{'Telephone'});
  push body, build_hrxml_Mobile(data{'Mobile'});
  push body, build_hrxml_Fax(data{'Fax'});
  push body, build_hrxml_Pager(data{'Pager'});
  push body, build_hrxml_TTYTDD(data{'TTYTDD'});
  PUSHTAG_RAW(body, 'InternetEmailAddress', data.InternetEmailAddress);
  PUSHTAG_RAW(body, 'InternetWebAddress', data.InternetWebAddress);
  push body, build_hrxml_PostalAddress(data{'PostalAddress'});

  return TAG('hrxml:ContactMethod', attr, body);
}




function parse_hrxml_ContactName(data, x) {
  POPATTR(x[1], 'script', data.script);

  POPTAG_RAW(x[2],  'FormattedName', data.FormattedName);
  for (i=1; tag = find_xml_local(x[2], 'LegalName', i); ++i)
    push data{'LegalName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'GivenName', i); ++i)
    push data{'GivenName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PreferredGivenName', i); ++i)
    push data{'PreferredGivenName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'MiddleName', i); ++i)
    push data{'MiddleName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'FamilyName', i); ++i) {
    h =  hash [];
    parse_hrxml_FamilyName(h, tag);
    push data{'FamilyName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Affix', i); ++i) {
    h =  hash [];
    parse_hrxml_Affix(h, tag);
    push data{'Affix'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AlternateScript', i); ++i) {
    h =  hash [];
    parse_hrxml_AlternateScript(h, tag);
    push data{'AlternateScript'}, h;
  }

}

function build_hrxml_ContactName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'script', data.script);

  PUSHTAG_RAW(body, 'FormattedName', data.FormattedName);
  for d(data{'LegalName'})PUSHTAG_RAW(body,'LegalName',d);
  for d(data{'GivenName'})PUSHTAG_RAW(body,'GivenName',d);
  for d(data{'PreferredGivenName'})PUSHTAG_RAW(body,'PreferredGivenName',d);
  for d(data{'MiddleName'})PUSHTAG_RAW(body,'MiddleName',d);
  for d(data{'FamilyName'}) push body,build_hrxml_FamilyName(d);
  for d(data{'Affix'}) push body,build_hrxml_Affix(d);
  for d(data{'AlternateScript'}) push body,build_hrxml_AlternateScript(d);

  return TAG('hrxml:ContactName', attr, body);
}




function parse_hrxml_Copyright(data, x) {

  tag = find_xml_local(x[2], 'CopyrightDates', 1);
  h =  hash [];
  parse_hrxml_CopyrightDates(h, aux1);
  data{'CopyrightDates'} = h;
  POPTAG_RAW(x[2],  'CopyrightText', data.CopyrightText);

}

function build_hrxml_Copyright(data) {
  attr = [];
  body = [];

  push body, build_hrxml_CopyrightDates(data{'CopyrightDates'});
  PUSHTAG_RAW(body, 'CopyrightText', data.CopyrightText);

  return TAG('hrxml:Copyright', attr, body);
}




function parse_hrxml_CopyrightDates(data, x) {

  tag = find_xml_local(x[2], 'OriginalDate', 1);
  h =  hash [];
  parse_hrxml_OriginalDate(h, aux1);
  data{'OriginalDate'} = h;
  tag = find_xml_local(x[2], 'MostRecentDate', 1);
  h =  hash [];
  parse_hrxml_MostRecentDate(h, aux1);
  data{'MostRecentDate'} = h;

}

function build_hrxml_CopyrightDates(data) {
  attr = [];
  body = [];

  push body, build_hrxml_OriginalDate(data{'OriginalDate'});
  push body, build_hrxml_MostRecentDate(data{'MostRecentDate'});

  return TAG('hrxml:CopyrightDates', attr, body);
}




function parse_hrxml_DatesOfAttendance(data, x) {
  POPATTR(x[1], 'currentlyEnrolled', data.currentlyEnrolled);
  POPATTR(x[1], 'enrollmentStatus', data.enrollmentStatus);
  POPATTR(x[1], 'studentInGoodStanding', data.studentInGoodStanding);

  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;

}

function build_hrxml_DatesOfAttendance(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'currentlyEnrolled', data.currentlyEnrolled);
  PUSHATTR(attr, 'enrollmentStatus', data.enrollmentStatus);
  PUSHATTR(attr, 'studentInGoodStanding', data.studentInGoodStanding);

  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});

  return TAG('hrxml:DatesOfAttendance', attr, body);
}




function parse_hrxml_DatesOfService(data, x) {

  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;

}

function build_hrxml_DatesOfService(data) {
  attr = [];
  body = [];

  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});

  return TAG('hrxml:DatesOfService', attr, body);
}




function parse_hrxml_Degree(data, x) {
  POPATTR(x[1], 'degreeType', data.degreeType);
  POPATTR(x[1], 'examPassed', data.examPassed);
  POPATTR(x[1], 'graduatingDegree', data.graduatingDegree);

  tag = find_xml_local(x[2], 'DegreeName', 1);
  h =  hash [];
  parse_hrxml_DegreeName(h, aux1);
  data{'DegreeName'} = h;
  tag = find_xml_local(x[2], 'DegreeDate', 1);
  h =  hash [];
  parse_hrxml_DegreeDate(h, aux1);
  data{'DegreeDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'OtherHonors', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherHonors(h, tag);
    push data{'OtherHonors'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DegreeMajor', i); ++i) {
    h =  hash [];
    parse_hrxml_DegreeMajor(h, tag);
    push data{'DegreeMajor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DegreeMinor', i); ++i) {
    h =  hash [];
    parse_hrxml_DegreeMinor(h, tag);
    push data{'DegreeMinor'}, h;
  }
  tag = find_xml_local(x[2], 'DegreeMeasure', 1);
  h =  hash [];
  parse_hrxml_DegreeMeasure(h, aux1);
  data{'DegreeMeasure'} = h;
  for (i=1; tag = find_xml_local(x[2], 'DatesOfAttendance', i); ++i) {
    h =  hash [];
    parse_hrxml_DatesOfAttendance(h, tag);
    push data{'DatesOfAttendance'}, h;
  }
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  for (i=1; tag = find_xml_local(x[2], 'DegreeClassification', i); ++i) {
    h =  hash [];
    parse_hrxml_DegreeClassification(h, tag);
    push data{'DegreeClassification'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_Degree(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'degreeType', data.degreeType);
  PUSHATTR(attr, 'examPassed', data.examPassed);
  PUSHATTR(attr, 'graduatingDegree', data.graduatingDegree);

  push body, build_hrxml_DegreeName(data{'DegreeName'});
  push body, build_hrxml_DegreeDate(data{'DegreeDate'});
  for d(data{'OtherHonors'}) push body,build_hrxml_OtherHonors(d);
  for d(data{'DegreeMajor'}) push body,build_hrxml_DegreeMajor(d);
  for d(data{'DegreeMinor'}) push body,build_hrxml_DegreeMinor(d);
  push body, build_hrxml_DegreeMeasure(data{'DegreeMeasure'});
  for d(data{'DatesOfAttendance'}) push body,build_hrxml_DatesOfAttendance(d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  for d(data{'DegreeClassification'}) push body,build_hrxml_DegreeClassification(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:Degree', attr, body);
}




function parse_hrxml_DegreeClassification(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_DegreeClassification(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:DegreeClassification', attr, body);
}




function parse_hrxml_DegreeDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_DegreeDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:DegreeDate', attr, body);
}




function parse_hrxml_DegreeMajor(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ProgramId', i); ++i) {
    h =  hash [];
    parse_hrxml_ProgramId(h, tag);
    push data{'ProgramId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DegreeConcentration', i); ++i)
    push data{'DegreeConcentration'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Option', i); ++i)
    push data{'Option'}, tag[2];

}

function build_hrxml_DegreeMajor(data) {
  attr = [];
  body = [];

  for d(data{'ProgramId'}) push body,build_hrxml_ProgramId(d);
  for d(data{'DegreeConcentration'})PUSHTAG_RAW(body,'DegreeConcentration',d);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);
  for d(data{'Option'})PUSHTAG_RAW(body,'Option',d);

  return TAG('hrxml:DegreeMajor', attr, body);
}




function parse_hrxml_DegreeMeasure(data, x) {
  POPATTR(x[1], 'measureType', data.measureType);

  tag = find_xml_local(x[2], 'EducationalMeasure', 1);
  h =  hash [];
  parse_hrxml_EducationalMeasure(h, aux1);
  data{'EducationalMeasure'} = h;
  POPTAG_RAW(x[2],  'AcademicCreditCode', data.AcademicCreditCode);
  POPTAG_RAW(x[2],  'CourseLevelCode', data.CourseLevelCode);
  POPTAG_RAW(x[2],  'CumulativeSummaryIndicator', data.CumulativeSummaryIndicator);
  POPTAG_RAW(x[2],  'AcademicCreditHoursIncluded', data.AcademicCreditHoursIncluded);
  POPTAG_RAW(x[2],  'AcademicCreditHoursAttempted', data.AcademicCreditHoursAttempted);
  POPTAG_RAW(x[2],  'AcademicCreditHoursEarned', data.AcademicCreditHoursEarned);
  tag = find_xml_local(x[2], 'ClassRank', 1);
  h =  hash [];
  parse_hrxml_ClassRank(h, aux1);
  data{'ClassRank'} = h;

}

function build_hrxml_DegreeMeasure(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'measureType', data.measureType);

  push body, build_hrxml_EducationalMeasure(data{'EducationalMeasure'});
  PUSHTAG_RAW(body, 'AcademicCreditCode', data.AcademicCreditCode);
  PUSHTAG_RAW(body, 'CourseLevelCode', data.CourseLevelCode);
  PUSHTAG_RAW(body, 'CumulativeSummaryIndicator', data.CumulativeSummaryIndicator);
  PUSHTAG_RAW(body, 'AcademicCreditHoursIncluded', data.AcademicCreditHoursIncluded);
  PUSHTAG_RAW(body, 'AcademicCreditHoursAttempted', data.AcademicCreditHoursAttempted);
  PUSHTAG_RAW(body, 'AcademicCreditHoursEarned', data.AcademicCreditHoursEarned);
  push body, build_hrxml_ClassRank(data{'ClassRank'});

  return TAG('hrxml:DegreeMeasure', attr, body);
}




function parse_hrxml_DegreeMinor(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ProgramId', i); ++i) {
    h =  hash [];
    parse_hrxml_ProgramId(h, tag);
    push data{'ProgramId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];

}

function build_hrxml_DegreeMinor(data) {
  attr = [];
  body = [];

  for d(data{'ProgramId'}) push body,build_hrxml_ProgramId(d);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);

  return TAG('hrxml:DegreeMinor', attr, body);
}




function parse_hrxml_DegreeName(data, x) {
  POPATTR(x[1], 'academicHonors', data.academicHonors);
  POPATTR(x[1], 'honorsProgram', data.honorsProgram);


}

function build_hrxml_DegreeName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'academicHonors', data.academicHonors);
  PUSHATTR(attr, 'honorsProgram', data.honorsProgram);


  return TAG('hrxml:DegreeName', attr, body);
}




function parse_hrxml_DeliveryAddress(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AddressLine', i); ++i)
    push data{'AddressLine'}, tag[2];
  POPTAG_RAW(x[2],  'StreetName', data.StreetName);
  POPTAG_RAW(x[2],  'BuildingNumber', data.BuildingNumber);
  POPTAG_RAW(x[2],  'Unit', data.Unit);
  POPTAG_RAW(x[2],  'PostOfficeBox', data.PostOfficeBox);

}

function build_hrxml_DeliveryAddress(data) {
  attr = [];
  body = [];

  for d(data{'AddressLine'})PUSHTAG_RAW(body,'AddressLine',d);
  PUSHTAG_RAW(body, 'StreetName', data.StreetName);
  PUSHTAG_RAW(body, 'BuildingNumber', data.BuildingNumber);
  PUSHTAG_RAW(body, 'Unit', data.Unit);
  PUSHTAG_RAW(body, 'PostOfficeBox', data.PostOfficeBox);

  return TAG('hrxml:DeliveryAddress', attr, body);
}




function parse_hrxml_DemographicDescriptors(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Race', i); ++i)
    push data{'Race'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Ethnicity', i); ++i)
    push data{'Ethnicity'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Nationality', i); ++i)
    push data{'Nationality'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PrimaryLanguage', i); ++i) {
    h =  hash [];
    parse_hrxml_PrimaryLanguage(h, tag);
    push data{'PrimaryLanguage'}, h;
  }
  POPTAG_RAW(x[2],  'BirthPlace', data.BirthPlace);
  POPTAG_RAW(x[2],  'Religion', data.Religion);
  POPTAG_RAW(x[2],  'MaritalStatus', data.MaritalStatus);
  tag = find_xml_local(x[2], 'ChildrenInfo', 1);
  h =  hash [];
  parse_hrxml_ChildrenInfo(h, aux1);
  data{'ChildrenInfo'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_DemographicDescriptors(data) {
  attr = [];
  body = [];

  for d(data{'Race'})PUSHTAG_RAW(body,'Race',d);
  for d(data{'Ethnicity'})PUSHTAG_RAW(body,'Ethnicity',d);
  for d(data{'Nationality'})PUSHTAG_RAW(body,'Nationality',d);
  for d(data{'PrimaryLanguage'}) push body,build_hrxml_PrimaryLanguage(d);
  PUSHTAG_RAW(body, 'BirthPlace', data.BirthPlace);
  PUSHTAG_RAW(body, 'Religion', data.Religion);
  PUSHTAG_RAW(body, 'MaritalStatus', data.MaritalStatus);
  push body, build_hrxml_ChildrenInfo(data{'ChildrenInfo'});
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:DemographicDescriptors', attr, body);
}




function parse_hrxml_Description(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_hrxml_Description(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('hrxml:Description', attr, body);
}




function parse_hrxml_Details(data, x) {
  POPATTR(x[1], 'type', data.type);
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_hrxml_Details(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('hrxml:Details', attr, body);
}




function parse_hrxml_DisabilityInfo(data, x) {

  POPTAG_RAW(x[2],  'LevelOfDisability', data.LevelOfDisability);
  POPTAG_RAW(x[2],  'Percentage', data.Percentage);
  POPTAG_RAW(x[2],  'Type', data.Type);
  POPTAG_RAW(x[2],  'AccommodationsNeeded', data.AccommodationsNeeded);

}

function build_hrxml_DisabilityInfo(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'LevelOfDisability', data.LevelOfDisability);
  PUSHTAG_RAW(body, 'Percentage', data.Percentage);
  PUSHTAG_RAW(body, 'Type', data.Type);
  PUSHTAG_RAW(body, 'AccommodationsNeeded', data.AccommodationsNeeded);

  return TAG('hrxml:DisabilityInfo', attr, body);
}




function parse_hrxml_DistanceMax(data, x) {
  POPATTR(x[1], 'unitOfMeasure', data.unitOfMeasure);


}

function build_hrxml_DistanceMax(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'unitOfMeasure', data.unitOfMeasure);


  return TAG('hrxml:DistanceMax', attr, body);
}




function parse_hrxml_DistributeTo(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }

}

function build_hrxml_DistributeTo(data) {
  attr = [];
  body = [];

  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);

  return TAG('hrxml:DistributeTo', attr, body);
}




function parse_hrxml_DoingBusinessAs(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_hrxml_DoingBusinessAs(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('hrxml:DoingBusinessAs', attr, body);
}




function parse_hrxml_DressCode(data, x) {
  POPATTR(x[1], 'suppliedByOrganization', data.suppliedByOrganization);


}

function build_hrxml_DressCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'suppliedByOrganization', data.suppliedByOrganization);


  return TAG('hrxml:DressCode', attr, body);
}




function parse_hrxml_DunsNumber(data, x) {
  POPATTR(x[1], 'dunsNumberType', data.dunsNumberType);


}

function build_hrxml_DunsNumber(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dunsNumberType', data.dunsNumberType);


  return TAG('hrxml:DunsNumber', attr, body);
}




function parse_hrxml_EEOCJobCategory(data, x) {

  POPTAG_RAW(x[2],  'StandardValue', data.StandardValue);
  POPTAG_RAW(x[2],  'NonStandardValue', data.NonStandardValue);

}

function build_hrxml_EEOCJobCategory(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'StandardValue', data.StandardValue);
  PUSHTAG_RAW(body, 'NonStandardValue', data.NonStandardValue);

  return TAG('hrxml:EEOCJobCategory', attr, body);
}




function parse_hrxml_EducationHistory(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SchoolOrInstitution', i); ++i) {
    h =  hash [];
    parse_hrxml_SchoolOrInstitution(h, tag);
    push data{'SchoolOrInstitution'}, h;
  }

}

function build_hrxml_EducationHistory(data) {
  attr = [];
  body = [];

  for d(data{'SchoolOrInstitution'}) push body,build_hrxml_SchoolOrInstitution(d);

  return TAG('hrxml:EducationHistory', attr, body);
}




function parse_hrxml_EducationalMeasure(data, x) {

  POPTAG_RAW(x[2],  'MeasureSystem', data.MeasureSystem);
  POPTAG_RAW(x[2],  'MeasureValue', data.MeasureValue);
  tag = find_xml_local(x[2], 'LowestPossibleValue', 1);
  h =  hash [];
  parse_hrxml_LowestPossibleValue(h, aux1);
  data{'LowestPossibleValue'} = h;
  tag = find_xml_local(x[2], 'HighestPossibleValue', 1);
  h =  hash [];
  parse_hrxml_HighestPossibleValue(h, aux1);
  data{'HighestPossibleValue'} = h;
  POPTAG_RAW(x[2],  'ExcessiveValueIndicator', data.ExcessiveValueIndicator);
  POPTAG_RAW(x[2],  'GoodStudentIndicator', data.GoodStudentIndicator);

}

function build_hrxml_EducationalMeasure(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MeasureSystem', data.MeasureSystem);
  PUSHTAG_RAW(body, 'MeasureValue', data.MeasureValue);
  push body, build_hrxml_LowestPossibleValue(data{'LowestPossibleValue'});
  push body, build_hrxml_HighestPossibleValue(data{'HighestPossibleValue'});
  PUSHTAG_RAW(body, 'ExcessiveValueIndicator', data.ExcessiveValueIndicator);
  PUSHTAG_RAW(body, 'GoodStudentIndicator', data.GoodStudentIndicator);

  return TAG('hrxml:EducationalMeasure', attr, body);
}




function parse_hrxml_EffectiveDate(data, x) {

  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;

}

function build_hrxml_EffectiveDate(data) {
  attr = [];
  body = [];

  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});

  return TAG('hrxml:EffectiveDate', attr, body);
}




function parse_hrxml_EmployerContactInfo(data, x) {
  POPATTR(x[1], 'contactType', data.contactType);

  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }
  tag = find_xml_local(x[2], 'LocationSummary', 1);
  h =  hash [];
  parse_hrxml_LocationSummary(h, aux1);
  data{'LocationSummary'} = h;
  for (i=1; tag = find_xml_local(x[2], 'InternetDomainName', i); ++i) {
    h =  hash [];
    parse_hrxml_InternetDomainName(h, tag);
    push data{'InternetDomainName'}, h;
  }

}

function build_hrxml_EmployerContactInfo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'contactType', data.contactType);

  push body, build_hrxml_PersonName(data{'PersonName'});
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);
  push body, build_hrxml_LocationSummary(data{'LocationSummary'});
  for d(data{'InternetDomainName'}) push body,build_hrxml_InternetDomainName(d);

  return TAG('hrxml:EmployerContactInfo', attr, body);
}




function parse_hrxml_EmployerOrg(data, x) {
  POPATTR(x[1], 'employerOrgType', data.employerOrgType);

  POPTAG_RAW(x[2],  'EmployerOrgName', data.EmployerOrgName);
  tag = find_xml_local(x[2], 'EmployerContactInfo', 1);
  h =  hash [];
  parse_hrxml_EmployerContactInfo(h, aux1);
  data{'EmployerContactInfo'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PositionHistory', i); ++i) {
    h =  hash [];
    parse_hrxml_PositionHistory(h, tag);
    push data{'PositionHistory'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_EmployerOrg(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'employerOrgType', data.employerOrgType);

  PUSHTAG_RAW(body, 'EmployerOrgName', data.EmployerOrgName);
  push body, build_hrxml_EmployerContactInfo(data{'EmployerContactInfo'});
  for d(data{'PositionHistory'}) push body,build_hrxml_PositionHistory(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:EmployerOrg', attr, body);
}




function parse_hrxml_EmploymentHistory(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'EmployerOrg', i); ++i) {
    h =  hash [];
    parse_hrxml_EmployerOrg(h, tag);
    push data{'EmployerOrg'}, h;
  }

}

function build_hrxml_EmploymentHistory(data) {
  attr = [];
  body = [];

  for d(data{'EmployerOrg'}) push body,build_hrxml_EmployerOrg(d);

  return TAG('hrxml:EmploymentHistory', attr, body);
}




function parse_hrxml_EndDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_EndDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:EndDate', attr, body);
}




function parse_hrxml_EndingCompensation(data, x) {
  POPATTR(x[1], 'currency', data.currency);
  POPATTR(x[1], 'intervalType', data.intervalType);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);


}

function build_hrxml_EndingCompensation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'currency', data.currency);
  PUSHATTR(attr, 'intervalType', data.intervalType);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);


  return TAG('hrxml:EndingCompensation', attr, body);
}




function parse_hrxml_EnvironmentId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_EnvironmentId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:EnvironmentId', attr, body);
}




function parse_hrxml_EvidenceId(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'idOwner', data.idOwner);


}

function build_hrxml_EvidenceId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'idOwner', data.idOwner);


  return TAG('hrxml:EvidenceId', attr, body);
}




function parse_hrxml_ExpatriateBenefits(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ExpatriateBenefitsOffered', i); ++i)
    push data{'ExpatriateBenefitsOffered'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'ExpatriateBenefitList', i); ++i)
    push data{'ExpatriateBenefitList'}, tag[2];

}

function build_hrxml_ExpatriateBenefits(data) {
  attr = [];
  body = [];

  for d(data{'ExpatriateBenefitsOffered'})PUSHTAG_RAW(body,'ExpatriateBenefitsOffered',d);
  for d(data{'ExpatriateBenefitList'})PUSHTAG_RAW(body,'ExpatriateBenefitList',d);

  return TAG('hrxml:ExpatriateBenefits', attr, body);
}




function parse_hrxml_FamilyName(data, x) {
  POPATTR(x[1], 'prefix', data.prefix);
  POPATTR(x[1], 'primary', data.primary);


}

function build_hrxml_FamilyName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'prefix', data.prefix);
  PUSHATTR(attr, 'primary', data.primary);


  return TAG('hrxml:FamilyName', attr, body);
}




function parse_hrxml_Fax(data, x) {

  POPTAG_RAW(x[2],  'FormattedNumber', data.FormattedNumber);

}

function build_hrxml_Fax(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'FormattedNumber', data.FormattedNumber);

  return TAG('hrxml:Fax', attr, body);
}




function parse_hrxml_FirstIssuedDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_FirstIssuedDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:FirstIssuedDate', attr, body);
}




function parse_hrxml_FormattedPublicationDescription(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_FormattedPublicationDescription(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:FormattedPublicationDescription', attr, body);
}




function parse_hrxml_Height(data, x) {
  POPATTR(x[1], 'unitOfMeasure', data.unitOfMeasure);


}

function build_hrxml_Height(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'unitOfMeasure', data.unitOfMeasure);


  return TAG('hrxml:Height', attr, body);
}




function parse_hrxml_HighestPossibleValue(data, x) {

  tag = find_xml_local(x[2], 'NumericValue', 1);
  h =  hash [];
  parse_hrxml_NumericValue(h, aux1);
  data{'NumericValue'} = h;
  tag = find_xml_local(x[2], 'StringValue', 1);
  h =  hash [];
  parse_hrxml_StringValue(h, aux1);
  data{'StringValue'} = h;

}

function build_hrxml_HighestPossibleValue(data) {
  attr = [];
  body = [];

  push body, build_hrxml_NumericValue(data{'NumericValue'});
  push body, build_hrxml_StringValue(data{'StringValue'});

  return TAG('hrxml:HighestPossibleValue', attr, body);
}




function parse_hrxml_HorizontalAccuracy(data, x) {


}

function build_hrxml_HorizontalAccuracy(data) {
  attr = [];
  body = [];


  return TAG('hrxml:HorizontalAccuracy', attr, body);
}




function parse_hrxml_Id(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_Id(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:Id', attr, body);
}




function parse_hrxml_IdValue(data, x) {
  POPATTR(x[1], 'name', data.name);


}

function build_hrxml_IdValue(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'name', data.name);


  return TAG('hrxml:IdValue', attr, body);
}




function parse_hrxml_IndustryCode(data, x) {
  POPATTR(x[1], 'classificationName', data.classificationName);
  POPATTR(x[1], 'primaryIndicator', data.primaryIndicator);


}

function build_hrxml_IndustryCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'classificationName', data.classificationName);
  PUSHATTR(attr, 'primaryIndicator', data.primaryIndicator);


  return TAG('hrxml:IndustryCode', attr, body);
}




function parse_hrxml_Insurance(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_Insurance(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:Insurance', attr, body);
}




function parse_hrxml_InternetDomainName(data, x) {
  POPATTR(x[1], 'primaryIndicator', data.primaryIndicator);


}

function build_hrxml_InternetDomainName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'primaryIndicator', data.primaryIndicator);


  return TAG('hrxml:InternetDomainName', attr, body);
}




function parse_hrxml_Inventors(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'InventorName', i); ++i)
    push data{'InventorName'}, tag[2];

}

function build_hrxml_Inventors(data) {
  attr = [];
  body = [];

  for d(data{'InventorName'})PUSHTAG_RAW(body,'InventorName',d);

  return TAG('hrxml:Inventors', attr, body);
}




function parse_hrxml_IssuingAuthority(data, x) {
  POPATTR(x[1], 'countryCode', data.countryCode);


}

function build_hrxml_IssuingAuthority(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'countryCode', data.countryCode);


  return TAG('hrxml:IssuingAuthority', attr, body);
}




function parse_hrxml_JobCategory(data, x) {

  tag = find_xml_local(x[2], 'TaxonomyName', 1);
  h =  hash [];
  parse_hrxml_TaxonomyName(h, aux1);
  data{'TaxonomyName'} = h;
  POPTAG_RAW(x[2],  'CategoryCode', data.CategoryCode);
  POPTAG_RAW(x[2],  'CategoryDescription', data.CategoryDescription);
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  tag = find_xml_local(x[2], 'JobCategory', 1);
  h =  hash [];
  parse_hrxml_JobCategory(h, aux1);
  data{'JobCategory'} = h;

}

function build_hrxml_JobCategory(data) {
  attr = [];
  body = [];

  push body, build_hrxml_TaxonomyName(data{'TaxonomyName'});
  PUSHTAG_RAW(body, 'CategoryCode', data.CategoryCode);
  PUSHTAG_RAW(body, 'CategoryDescription', data.CategoryDescription);
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  push body, build_hrxml_JobCategory(data{'JobCategory'});

  return TAG('hrxml:JobCategory', attr, body);
}




function parse_hrxml_JobLevelInfo(data, x) {

  POPTAG_RAW(x[2],  'JobPlan', data.JobPlan);
  POPTAG_RAW(x[2],  'JobGrade', data.JobGrade);
  POPTAG_RAW(x[2],  'JobStep', data.JobStep);
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_JobLevelInfo(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'JobPlan', data.JobPlan);
  PUSHTAG_RAW(body, 'JobGrade', data.JobGrade);
  PUSHTAG_RAW(body, 'JobStep', data.JobStep);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:JobLevelInfo', attr, body);
}




function parse_hrxml_Language(data, x) {

  tag = find_xml_local(x[2], 'LanguageCode', 1);
  h =  hash [];
  parse_hrxml_LanguageCode(h, aux1);
  data{'LanguageCode'} = h;
  POPTAG_RAW(x[2],  'Read', data.Read);
  POPTAG_RAW(x[2],  'Write', data.Write);
  POPTAG_RAW(x[2],  'Speak', data.Speak);
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Language(data) {
  attr = [];
  body = [];

  push body, build_hrxml_LanguageCode(data{'LanguageCode'});
  PUSHTAG_RAW(body, 'Read', data.Read);
  PUSHTAG_RAW(body, 'Write', data.Write);
  PUSHTAG_RAW(body, 'Speak', data.Speak);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Language', attr, body);
}




function parse_hrxml_LanguageCode(data, x) {


}

function build_hrxml_LanguageCode(data) {
  attr = [];
  body = [];


  return TAG('hrxml:LanguageCode', attr, body);
}




function parse_hrxml_Languages(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Language', i); ++i) {
    h =  hash [];
    parse_hrxml_Language(h, tag);
    push data{'Language'}, h;
  }

}

function build_hrxml_Languages(data) {
  attr = [];
  body = [];

  for d(data{'Language'}) push body,build_hrxml_Language(d);

  return TAG('hrxml:Languages', attr, body);
}




function parse_hrxml_Latitude(data, x) {


}

function build_hrxml_Latitude(data) {
  attr = [];
  body = [];


  return TAG('hrxml:Latitude', attr, body);
}




function parse_hrxml_LegalClassification(data, x) {
  POPATTR(x[1], 'countryCode', data.countryCode);
  POPATTR(x[1], 'ownership', data.ownership);


}

function build_hrxml_LegalClassification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'countryCode', data.countryCode);
  PUSHATTR(attr, 'ownership', data.ownership);


  return TAG('hrxml:LegalClassification', attr, body);
}




function parse_hrxml_LegalId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_LegalId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:LegalId', attr, body);
}




function parse_hrxml_LegalIdentifiers(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PersonLegalId', i); ++i) {
    h =  hash [];
    parse_hrxml_PersonLegalId(h, tag);
    push data{'PersonLegalId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'MilitaryStatus', i); ++i) {
    h =  hash [];
    parse_hrxml_MilitaryStatus(h, tag);
    push data{'MilitaryStatus'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'VisaStatus', i); ++i) {
    h =  hash [];
    parse_hrxml_VisaStatus(h, tag);
    push data{'VisaStatus'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Citizenship', i); ++i)
    push data{'Citizenship'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Residency', i); ++i)
    push data{'Residency'}, tag[2];
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_LegalIdentifiers(data) {
  attr = [];
  body = [];

  for d(data{'PersonLegalId'}) push body,build_hrxml_PersonLegalId(d);
  for d(data{'MilitaryStatus'}) push body,build_hrxml_MilitaryStatus(d);
  for d(data{'VisaStatus'}) push body,build_hrxml_VisaStatus(d);
  for d(data{'Citizenship'})PUSHTAG_RAW(body,'Citizenship',d);
  for d(data{'Residency'})PUSHTAG_RAW(body,'Residency',d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:LegalIdentifiers', attr, body);
}




function parse_hrxml_LicenseOrCertification(data, x) {

  POPTAG_RAW(x[2],  'Name', data.Name);
  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  tag = find_xml_local(x[2], 'IssuingAuthority', 1);
  h =  hash [];
  parse_hrxml_IssuingAuthority(h, aux1);
  data{'IssuingAuthority'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  tag = find_xml_local(x[2], 'EffectiveDate', 1);
  h =  hash [];
  parse_hrxml_EffectiveDate(h, aux1);
  data{'EffectiveDate'} = h;

}

function build_hrxml_LicenseOrCertification(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Name', data.Name);
  push body, build_hrxml_Id(data{'Id'});
  push body, build_hrxml_IssuingAuthority(data{'IssuingAuthority'});
  push body, build_hrxml_Description(data{'Description'});
  push body, build_hrxml_EffectiveDate(data{'EffectiveDate'});

  return TAG('hrxml:LicenseOrCertification', attr, body);
}




function parse_hrxml_LicensesAndCertifications(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'LicenseOrCertification', i); ++i) {
    h =  hash [];
    parse_hrxml_LicenseOrCertification(h, tag);
    push data{'LicenseOrCertification'}, h;
  }

}

function build_hrxml_LicensesAndCertifications(data) {
  attr = [];
  body = [];

  for d(data{'LicenseOrCertification'}) push body,build_hrxml_LicenseOrCertification(d);

  return TAG('hrxml:LicensesAndCertifications', attr, body);
}




function parse_hrxml_List(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Item', i); ++i)
    push data{'Item'}, tag[2];

}

function build_hrxml_List(data) {
  attr = [];
  body = [];

  for d(data{'Item'})PUSHTAG_RAW(body,'Item',d);

  return TAG('hrxml:List', attr, body);
}




function parse_hrxml_LocalInstitutionClassification(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_LocalInstitutionClassification(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:LocalInstitutionClassification', attr, body);
}




function parse_hrxml_LocationSummary(data, x) {

  POPTAG_RAW(x[2],  'Municipality', data.Municipality);
  for (i=1; tag = find_xml_local(x[2], 'Region', i); ++i)
    push data{'Region'}, tag[2];
  POPTAG_RAW(x[2],  'CountryCode', data.CountryCode);
  POPTAG_RAW(x[2],  'PostalCode', data.PostalCode);

}

function build_hrxml_LocationSummary(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Municipality', data.Municipality);
  for d(data{'Region'})PUSHTAG_RAW(body,'Region',d);
  PUSHTAG_RAW(body, 'CountryCode', data.CountryCode);
  PUSHTAG_RAW(body, 'PostalCode', data.PostalCode);

  return TAG('hrxml:LocationSummary', attr, body);
}




function parse_hrxml_Longitude(data, x) {


}

function build_hrxml_Longitude(data) {
  attr = [];
  body = [];


  return TAG('hrxml:Longitude', attr, body);
}




function parse_hrxml_LowestPossibleValue(data, x) {

  tag = find_xml_local(x[2], 'NumericValue', 1);
  h =  hash [];
  parse_hrxml_NumericValue(h, aux1);
  data{'NumericValue'} = h;
  tag = find_xml_local(x[2], 'StringValue', 1);
  h =  hash [];
  parse_hrxml_StringValue(h, aux1);
  data{'StringValue'} = h;

}

function build_hrxml_LowestPossibleValue(data) {
  attr = [];
  body = [];

  push body, build_hrxml_NumericValue(data{'NumericValue'});
  push body, build_hrxml_StringValue(data{'StringValue'});

  return TAG('hrxml:LowestPossibleValue', attr, body);
}




function parse_hrxml_MatchedObjectId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_MatchedObjectId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:MatchedObjectId', attr, body);
}




function parse_hrxml_Measure(data, x) {
  POPATTR(x[1], 'measureType', data.measureType);

  POPTAG_RAW(x[2],  'MeasureSystem', data.MeasureSystem);
  POPTAG_RAW(x[2],  'MeasureValue', data.MeasureValue);

}

function build_hrxml_Measure(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'measureType', data.measureType);

  PUSHTAG_RAW(body, 'MeasureSystem', data.MeasureSystem);
  PUSHTAG_RAW(body, 'MeasureValue', data.MeasureValue);

  return TAG('hrxml:Measure', attr, body);
}




function parse_hrxml_MilitaryHistory(data, x) {

  POPTAG_RAW(x[2],  'CountryServed', data.CountryServed);
  tag = find_xml_local(x[2], 'ServiceNumber', 1);
  h =  hash [];
  parse_hrxml_ServiceNumber(h, aux1);
  data{'ServiceNumber'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ServiceDetail', i); ++i) {
    h =  hash [];
    parse_hrxml_ServiceDetail(h, tag);
    push data{'ServiceDetail'}, h;
  }
  POPTAG_RAW(x[2],  'ServiceStatus', data.ServiceStatus);
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_MilitaryHistory(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'CountryServed', data.CountryServed);
  push body, build_hrxml_ServiceNumber(data{'ServiceNumber'});
  for d(data{'ServiceDetail'}) push body,build_hrxml_ServiceDetail(d);
  PUSHTAG_RAW(body, 'ServiceStatus', data.ServiceStatus);
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:MilitaryHistory', attr, body);
}




function parse_hrxml_MilitaryStatus(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_MilitaryStatus(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:MilitaryStatus', attr, body);
}




function parse_hrxml_Mobile(data, x) {
  POPATTR(x[1], 'smsEnabled', data.smsEnabled);

  POPTAG_RAW(x[2],  'FormattedNumber', data.FormattedNumber);

}

function build_hrxml_Mobile(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'smsEnabled', data.smsEnabled);

  PUSHTAG_RAW(body, 'FormattedNumber', data.FormattedNumber);

  return TAG('hrxml:Mobile', attr, body);
}




function parse_hrxml_MostRecentDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_MostRecentDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:MostRecentDate', attr, body);
}




function parse_hrxml_NonXMLResume(data, x) {

  POPTAG_RAW(x[2],  'TextResume', data.TextResume);
  POPTAG_RAW(x[2],  'LinkToResume', data.LinkToResume);
  for (i=1; tag = find_xml_local(x[2], 'SupportingMaterials', i); ++i) {
    h =  hash [];
    parse_hrxml_SupportingMaterials(h, tag);
    push data{'SupportingMaterials'}, h;
  }
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'RevisionDate', data.RevisionDate);

}

function build_hrxml_NonXMLResume(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'TextResume', data.TextResume);
  PUSHTAG_RAW(body, 'LinkToResume', data.LinkToResume);
  for d(data{'SupportingMaterials'}) push body,build_hrxml_SupportingMaterials(d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'RevisionDate', data.RevisionDate);

  return TAG('hrxml:NonXMLResume', attr, body);
}




function parse_hrxml_NumericValue(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'interval', data.interval);
  POPATTR(x[1], 'maxValue', data.maxValue);
  POPATTR(x[1], 'minValue', data.minValue);


}

function build_hrxml_NumericValue(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'interval', data.interval);
  PUSHATTR(attr, 'maxValue', data.maxValue);
  PUSHATTR(attr, 'minValue', data.minValue);


  return TAG('hrxml:NumericValue', attr, body);
}




function parse_hrxml_OrgIndustry(data, x) {
  POPATTR(x[1], 'primaryIndicator', data.primaryIndicator);

  POPTAG_RAW(x[2],  'IndustryDescription', data.IndustryDescription);
  tag = find_xml_local(x[2], 'IndustryCode', 1);
  h =  hash [];
  parse_hrxml_IndustryCode(h, aux1);
  data{'IndustryCode'} = h;

}

function build_hrxml_OrgIndustry(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'primaryIndicator', data.primaryIndicator);

  PUSHTAG_RAW(body, 'IndustryDescription', data.IndustryDescription);
  push body, build_hrxml_IndustryCode(data{'IndustryCode'});

  return TAG('hrxml:OrgIndustry', attr, body);
}




function parse_hrxml_OrgInfo(data, x) {

  tag = find_xml_local(x[2], 'PositionLocation', 1);
  h =  hash [];
  parse_hrxml_PositionLocation(h, aux1);
  data{'PositionLocation'} = h;
  POPTAG_RAW(x[2],  'WebSite', data.WebSite);
  tag = find_xml_local(x[2], 'LocationSummary', 1);
  h =  hash [];
  parse_hrxml_LocationSummary(h, aux1);
  data{'LocationSummary'} = h;

}

function build_hrxml_OrgInfo(data) {
  attr = [];
  body = [];

  push body, build_hrxml_PositionLocation(data{'PositionLocation'});
  PUSHTAG_RAW(body, 'WebSite', data.WebSite);
  push body, build_hrxml_LocationSummary(data{'LocationSummary'});

  return TAG('hrxml:OrgInfo', attr, body);
}




function parse_hrxml_OrgName(data, x) {
  POPATTR(x[1], 'organizationType', data.organizationType);

  POPTAG_RAW(x[2],  'OrganizationName', data.OrganizationName);
  tag = find_xml_local(x[2], 'OrgName', 1);
  h =  hash [];
  parse_hrxml_OrgName(h, aux1);
  data{'OrgName'} = h;

}

function build_hrxml_OrgName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'organizationType', data.organizationType);

  PUSHTAG_RAW(body, 'OrganizationName', data.OrganizationName);
  push body, build_hrxml_OrgName(data{'OrgName'});

  return TAG('hrxml:OrgName', attr, body);
}




function parse_hrxml_Organization(data, x) {


}

function build_hrxml_Organization(data) {
  attr = [];
  body = [];


  return TAG('hrxml:Organization', attr, body);
}




function parse_hrxml_OrganizationId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_OrganizationId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:OrganizationId', attr, body);
}




function parse_hrxml_OrganizationUnit(data, x) {
  POPATTR(x[1], 'attendanceStatus', data.attendanceStatus);
  POPATTR(x[1], 'organizationType', data.organizationType);


}

function build_hrxml_OrganizationUnit(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'attendanceStatus', data.attendanceStatus);
  PUSHATTR(attr, 'organizationType', data.organizationType);


  return TAG('hrxml:OrganizationUnit', attr, body);
}




function parse_hrxml_OrganizationalUnit(data, x) {
  POPATTR(x[1], 'hierarchicalRole', data.hierarchicalRole);
  POPATTR(x[1], 'typeOfGroup', data.typeOfGroup);

  POPTAG_RAW(x[2],  'OrganizationalUnitName', data.OrganizationalUnitName);
  for (i=1; tag = find_xml_local(x[2], 'OrganizationalUnitId', i); ++i) {
    h =  hash [];
    parse_hrxml_OrganizationalUnitId(h, tag);
    push data{'OrganizationalUnitId'}, h;
  }
  tag = find_xml_local(x[2], 'OrganizationId', 1);
  h =  hash [];
  parse_hrxml_OrganizationId(h, aux1);
  data{'OrganizationId'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  for (i=1; tag = find_xml_local(x[2], 'IndustryCode', i); ++i) {
    h =  hash [];
    parse_hrxml_IndustryCode(h, tag);
    push data{'IndustryCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AccountingCode', i); ++i) {
    h =  hash [];
    parse_hrxml_AccountingCode(h, tag);
    push data{'AccountingCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'WorkSite', i); ++i) {
    h =  hash [];
    parse_hrxml_WorkSite(h, tag);
    push data{'WorkSite'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RelatedOrganizationalUnit', i); ++i) {
    h =  hash [];
    parse_hrxml_RelatedOrganizationalUnit(h, tag);
    push data{'RelatedOrganizationalUnit'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PersonMember', i); ++i) {
    h =  hash [];
    parse_hrxml_PersonMember(h, tag);
    push data{'PersonMember'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_OrganizationalUnit(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'hierarchicalRole', data.hierarchicalRole);
  PUSHATTR(attr, 'typeOfGroup', data.typeOfGroup);

  PUSHTAG_RAW(body, 'OrganizationalUnitName', data.OrganizationalUnitName);
  for d(data{'OrganizationalUnitId'}) push body,build_hrxml_OrganizationalUnitId(d);
  push body, build_hrxml_OrganizationId(data{'OrganizationId'});
  push body, build_hrxml_Description(data{'Description'});
  for d(data{'IndustryCode'}) push body,build_hrxml_IndustryCode(d);
  for d(data{'AccountingCode'}) push body,build_hrxml_AccountingCode(d);
  for d(data{'WorkSite'}) push body,build_hrxml_WorkSite(d);
  for d(data{'RelatedOrganizationalUnit'}) push body,build_hrxml_RelatedOrganizationalUnit(d);
  for d(data{'PersonMember'}) push body,build_hrxml_PersonMember(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:OrganizationalUnit', attr, body);
}




function parse_hrxml_OrganizationalUnitId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_OrganizationalUnitId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:OrganizationalUnitId', attr, body);
}




function parse_hrxml_OriginalDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_OriginalDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:OriginalDate', attr, body);
}




function parse_hrxml_OtherBenefits(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_OtherBenefits(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:OtherBenefits', attr, body);
}




function parse_hrxml_OtherCompensation(data, x) {
  POPATTR(x[1], 'type', data.type);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);


}

function build_hrxml_OtherCompensation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);


  return TAG('hrxml:OtherCompensation', attr, body);
}




function parse_hrxml_OtherDescriptors(data, x) {

  POPTAG_RAW(x[2],  'Name', data.Name);
  POPTAG_RAW(x[2],  'Applicable', data.Applicable);
  POPTAG_RAW(x[2],  'Value', data.Value);
  tag = find_xml_local(x[2], 'List', 1);
  h =  hash [];
  parse_hrxml_List(h, aux1);
  data{'List'} = h;

}

function build_hrxml_OtherDescriptors(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Name', data.Name);
  PUSHTAG_RAW(body, 'Applicable', data.Applicable);
  PUSHTAG_RAW(body, 'Value', data.Value);
  push body, build_hrxml_List(data{'List'});

  return TAG('hrxml:OtherDescriptors', attr, body);
}




function parse_hrxml_OtherHonors(data, x) {
  POPATTR(x[1], 'type', data.type);


}

function build_hrxml_OtherHonors(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);


  return TAG('hrxml:OtherHonors', attr, body);
}




function parse_hrxml_OtherPay(data, x) {
  POPATTR(x[1], 'currencyCode', data.currencyCode);
  POPATTR(x[1], 'otherInterval', data.otherInterval);
  POPATTR(x[1], 'otherPayType', data.otherPayType);

  POPTAG_RAW(x[2],  'OtherPayAmountMin', data.OtherPayAmountMin);
  POPTAG_RAW(x[2],  'OtherPayAmountMax', data.OtherPayAmountMax);
  POPTAG_RAW(x[2],  'OtherPayCalculation', data.OtherPayCalculation);
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_OtherPay(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'currencyCode', data.currencyCode);
  PUSHATTR(attr, 'otherInterval', data.otherInterval);
  PUSHATTR(attr, 'otherPayType', data.otherPayType);

  PUSHTAG_RAW(body, 'OtherPayAmountMin', data.OtherPayAmountMin);
  PUSHTAG_RAW(body, 'OtherPayAmountMax', data.OtherPayAmountMax);
  PUSHTAG_RAW(body, 'OtherPayCalculation', data.OtherPayCalculation);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:OtherPay', attr, body);
}




function parse_hrxml_OtherPublication(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'Title', data.Title);
  for (i=1; tag = find_xml_local(x[2], 'Name', i); ++i)
    push data{'Name'}, tag[2];
  tag = find_xml_local(x[2], 'PublicationDate', 1);
  h =  hash [];
  parse_hrxml_PublicationDate(h, aux1);
  data{'PublicationDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Link', i); ++i)
    push data{'Link'}, tag[2];
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  tag = find_xml_local(x[2], 'Copyright', 1);
  h =  hash [];
  parse_hrxml_Copyright(h, aux1);
  data{'Copyright'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'ISSN', data.ISSN);
  POPTAG_RAW(x[2],  'ISBN', data.ISBN);
  POPTAG_RAW(x[2],  'NumberOfPages', data.NumberOfPages);
  POPTAG_RAW(x[2],  'PublisherName', data.PublisherName);
  POPTAG_RAW(x[2],  'PublisherLocation', data.PublisherLocation);

}

function build_hrxml_OtherPublication(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'Title', data.Title);
  for d(data{'Name'})PUSHTAG_RAW(body,'Name',d);
  push body, build_hrxml_PublicationDate(data{'PublicationDate'});
  for d(data{'Link'})PUSHTAG_RAW(body,'Link',d);
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  push body, build_hrxml_Copyright(data{'Copyright'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'ISSN', data.ISSN);
  PUSHTAG_RAW(body, 'ISBN', data.ISBN);
  PUSHTAG_RAW(body, 'NumberOfPages', data.NumberOfPages);
  PUSHTAG_RAW(body, 'PublisherName', data.PublisherName);
  PUSHTAG_RAW(body, 'PublisherLocation', data.PublisherLocation);

  return TAG('hrxml:OtherPublication', attr, body);
}




function parse_hrxml_Pager(data, x) {

  POPTAG_RAW(x[2],  'FormattedNumber', data.FormattedNumber);

}

function build_hrxml_Pager(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'FormattedNumber', data.FormattedNumber);

  return TAG('hrxml:Pager', attr, body);
}




function parse_hrxml_ParkingInstructions(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_hrxml_ParkingInstructions(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('hrxml:ParkingInstructions', attr, body);
}




function parse_hrxml_Patent(data, x) {

  POPTAG_RAW(x[2],  'PatentTitle', data.PatentTitle);
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  tag = find_xml_local(x[2], 'Inventors', 1);
  h =  hash [];
  parse_hrxml_Inventors(h, aux1);
  data{'Inventors'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PatentDetail', i); ++i) {
    h =  hash [];
    parse_hrxml_PatentDetail(h, tag);
    push data{'PatentDetail'}, h;
  }
  POPTAG_RAW(x[2],  'Link', data.Link);

}

function build_hrxml_Patent(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'PatentTitle', data.PatentTitle);
  push body, build_hrxml_Description(data{'Description'});
  push body, build_hrxml_Inventors(data{'Inventors'});
  for d(data{'PatentDetail'}) push body,build_hrxml_PatentDetail(d);
  PUSHTAG_RAW(body, 'Link', data.Link);

  return TAG('hrxml:Patent', attr, body);
}




function parse_hrxml_PatentDetail(data, x) {

  tag = find_xml_local(x[2], 'IssuingAuthority', 1);
  h =  hash [];
  parse_hrxml_IssuingAuthority(h, aux1);
  data{'IssuingAuthority'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PatentMilestone', i); ++i) {
    h =  hash [];
    parse_hrxml_PatentMilestone(h, tag);
    push data{'PatentMilestone'}, h;
  }

}

function build_hrxml_PatentDetail(data) {
  attr = [];
  body = [];

  push body, build_hrxml_IssuingAuthority(data{'IssuingAuthority'});
  for d(data{'PatentMilestone'}) push body,build_hrxml_PatentMilestone(d);

  return TAG('hrxml:PatentDetail', attr, body);
}




function parse_hrxml_PatentHistory(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Patent', i); ++i) {
    h =  hash [];
    parse_hrxml_Patent(h, tag);
    push data{'Patent'}, h;
  }

}

function build_hrxml_PatentHistory(data) {
  attr = [];
  body = [];

  for d(data{'Patent'}) push body,build_hrxml_Patent(d);

  return TAG('hrxml:PatentHistory', attr, body);
}




function parse_hrxml_PatentMilestone(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_hrxml_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'Date', data.Date);

}

function build_hrxml_PatentMilestone(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  push body, build_hrxml_Status(data{'Status'});
  PUSHTAG_RAW(body, 'Date', data.Date);

  return TAG('hrxml:PatentMilestone', attr, body);
}




function parse_hrxml_PersonDescriptors(data, x) {

  tag = find_xml_local(x[2], 'LegalIdentifiers', 1);
  h =  hash [];
  parse_hrxml_LegalIdentifiers(h, aux1);
  data{'LegalIdentifiers'} = h;
  tag = find_xml_local(x[2], 'DemographicDescriptors', 1);
  h =  hash [];
  parse_hrxml_DemographicDescriptors(h, aux1);
  data{'DemographicDescriptors'} = h;
  tag = find_xml_local(x[2], 'BiologicalDescriptors', 1);
  h =  hash [];
  parse_hrxml_BiologicalDescriptors(h, aux1);
  data{'BiologicalDescriptors'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SupportingMaterials', i); ++i) {
    h =  hash [];
    parse_hrxml_SupportingMaterials(h, tag);
    push data{'SupportingMaterials'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OtherDescriptors', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherDescriptors(h, tag);
    push data{'OtherDescriptors'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'UserArea', i); ++i) {
    h =  hash [];
    parse_hrxml_UserArea(h, tag);
    push data{'UserArea'}, h;
  }

}

function build_hrxml_PersonDescriptors(data) {
  attr = [];
  body = [];

  push body, build_hrxml_LegalIdentifiers(data{'LegalIdentifiers'});
  push body, build_hrxml_DemographicDescriptors(data{'DemographicDescriptors'});
  push body, build_hrxml_BiologicalDescriptors(data{'BiologicalDescriptors'});
  for d(data{'SupportingMaterials'}) push body,build_hrxml_SupportingMaterials(d);
  for d(data{'OtherDescriptors'}) push body,build_hrxml_OtherDescriptors(d);
  for d(data{'UserArea'}) push body,build_hrxml_UserArea(d);

  return TAG('hrxml:PersonDescriptors', attr, body);
}




function parse_hrxml_PersonId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_PersonId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:PersonId', attr, body);
}




function parse_hrxml_PersonLegalId(data, x) {
  POPATTR(x[1], 'countryCode', data.countryCode);
  POPATTR(x[1], 'documentType', data.documentType);
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'idSource', data.idSource);
  POPATTR(x[1], 'issuingRegion', data.issuingRegion);
  POPATTR(x[1], 'jurisdiction', data.jurisdiction);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_PersonLegalId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'countryCode', data.countryCode);
  PUSHATTR(attr, 'documentType', data.documentType);
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'idSource', data.idSource);
  PUSHATTR(attr, 'issuingRegion', data.issuingRegion);
  PUSHATTR(attr, 'jurisdiction', data.jurisdiction);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:PersonLegalId', attr, body);
}




function parse_hrxml_PersonMember(data, x) {

  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PersonId', i); ++i) {
    h =  hash [];
    parse_hrxml_PersonId(h, tag);
    push data{'PersonId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PersonRole', i); ++i) {
    h =  hash [];
    parse_hrxml_PersonRole(h, tag);
    push data{'PersonRole'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }

}

function build_hrxml_PersonMember(data) {
  attr = [];
  body = [];

  push body, build_hrxml_PersonName(data{'PersonName'});
  for d(data{'PersonId'}) push body,build_hrxml_PersonId(d);
  for d(data{'PersonRole'}) push body,build_hrxml_PersonRole(d);
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);

  return TAG('hrxml:PersonMember', attr, body);
}




function parse_hrxml_PersonName(data, x) {
  POPATTR(x[1], 'script', data.script);

  POPTAG_RAW(x[2],  'FormattedName', data.FormattedName);
  for (i=1; tag = find_xml_local(x[2], 'LegalName', i); ++i)
    push data{'LegalName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'GivenName', i); ++i)
    push data{'GivenName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PreferredGivenName', i); ++i)
    push data{'PreferredGivenName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'MiddleName', i); ++i)
    push data{'MiddleName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'FamilyName', i); ++i) {
    h =  hash [];
    parse_hrxml_FamilyName(h, tag);
    push data{'FamilyName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Affix', i); ++i) {
    h =  hash [];
    parse_hrxml_Affix(h, tag);
    push data{'Affix'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AlternateScript', i); ++i) {
    h =  hash [];
    parse_hrxml_AlternateScript(h, tag);
    push data{'AlternateScript'}, h;
  }

}

function build_hrxml_PersonName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'script', data.script);

  PUSHTAG_RAW(body, 'FormattedName', data.FormattedName);
  for d(data{'LegalName'})PUSHTAG_RAW(body,'LegalName',d);
  for d(data{'GivenName'})PUSHTAG_RAW(body,'GivenName',d);
  for d(data{'PreferredGivenName'})PUSHTAG_RAW(body,'PreferredGivenName',d);
  for d(data{'MiddleName'})PUSHTAG_RAW(body,'MiddleName',d);
  for d(data{'FamilyName'}) push body,build_hrxml_FamilyName(d);
  for d(data{'Affix'}) push body,build_hrxml_Affix(d);
  for d(data{'AlternateScript'}) push body,build_hrxml_AlternateScript(d);

  return TAG('hrxml:PersonName', attr, body);
}




function parse_hrxml_PersonRole(data, x) {
  POPATTR(x[1], 'leader', data.leader);

  POPTAG_RAW(x[2],  'RoleName', data.RoleName);
  tag = find_xml_local(x[2], 'RoleId', 1);
  h =  hash [];
  parse_hrxml_RoleId(h, aux1);
  data{'RoleId'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_PersonRole(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'leader', data.leader);

  PUSHTAG_RAW(body, 'RoleName', data.RoleName);
  push body, build_hrxml_RoleId(data{'RoleId'});
  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:PersonRole', attr, body);
}




function parse_hrxml_PersonalData(data, x) {

  tag = find_xml_local(x[2], 'PersonId', 1);
  h =  hash [];
  parse_hrxml_PersonId(h, aux1);
  data{'PersonId'} = h;
  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }
  tag = find_xml_local(x[2], 'PersonDescriptors', 1);
  h =  hash [];
  parse_hrxml_PersonDescriptors(h, aux1);
  data{'PersonDescriptors'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_PersonalData(data) {
  attr = [];
  body = [];

  push body, build_hrxml_PersonId(data{'PersonId'});
  push body, build_hrxml_PersonName(data{'PersonName'});
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);
  push body, build_hrxml_PersonDescriptors(data{'PersonDescriptors'});
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:PersonalData', attr, body);
}




function parse_hrxml_PhysicalLocation(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Name', data.Name);
  tag = find_xml_local(x[2], 'EffectiveDate', 1);
  h =  hash [];
  parse_hrxml_EffectiveDate(h, aux1);
  data{'EffectiveDate'} = h;
  tag = find_xml_local(x[2], 'SpatialLocation', 1);
  h =  hash [];
  parse_hrxml_SpatialLocation(h, aux1);
  data{'SpatialLocation'} = h;
  for (i=1; tag = find_xml_local(x[2], 'TravelDirections', i); ++i) {
    h =  hash [];
    parse_hrxml_TravelDirections(h, tag);
    push data{'TravelDirections'}, h;
  }
  tag = find_xml_local(x[2], 'PostalAddress', 1);
  h =  hash [];
  parse_hrxml_PostalAddress(h, aux1);
  data{'PostalAddress'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Area', i); ++i) {
    h =  hash [];
    parse_hrxml_Area(h, tag);
    push data{'Area'}, h;
  }
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_PhysicalLocation(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Name', data.Name);
  push body, build_hrxml_EffectiveDate(data{'EffectiveDate'});
  push body, build_hrxml_SpatialLocation(data{'SpatialLocation'});
  for d(data{'TravelDirections'}) push body,build_hrxml_TravelDirections(d);
  push body, build_hrxml_PostalAddress(data{'PostalAddress'});
  for d(data{'Area'}) push body,build_hrxml_Area(d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:PhysicalLocation', attr, body);
}




function parse_hrxml_PositionHistory(data, x) {
  POPATTR(x[1], 'currentEmployer', data.currentEmployer);
  POPATTR(x[1], 'positionType', data.positionType);

  POPTAG_RAW(x[2],  'Title', data.Title);
  tag = find_xml_local(x[2], 'OrgName', 1);
  h =  hash [];
  parse_hrxml_OrgName(h, aux1);
  data{'OrgName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'OrgInfo', i); ++i) {
    h =  hash [];
    parse_hrxml_OrgInfo(h, tag);
    push data{'OrgInfo'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrgIndustry', i); ++i) {
    h =  hash [];
    parse_hrxml_OrgIndustry(h, tag);
    push data{'OrgIndustry'}, h;
  }
  POPTAG_RAW(x[2],  'OrgSize', data.OrgSize);
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;
  tag = find_xml_local(x[2], 'Compensation', 1);
  h =  hash [];
  parse_hrxml_Compensation(h, aux1);
  data{'Compensation'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  tag = find_xml_local(x[2], 'Verification', 1);
  h =  hash [];
  parse_hrxml_Verification(h, aux1);
  data{'Verification'} = h;
  for (i=1; tag = find_xml_local(x[2], 'JobLevelInfo', i); ++i) {
    h =  hash [];
    parse_hrxml_JobLevelInfo(h, tag);
    push data{'JobLevelInfo'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'JobCategory', i); ++i) {
    h =  hash [];
    parse_hrxml_JobCategory(h, tag);
    push data{'JobCategory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Competency', i); ++i) {
    h =  hash [];
    parse_hrxml_Competency(h, tag);
    push data{'Competency'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_PositionHistory(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'currentEmployer', data.currentEmployer);
  PUSHATTR(attr, 'positionType', data.positionType);

  PUSHTAG_RAW(body, 'Title', data.Title);
  push body, build_hrxml_OrgName(data{'OrgName'});
  for d(data{'OrgInfo'}) push body,build_hrxml_OrgInfo(d);
  for d(data{'OrgIndustry'}) push body,build_hrxml_OrgIndustry(d);
  PUSHTAG_RAW(body, 'OrgSize', data.OrgSize);
  push body, build_hrxml_Description(data{'Description'});
  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});
  push body, build_hrxml_Compensation(data{'Compensation'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  push body, build_hrxml_Verification(data{'Verification'});
  for d(data{'JobLevelInfo'}) push body,build_hrxml_JobLevelInfo(d);
  for d(data{'JobCategory'}) push body,build_hrxml_JobCategory(d);
  for d(data{'Competency'}) push body,build_hrxml_Competency(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:PositionHistory', attr, body);
}




function parse_hrxml_PositionLocation(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'CountryCode', data.CountryCode);
  POPTAG_RAW(x[2],  'PostalCode', data.PostalCode);
  for (i=1; tag = find_xml_local(x[2], 'Region', i); ++i)
    push data{'Region'}, tag[2];
  POPTAG_RAW(x[2],  'Municipality', data.Municipality);
  tag = find_xml_local(x[2], 'DeliveryAddress', 1);
  h =  hash [];
  parse_hrxml_DeliveryAddress(h, aux1);
  data{'DeliveryAddress'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Recipient', i); ++i) {
    h =  hash [];
    parse_hrxml_Recipient(h, tag);
    push data{'Recipient'}, h;
  }

}

function build_hrxml_PositionLocation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'CountryCode', data.CountryCode);
  PUSHTAG_RAW(body, 'PostalCode', data.PostalCode);
  for d(data{'Region'})PUSHTAG_RAW(body,'Region',d);
  PUSHTAG_RAW(body, 'Municipality', data.Municipality);
  push body, build_hrxml_DeliveryAddress(data{'DeliveryAddress'});
  for d(data{'Recipient'}) push body,build_hrxml_Recipient(d);

  return TAG('hrxml:PositionLocation', attr, body);
}




function parse_hrxml_PositionMatching(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Company', i); ++i) {
    h =  hash [];
    parse_hrxml_Company(h, tag);
    push data{'Company'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CompanyScale', i); ++i)
    push data{'CompanyScale'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'IndustryCode', i); ++i) {
    h =  hash [];
    parse_hrxml_IndustryCode(h, tag);
    push data{'IndustryCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PhysicalLocation', i); ++i) {
    h =  hash [];
    parse_hrxml_PhysicalLocation(h, tag);
    push data{'PhysicalLocation'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'JobCategory', i); ++i) {
    h =  hash [];
    parse_hrxml_JobCategory(h, tag);
    push data{'JobCategory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PositionTitle', i); ++i)
    push data{'PositionTitle'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PositionClassification', i); ++i)
    push data{'PositionClassification'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PositionSchedule', i); ++i) {
    h =  hash [];
    parse_hrxml_PositionSchedule(h, tag);
    push data{'PositionSchedule'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Shift', i); ++i) {
    h =  hash [];
    parse_hrxml_Shift(h, tag);
    push data{'Shift'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Competency', i); ++i) {
    h =  hash [];
    parse_hrxml_Competency(h, tag);
    push data{'Competency'}, h;
  }
  tag = find_xml_local(x[2], 'RemunerationPackage', 1);
  h =  hash [];
  parse_hrxml_RemunerationPackage(h, aux1);
  data{'RemunerationPackage'} = h;
  for (i=1; tag = find_xml_local(x[2], 'WorkStyle', i); ++i)
    push data{'WorkStyle'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'DressCode', i); ++i) {
    h =  hash [];
    parse_hrxml_DressCode(h, tag);
    push data{'DressCode'}, h;
  }
  tag = find_xml_local(x[2], 'Travel', 1);
  h =  hash [];
  parse_hrxml_Travel(h, aux1);
  data{'Travel'} = h;
  tag = find_xml_local(x[2], 'Relocation', 1);
  h =  hash [];
  parse_hrxml_Relocation(h, aux1);
  data{'Relocation'} = h;
  tag = find_xml_local(x[2], 'PreferredLanguage', 1);
  h =  hash [];
  parse_hrxml_PreferredLanguage(h, aux1);
  data{'PreferredLanguage'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_PositionMatching(data) {
  attr = [];
  body = [];

  for d(data{'Company'}) push body,build_hrxml_Company(d);
  for d(data{'CompanyScale'})PUSHTAG_RAW(body,'CompanyScale',d);
  for d(data{'IndustryCode'}) push body,build_hrxml_IndustryCode(d);
  for d(data{'PhysicalLocation'}) push body,build_hrxml_PhysicalLocation(d);
  for d(data{'JobCategory'}) push body,build_hrxml_JobCategory(d);
  for d(data{'PositionTitle'})PUSHTAG_RAW(body,'PositionTitle',d);
  for d(data{'PositionClassification'})PUSHTAG_RAW(body,'PositionClassification',d);
  for d(data{'PositionSchedule'}) push body,build_hrxml_PositionSchedule(d);
  for d(data{'Shift'}) push body,build_hrxml_Shift(d);
  for d(data{'Competency'}) push body,build_hrxml_Competency(d);
  push body, build_hrxml_RemunerationPackage(data{'RemunerationPackage'});
  for d(data{'WorkStyle'})PUSHTAG_RAW(body,'WorkStyle',d);
  for d(data{'DressCode'}) push body,build_hrxml_DressCode(d);
  push body, build_hrxml_Travel(data{'Travel'});
  push body, build_hrxml_Relocation(data{'Relocation'});
  push body, build_hrxml_PreferredLanguage(data{'PreferredLanguage'});
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:PositionMatching', attr, body);
}




function parse_hrxml_PositionPosting(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Title', data.Title);
  POPTAG_RAW(x[2],  'Link', data.Link);
  tag = find_xml_local(x[2], 'SearchCriteria', 1);
  h =  hash [];
  parse_hrxml_SearchCriteria(h, aux1);
  data{'SearchCriteria'} = h;
  tag = find_xml_local(x[2], 'SearchResult', 1);
  h =  hash [];
  parse_hrxml_SearchResult(h, aux1);
  data{'SearchResult'} = h;

}

function build_hrxml_PositionPosting(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Title', data.Title);
  PUSHTAG_RAW(body, 'Link', data.Link);
  push body, build_hrxml_SearchCriteria(data{'SearchCriteria'});
  push body, build_hrxml_SearchResult(data{'SearchResult'});

  return TAG('hrxml:PositionPosting', attr, body);
}




function parse_hrxml_PositionSchedule(data, x) {
  POPATTR(x[1], 'percentage', data.percentage);


}

function build_hrxml_PositionSchedule(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'percentage', data.percentage);


  return TAG('hrxml:PositionSchedule', attr, body);
}




function parse_hrxml_PostalAddress(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'CountryCode', data.CountryCode);
  POPTAG_RAW(x[2],  'PostalCode', data.PostalCode);
  for (i=1; tag = find_xml_local(x[2], 'Region', i); ++i)
    push data{'Region'}, tag[2];
  POPTAG_RAW(x[2],  'Municipality', data.Municipality);
  tag = find_xml_local(x[2], 'DeliveryAddress', 1);
  h =  hash [];
  parse_hrxml_DeliveryAddress(h, aux1);
  data{'DeliveryAddress'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Recipient', i); ++i) {
    h =  hash [];
    parse_hrxml_Recipient(h, tag);
    push data{'Recipient'}, h;
  }

}

function build_hrxml_PostalAddress(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'CountryCode', data.CountryCode);
  PUSHTAG_RAW(body, 'PostalCode', data.PostalCode);
  for d(data{'Region'})PUSHTAG_RAW(body,'Region',d);
  PUSHTAG_RAW(body, 'Municipality', data.Municipality);
  push body, build_hrxml_DeliveryAddress(data{'DeliveryAddress'});
  for d(data{'Recipient'}) push body,build_hrxml_Recipient(d);

  return TAG('hrxml:PostalAddress', attr, body);
}




function parse_hrxml_PreferredLanguage(data, x) {


}

function build_hrxml_PreferredLanguage(data) {
  attr = [];
  body = [];


  return TAG('hrxml:PreferredLanguage', attr, body);
}




function parse_hrxml_PreferredPosition(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Company', i); ++i) {
    h =  hash [];
    parse_hrxml_Company(h, tag);
    push data{'Company'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CompanyScale', i); ++i)
    push data{'CompanyScale'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'IndustryCode', i); ++i) {
    h =  hash [];
    parse_hrxml_IndustryCode(h, tag);
    push data{'IndustryCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PhysicalLocation', i); ++i) {
    h =  hash [];
    parse_hrxml_PhysicalLocation(h, tag);
    push data{'PhysicalLocation'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'JobCategory', i); ++i) {
    h =  hash [];
    parse_hrxml_JobCategory(h, tag);
    push data{'JobCategory'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PositionTitle', i); ++i)
    push data{'PositionTitle'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PositionClassification', i); ++i)
    push data{'PositionClassification'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'PositionSchedule', i); ++i) {
    h =  hash [];
    parse_hrxml_PositionSchedule(h, tag);
    push data{'PositionSchedule'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Shift', i); ++i) {
    h =  hash [];
    parse_hrxml_Shift(h, tag);
    push data{'Shift'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Competency', i); ++i) {
    h =  hash [];
    parse_hrxml_Competency(h, tag);
    push data{'Competency'}, h;
  }
  tag = find_xml_local(x[2], 'RemunerationPackage', 1);
  h =  hash [];
  parse_hrxml_RemunerationPackage(h, aux1);
  data{'RemunerationPackage'} = h;
  for (i=1; tag = find_xml_local(x[2], 'WorkStyle', i); ++i)
    push data{'WorkStyle'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'DressCode', i); ++i) {
    h =  hash [];
    parse_hrxml_DressCode(h, tag);
    push data{'DressCode'}, h;
  }
  tag = find_xml_local(x[2], 'Travel', 1);
  h =  hash [];
  parse_hrxml_Travel(h, aux1);
  data{'Travel'} = h;
  tag = find_xml_local(x[2], 'Relocation', 1);
  h =  hash [];
  parse_hrxml_Relocation(h, aux1);
  data{'Relocation'} = h;
  tag = find_xml_local(x[2], 'PreferredLanguage', 1);
  h =  hash [];
  parse_hrxml_PreferredLanguage(h, aux1);
  data{'PreferredLanguage'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;
  tag = find_xml_local(x[2], 'Commute', 1);
  h =  hash [];
  parse_hrxml_Commute(h, aux1);
  data{'Commute'} = h;

}

function build_hrxml_PreferredPosition(data) {
  attr = [];
  body = [];

  for d(data{'Company'}) push body,build_hrxml_Company(d);
  for d(data{'CompanyScale'})PUSHTAG_RAW(body,'CompanyScale',d);
  for d(data{'IndustryCode'}) push body,build_hrxml_IndustryCode(d);
  for d(data{'PhysicalLocation'}) push body,build_hrxml_PhysicalLocation(d);
  for d(data{'JobCategory'}) push body,build_hrxml_JobCategory(d);
  for d(data{'PositionTitle'})PUSHTAG_RAW(body,'PositionTitle',d);
  for d(data{'PositionClassification'})PUSHTAG_RAW(body,'PositionClassification',d);
  for d(data{'PositionSchedule'}) push body,build_hrxml_PositionSchedule(d);
  for d(data{'Shift'}) push body,build_hrxml_Shift(d);
  for d(data{'Competency'}) push body,build_hrxml_Competency(d);
  push body, build_hrxml_RemunerationPackage(data{'RemunerationPackage'});
  for d(data{'WorkStyle'})PUSHTAG_RAW(body,'WorkStyle',d);
  for d(data{'DressCode'}) push body,build_hrxml_DressCode(d);
  push body, build_hrxml_Travel(data{'Travel'});
  push body, build_hrxml_Relocation(data{'Relocation'});
  push body, build_hrxml_PreferredLanguage(data{'PreferredLanguage'});
  push body, build_hrxml_UserArea(data{'UserArea'});
  push body, build_hrxml_Commute(data{'Commute'});

  return TAG('hrxml:PreferredPosition', attr, body);
}




function parse_hrxml_PrehireRemuneration(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'BasePay', i); ++i) {
    h =  hash [];
    parse_hrxml_BasePay(h, tag);
    push data{'BasePay'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OtherPay', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherPay(h, tag);
    push data{'OtherPay'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Benefits', i); ++i) {
    h =  hash [];
    parse_hrxml_Benefits(h, tag);
    push data{'Benefits'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_PrehireRemuneration(data) {
  attr = [];
  body = [];

  for d(data{'BasePay'}) push body,build_hrxml_BasePay(d);
  for d(data{'OtherPay'}) push body,build_hrxml_OtherPay(d);
  for d(data{'Benefits'}) push body,build_hrxml_Benefits(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:PrehireRemuneration', attr, body);
}




function parse_hrxml_PrimaryLanguage(data, x) {


}

function build_hrxml_PrimaryLanguage(data) {
  attr = [];
  body = [];


  return TAG('hrxml:PrimaryLanguage', attr, body);
}




function parse_hrxml_ProfessionalAssociations(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Association', i); ++i) {
    h =  hash [];
    parse_hrxml_Association(h, tag);
    push data{'Association'}, h;
  }

}

function build_hrxml_ProfessionalAssociations(data) {
  attr = [];
  body = [];

  for d(data{'Association'}) push body,build_hrxml_Association(d);

  return TAG('hrxml:ProfessionalAssociations', attr, body);
}




function parse_hrxml_ProfileId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_ProfileId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:ProfileId', attr, body);
}




function parse_hrxml_ProgramId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_ProgramId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:ProgramId', attr, body);
}




function parse_hrxml_PublicationDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_PublicationDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:PublicationDate', attr, body);
}




function parse_hrxml_PublicationHistory(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'FormattedPublicationDescription', i); ++i) {
    h =  hash [];
    parse_hrxml_FormattedPublicationDescription(h, tag);
    push data{'FormattedPublicationDescription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Article', i); ++i) {
    h =  hash [];
    parse_hrxml_Article(h, tag);
    push data{'Article'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Book', i); ++i) {
    h =  hash [];
    parse_hrxml_Book(h, tag);
    push data{'Book'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ConferencePaper', i); ++i) {
    h =  hash [];
    parse_hrxml_ConferencePaper(h, tag);
    push data{'ConferencePaper'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OtherPublication', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherPublication(h, tag);
    push data{'OtherPublication'}, h;
  }

}

function build_hrxml_PublicationHistory(data) {
  attr = [];
  body = [];

  for d(data{'FormattedPublicationDescription'}) push body,build_hrxml_FormattedPublicationDescription(d);
  for d(data{'Article'}) push body,build_hrxml_Article(d);
  for d(data{'Book'}) push body,build_hrxml_Book(d);
  for d(data{'ConferencePaper'}) push body,build_hrxml_ConferencePaper(d);
  for d(data{'OtherPublication'}) push body,build_hrxml_OtherPublication(d);

  return TAG('hrxml:PublicationHistory', attr, body);
}




function parse_hrxml_PublicationLanguage(data, x) {


}

function build_hrxml_PublicationLanguage(data) {
  attr = [];
  body = [];


  return TAG('hrxml:PublicationLanguage', attr, body);
}




function parse_hrxml_Qualifications(data, x) {

  POPTAG_RAW(x[2],  'QualificationSummary', data.QualificationSummary);
  for (i=1; tag = find_xml_local(x[2], 'Competency', i); ++i) {
    h =  hash [];
    parse_hrxml_Competency(h, tag);
    push data{'Competency'}, h;
  }

}

function build_hrxml_Qualifications(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'QualificationSummary', data.QualificationSummary);
  for d(data{'Competency'}) push body,build_hrxml_Competency(d);

  return TAG('hrxml:Qualifications', attr, body);
}




function parse_hrxml_RankAchieved(data, x) {

  POPTAG_RAW(x[2],  'StartRank', data.StartRank);
  POPTAG_RAW(x[2],  'CurrentOrEndRank', data.CurrentOrEndRank);

}

function build_hrxml_RankAchieved(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'StartRank', data.StartRank);
  PUSHTAG_RAW(body, 'CurrentOrEndRank', data.CurrentOrEndRank);

  return TAG('hrxml:RankAchieved', attr, body);
}




function parse_hrxml_RankedResult(data, x) {

  POPTAG_RAW(x[2],  'CriterionName', data.CriterionName);
  POPTAG_RAW(x[2],  'Requested', data.Requested);
  POPTAG_RAW(x[2],  'Offered', data.Offered);
  tag = find_xml_local(x[2], 'Score', 1);
  h =  hash [];
  parse_hrxml_Score(h, aux1);
  data{'Score'} = h;
  tag = find_xml_local(x[2], 'Weight', 1);
  h =  hash [];
  parse_hrxml_Weight(h, aux1);
  data{'Weight'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;
  for (i=1; tag = find_xml_local(x[2], 'RankedResult', i); ++i) {
    h =  hash [];
    parse_hrxml_RankedResult(h, tag);
    push data{'RankedResult'}, h;
  }

}

function build_hrxml_RankedResult(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'CriterionName', data.CriterionName);
  PUSHTAG_RAW(body, 'Requested', data.Requested);
  PUSHTAG_RAW(body, 'Offered', data.Offered);
  push body, build_hrxml_Score(data{'Score'});
  push body, build_hrxml_Weight(data{'Weight'});
  push body, build_hrxml_UserArea(data{'UserArea'});
  for d(data{'RankedResult'}) push body,build_hrxml_RankedResult(d);

  return TAG('hrxml:RankedResult', attr, body);
}




function parse_hrxml_RankedSearchResults(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'RankedResult', i); ++i) {
    h =  hash [];
    parse_hrxml_RankedResult(h, tag);
    push data{'RankedResult'}, h;
  }

}

function build_hrxml_RankedSearchResults(data) {
  attr = [];
  body = [];

  for d(data{'RankedResult'}) push body,build_hrxml_RankedResult(d);

  return TAG('hrxml:RankedSearchResults', attr, body);
}




function parse_hrxml_Recipient(data, x) {

  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AdditionalText', i); ++i)
    push data{'AdditionalText'}, tag[2];
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_hrxml_Organization(h, aux1);
  data{'Organization'} = h;
  POPTAG_RAW(x[2],  'OrganizationName', data.OrganizationName);

}

function build_hrxml_Recipient(data) {
  attr = [];
  body = [];

  push body, build_hrxml_PersonName(data{'PersonName'});
  for d(data{'AdditionalText'})PUSHTAG_RAW(body,'AdditionalText',d);
  push body, build_hrxml_Organization(data{'Organization'});
  PUSHTAG_RAW(body, 'OrganizationName', data.OrganizationName);

  return TAG('hrxml:Recipient', attr, body);
}




function parse_hrxml_Reference(data, x) {
  POPATTR(x[1], 'type', data.type);

  tag = find_xml_local(x[2], 'PersonName', 1);
  h =  hash [];
  parse_hrxml_PersonName(h, aux1);
  data{'PersonName'} = h;
  POPTAG_RAW(x[2],  'PositionTitle', data.PositionTitle);
  for (i=1; tag = find_xml_local(x[2], 'ContactMethod', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactMethod(h, tag);
    push data{'ContactMethod'}, h;
  }
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Reference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  push body, build_hrxml_PersonName(data{'PersonName'});
  PUSHTAG_RAW(body, 'PositionTitle', data.PositionTitle);
  for d(data{'ContactMethod'}) push body,build_hrxml_ContactMethod(d);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Reference', attr, body);
}




function parse_hrxml_References(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Reference', i); ++i) {
    h =  hash [];
    parse_hrxml_Reference(h, tag);
    push data{'Reference'}, h;
  }

}

function build_hrxml_References(data) {
  attr = [];
  body = [];

  for d(data{'Reference'}) push body,build_hrxml_Reference(d);

  return TAG('hrxml:References', attr, body);
}




function parse_hrxml_RelatedOrganization(data, x) {
  POPATTR(x[1], 'relationship', data.relationship);

  POPTAG_RAW(x[2],  'OrganizationName', data.OrganizationName);
  for (i=1; tag = find_xml_local(x[2], 'OrganizationId', i); ++i) {
    h =  hash [];
    parse_hrxml_OrganizationId(h, tag);
    push data{'OrganizationId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'TaxId', i); ++i) {
    h =  hash [];
    parse_hrxml_TaxId(h, tag);
    push data{'TaxId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'LegalId', i); ++i) {
    h =  hash [];
    parse_hrxml_LegalId(h, tag);
    push data{'LegalId'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DunsNumber', i); ++i) {
    h =  hash [];
    parse_hrxml_DunsNumber(h, tag);
    push data{'DunsNumber'}, h;
  }
  POPTAG_RAW(x[2],  'IsPublicCompany', data.IsPublicCompany);
  for (i=1; tag = find_xml_local(x[2], 'Stock', i); ++i) {
    h =  hash [];
    parse_hrxml_Stock(h, tag);
    push data{'Stock'}, h;
  }
  POPTAG_RAW(x[2],  'MissionStatement', data.MissionStatement);
  POPTAG_RAW(x[2],  'ValueStatement', data.ValueStatement);
  for (i=1; tag = find_xml_local(x[2], 'InternetDomainName', i); ++i) {
    h =  hash [];
    parse_hrxml_InternetDomainName(h, tag);
    push data{'InternetDomainName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DoingBusinessAs', i); ++i) {
    h =  hash [];
    parse_hrxml_DoingBusinessAs(h, tag);
    push data{'DoingBusinessAs'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'LegalClassification', i); ++i) {
    h =  hash [];
    parse_hrxml_LegalClassification(h, tag);
    push data{'LegalClassification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'IndustryCode', i); ++i) {
    h =  hash [];
    parse_hrxml_IndustryCode(h, tag);
    push data{'IndustryCode'}, h;
  }
  POPTAG_RAW(x[2],  'Headcount', data.Headcount);
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  for (i=1; tag = find_xml_local(x[2], 'WorkSite', i); ++i) {
    h =  hash [];
    parse_hrxml_WorkSite(h, tag);
    push data{'WorkSite'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ContactInfo', i); ++i) {
    h =  hash [];
    parse_hrxml_ContactInfo(h, tag);
    push data{'ContactInfo'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RelatedOrganization', i); ++i) {
    h =  hash [];
    parse_hrxml_RelatedOrganization(h, tag);
    push data{'RelatedOrganization'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrganizationalUnit', i); ++i) {
    h =  hash [];
    parse_hrxml_OrganizationalUnit(h, tag);
    push data{'OrganizationalUnit'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_RelatedOrganization(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'relationship', data.relationship);

  PUSHTAG_RAW(body, 'OrganizationName', data.OrganizationName);
  for d(data{'OrganizationId'}) push body,build_hrxml_OrganizationId(d);
  for d(data{'TaxId'}) push body,build_hrxml_TaxId(d);
  for d(data{'LegalId'}) push body,build_hrxml_LegalId(d);
  for d(data{'DunsNumber'}) push body,build_hrxml_DunsNumber(d);
  PUSHTAG_RAW(body, 'IsPublicCompany', data.IsPublicCompany);
  for d(data{'Stock'}) push body,build_hrxml_Stock(d);
  PUSHTAG_RAW(body, 'MissionStatement', data.MissionStatement);
  PUSHTAG_RAW(body, 'ValueStatement', data.ValueStatement);
  for d(data{'InternetDomainName'}) push body,build_hrxml_InternetDomainName(d);
  for d(data{'DoingBusinessAs'}) push body,build_hrxml_DoingBusinessAs(d);
  for d(data{'LegalClassification'}) push body,build_hrxml_LegalClassification(d);
  for d(data{'IndustryCode'}) push body,build_hrxml_IndustryCode(d);
  PUSHTAG_RAW(body, 'Headcount', data.Headcount);
  push body, build_hrxml_Description(data{'Description'});
  for d(data{'WorkSite'}) push body,build_hrxml_WorkSite(d);
  for d(data{'ContactInfo'}) push body,build_hrxml_ContactInfo(d);
  for d(data{'RelatedOrganization'}) push body,build_hrxml_RelatedOrganization(d);
  for d(data{'OrganizationalUnit'}) push body,build_hrxml_OrganizationalUnit(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:RelatedOrganization', attr, body);
}




function parse_hrxml_RelatedOrganizationalUnit(data, x) {
  POPATTR(x[1], 'hierarchicalRole', data.hierarchicalRole);
  POPATTR(x[1], 'natureOfRelationship', data.natureOfRelationship);
  POPATTR(x[1], 'relationship', data.relationship);
  POPATTR(x[1], 'typeOfGroup', data.typeOfGroup);

  POPTAG_RAW(x[2],  'OrganizationalUnitName', data.OrganizationalUnitName);
  for (i=1; tag = find_xml_local(x[2], 'OrganizationalUnitId', i); ++i) {
    h =  hash [];
    parse_hrxml_OrganizationalUnitId(h, tag);
    push data{'OrganizationalUnitId'}, h;
  }
  tag = find_xml_local(x[2], 'OrganizationId', 1);
  h =  hash [];
  parse_hrxml_OrganizationId(h, aux1);
  data{'OrganizationId'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  for (i=1; tag = find_xml_local(x[2], 'IndustryCode', i); ++i) {
    h =  hash [];
    parse_hrxml_IndustryCode(h, tag);
    push data{'IndustryCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AccountingCode', i); ++i) {
    h =  hash [];
    parse_hrxml_AccountingCode(h, tag);
    push data{'AccountingCode'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'WorkSite', i); ++i) {
    h =  hash [];
    parse_hrxml_WorkSite(h, tag);
    push data{'WorkSite'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RelatedOrganizationalUnit', i); ++i) {
    h =  hash [];
    parse_hrxml_RelatedOrganizationalUnit(h, tag);
    push data{'RelatedOrganizationalUnit'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PersonMember', i); ++i) {
    h =  hash [];
    parse_hrxml_PersonMember(h, tag);
    push data{'PersonMember'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_RelatedOrganizationalUnit(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'hierarchicalRole', data.hierarchicalRole);
  PUSHATTR(attr, 'natureOfRelationship', data.natureOfRelationship);
  PUSHATTR(attr, 'relationship', data.relationship);
  PUSHATTR(attr, 'typeOfGroup', data.typeOfGroup);

  PUSHTAG_RAW(body, 'OrganizationalUnitName', data.OrganizationalUnitName);
  for d(data{'OrganizationalUnitId'}) push body,build_hrxml_OrganizationalUnitId(d);
  push body, build_hrxml_OrganizationId(data{'OrganizationId'});
  push body, build_hrxml_Description(data{'Description'});
  for d(data{'IndustryCode'}) push body,build_hrxml_IndustryCode(d);
  for d(data{'AccountingCode'}) push body,build_hrxml_AccountingCode(d);
  for d(data{'WorkSite'}) push body,build_hrxml_WorkSite(d);
  for d(data{'RelatedOrganizationalUnit'}) push body,build_hrxml_RelatedOrganizationalUnit(d);
  for d(data{'PersonMember'}) push body,build_hrxml_PersonMember(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:RelatedOrganizationalUnit', attr, body);
}




function parse_hrxml_RelatedPositionPostings(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PositionPosting', i); ++i) {
    h =  hash [];
    parse_hrxml_PositionPosting(h, tag);
    push data{'PositionPosting'}, h;
  }

}

function build_hrxml_RelatedPositionPostings(data) {
  attr = [];
  body = [];

  for d(data{'PositionPosting'}) push body,build_hrxml_PositionPosting(d);

  return TAG('hrxml:RelatedPositionPostings', attr, body);
}




function parse_hrxml_Relocation(data, x) {
  POPATTR(x[1], 'relocationConsidered', data.relocationConsidered);

  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Relocation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'relocationConsidered', data.relocationConsidered);

  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Relocation', attr, body);
}




function parse_hrxml_RelocationAssistance(data, x) {
  POPATTR(x[1], 'companyOffered', data.companyOffered);

  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_RelocationAssistance(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'companyOffered', data.companyOffered);

  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:RelocationAssistance', attr, body);
}




function parse_hrxml_RemunerationPackage(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'BasePay', i); ++i) {
    h =  hash [];
    parse_hrxml_BasePay(h, tag);
    push data{'BasePay'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OtherPay', i); ++i) {
    h =  hash [];
    parse_hrxml_OtherPay(h, tag);
    push data{'OtherPay'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Benefits', i); ++i) {
    h =  hash [];
    parse_hrxml_Benefits(h, tag);
    push data{'Benefits'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_RemunerationPackage(data) {
  attr = [];
  body = [];

  for d(data{'BasePay'}) push body,build_hrxml_BasePay(d);
  for d(data{'OtherPay'}) push body,build_hrxml_OtherPay(d);
  for d(data{'Benefits'}) push body,build_hrxml_Benefits(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:RemunerationPackage', attr, body);
}




function parse_hrxml_Resume(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);

  POPTAG_RAW(x[2],  'ResumeId', data.ResumeId);
  POPTAG_RAW(x[2],  'DistributionGuidelines', data.DistributionGuidelines);
  tag = find_xml_local(x[2], 'StructuredXMLResume', 1);
  h =  hash [];
  parse_hrxml_StructuredXMLResume(h, aux1);
  data{'StructuredXMLResume'} = h;
  tag = find_xml_local(x[2], 'NonXMLResume', 1);
  h =  hash [];
  parse_hrxml_NonXMLResume(h, aux1);
  data{'NonXMLResume'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_Resume(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);

  PUSHTAG_RAW(body, 'ResumeId', data.ResumeId);
  PUSHTAG_RAW(body, 'DistributionGuidelines', data.DistributionGuidelines);
  push body, build_hrxml_StructuredXMLResume(data{'StructuredXMLResume'});
  push body, build_hrxml_NonXMLResume(data{'NonXMLResume'});
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:Resume', attr, body);
}




function parse_hrxml_ResumeAdditionalItem(data, x) {
  POPATTR(x[1], 'type', data.type);

  tag = find_xml_local(x[2], 'EffectiveDate', 1);
  h =  hash [];
  parse_hrxml_EffectiveDate(h, aux1);
  data{'EffectiveDate'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Description', i); ++i) {
    h =  hash [];
    parse_hrxml_Description(h, tag);
    push data{'Description'}, h;
  }

}

function build_hrxml_ResumeAdditionalItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  push body, build_hrxml_EffectiveDate(data{'EffectiveDate'});
  for d(data{'Description'}) push body,build_hrxml_Description(d);

  return TAG('hrxml:ResumeAdditionalItem', attr, body);
}




function parse_hrxml_ResumeAdditionalItems(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ResumeAdditionalItem', i); ++i) {
    h =  hash [];
    parse_hrxml_ResumeAdditionalItem(h, tag);
    push data{'ResumeAdditionalItem'}, h;
  }

}

function build_hrxml_ResumeAdditionalItems(data) {
  attr = [];
  body = [];

  for d(data{'ResumeAdditionalItem'}) push body,build_hrxml_ResumeAdditionalItem(d);

  return TAG('hrxml:ResumeAdditionalItems', attr, body);
}




function parse_hrxml_RoleId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_RoleId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:RoleId', attr, body);
}




function parse_hrxml_SEPPhysicalLocation(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Name', data.Name);
  tag = find_xml_local(x[2], 'SpatialLocation', 1);
  h =  hash [];
  parse_hrxml_SpatialLocation(h, aux1);
  data{'SpatialLocation'} = h;
  for (i=1; tag = find_xml_local(x[2], 'TravelDirections', i); ++i) {
    h =  hash [];
    parse_hrxml_TravelDirections(h, tag);
    push data{'TravelDirections'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Area', i); ++i) {
    h =  hash [];
    parse_hrxml_Area(h, tag);
    push data{'Area'}, h;
  }
  tag = find_xml_local(x[2], 'PostalAddress', 1);
  h =  hash [];
  parse_hrxml_PostalAddress(h, aux1);
  data{'PostalAddress'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_SEPPhysicalLocation(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Name', data.Name);
  push body, build_hrxml_SpatialLocation(data{'SpatialLocation'});
  for d(data{'TravelDirections'}) push body,build_hrxml_TravelDirections(d);
  for d(data{'Area'}) push body,build_hrxml_Area(d);
  push body, build_hrxml_PostalAddress(data{'PostalAddress'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:SEPPhysicalLocation', attr, body);
}




function parse_hrxml_SafetyEquipment(data, x) {
  POPATTR(x[1], 'suppliedByOrganization', data.suppliedByOrganization);


}

function build_hrxml_SafetyEquipment(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'suppliedByOrganization', data.suppliedByOrganization);


  return TAG('hrxml:SafetyEquipment', attr, body);
}




function parse_hrxml_School(data, x) {
  POPATTR(x[1], 'type', data.type);

  for (i=1; tag = find_xml_local(x[2], 'InternetDomainName', i); ++i) {
    h =  hash [];
    parse_hrxml_InternetDomainName(h, tag);
    push data{'InternetDomainName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SchoolId', i); ++i) {
    h =  hash [];
    parse_hrxml_SchoolId(h, tag);
    push data{'SchoolId'}, h;
  }
  POPTAG_RAW(x[2],  'SchoolName', data.SchoolName);

}

function build_hrxml_School(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  for d(data{'InternetDomainName'}) push body,build_hrxml_InternetDomainName(d);
  for d(data{'SchoolId'}) push body,build_hrxml_SchoolId(d);
  PUSHTAG_RAW(body, 'SchoolName', data.SchoolName);

  return TAG('hrxml:School', attr, body);
}




function parse_hrxml_SchoolId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_SchoolId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:SchoolId', attr, body);
}




function parse_hrxml_SchoolOrInstitution(data, x) {
  POPATTR(x[1], 'schoolType', data.schoolType);

  POPTAG_RAW(x[2],  'SchoolName', data.SchoolName);
  for (i=1; tag = find_xml_local(x[2], 'School', i); ++i) {
    h =  hash [];
    parse_hrxml_School(h, tag);
    push data{'School'}, h;
  }
  tag = find_xml_local(x[2], 'LocationSummary', 1);
  h =  hash [];
  parse_hrxml_LocationSummary(h, aux1);
  data{'LocationSummary'} = h;
  tag = find_xml_local(x[2], 'PostalAddress', 1);
  h =  hash [];
  parse_hrxml_PostalAddress(h, aux1);
  data{'PostalAddress'} = h;
  for (i=1; tag = find_xml_local(x[2], 'OrganizationUnit', i); ++i) {
    h =  hash [];
    parse_hrxml_OrganizationUnit(h, tag);
    push data{'OrganizationUnit'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Degree', i); ++i) {
    h =  hash [];
    parse_hrxml_Degree(h, tag);
    push data{'Degree'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Major', i); ++i)
    push data{'Major'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Minor', i); ++i)
    push data{'Minor'}, tag[2];
  tag = find_xml_local(x[2], 'Measure', 1);
  h =  hash [];
  parse_hrxml_Measure(h, aux1);
  data{'Measure'} = h;
  tag = find_xml_local(x[2], 'DatesOfAttendance', 1);
  h =  hash [];
  parse_hrxml_DatesOfAttendance(h, aux1);
  data{'DatesOfAttendance'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'ISCEDInstitutionClassification', data.ISCEDInstitutionClassification);
  for (i=1; tag = find_xml_local(x[2], 'LocalInstitutionClassification', i); ++i) {
    h =  hash [];
    parse_hrxml_LocalInstitutionClassification(h, tag);
    push data{'LocalInstitutionClassification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'UserArea', i); ++i) {
    h =  hash [];
    parse_hrxml_UserArea(h, tag);
    push data{'UserArea'}, h;
  }

}

function build_hrxml_SchoolOrInstitution(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'schoolType', data.schoolType);

  PUSHTAG_RAW(body, 'SchoolName', data.SchoolName);
  for d(data{'School'}) push body,build_hrxml_School(d);
  push body, build_hrxml_LocationSummary(data{'LocationSummary'});
  push body, build_hrxml_PostalAddress(data{'PostalAddress'});
  for d(data{'OrganizationUnit'}) push body,build_hrxml_OrganizationUnit(d);
  for d(data{'Degree'}) push body,build_hrxml_Degree(d);
  for d(data{'Major'})PUSHTAG_RAW(body,'Major',d);
  for d(data{'Minor'})PUSHTAG_RAW(body,'Minor',d);
  push body, build_hrxml_Measure(data{'Measure'});
  push body, build_hrxml_DatesOfAttendance(data{'DatesOfAttendance'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'ISCEDInstitutionClassification', data.ISCEDInstitutionClassification);
  for d(data{'LocalInstitutionClassification'}) push body,build_hrxml_LocalInstitutionClassification(d);
  for d(data{'UserArea'}) push body,build_hrxml_UserArea(d);

  return TAG('hrxml:SchoolOrInstitution', attr, body);
}




function parse_hrxml_Score(data, x) {
  POPATTR(x[1], 'unitOfMeasure', data.unitOfMeasure);


}

function build_hrxml_Score(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'unitOfMeasure', data.unitOfMeasure);


  return TAG('hrxml:Score', attr, body);
}




function parse_hrxml_SearchCriteria(data, x) {

  tag = find_xml_local(x[2], 'SearchCriteriaId', 1);
  h =  hash [];
  parse_hrxml_SearchCriteriaId(h, aux1);
  data{'SearchCriteriaId'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SearchTarget', i); ++i)
    push data{'SearchTarget'}, tag[2];
  tag = find_xml_local(x[2], 'UserId', 1);
  h =  hash [];
  parse_hrxml_UserId(h, aux1);
  data{'UserId'} = h;
  POPTAG_RAW(x[2],  'SearchTimeStamp', data.SearchTimeStamp);
  POPTAG_RAW(x[2],  'SearchString', data.SearchString);
  for (i=1; tag = find_xml_local(x[2], 'SearchCriterion', i); ++i) {
    h =  hash [];
    parse_hrxml_SearchCriterion(h, tag);
    push data{'SearchCriterion'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_SearchCriteria(data) {
  attr = [];
  body = [];

  push body, build_hrxml_SearchCriteriaId(data{'SearchCriteriaId'});
  for d(data{'SearchTarget'})PUSHTAG_RAW(body,'SearchTarget',d);
  push body, build_hrxml_UserId(data{'UserId'});
  PUSHTAG_RAW(body, 'SearchTimeStamp', data.SearchTimeStamp);
  PUSHTAG_RAW(body, 'SearchString', data.SearchString);
  for d(data{'SearchCriterion'}) push body,build_hrxml_SearchCriterion(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:SearchCriteria', attr, body);
}




function parse_hrxml_SearchCriteriaId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_SearchCriteriaId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:SearchCriteriaId', attr, body);
}




function parse_hrxml_SearchCriterion(data, x) {

  POPTAG_RAW(x[2],  'CriterionName', data.CriterionName);
  POPTAG_RAW(x[2],  'CriterionValue', data.CriterionValue);
  tag = find_xml_local(x[2], 'Weight', 1);
  h =  hash [];
  parse_hrxml_Weight(h, aux1);
  data{'Weight'} = h;

}

function build_hrxml_SearchCriterion(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'CriterionName', data.CriterionName);
  PUSHTAG_RAW(body, 'CriterionValue', data.CriterionValue);
  push body, build_hrxml_Weight(data{'Weight'});

  return TAG('hrxml:SearchCriterion', attr, body);
}




function parse_hrxml_SearchRelevanceScore(data, x) {
  POPATTR(x[1], 'unitOfMeasure', data.unitOfMeasure);


}

function build_hrxml_SearchRelevanceScore(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'unitOfMeasure', data.unitOfMeasure);


  return TAG('hrxml:SearchRelevanceScore', attr, body);
}




function parse_hrxml_SearchResult(data, x) {

  tag = find_xml_local(x[2], 'SearchResultId', 1);
  h =  hash [];
  parse_hrxml_SearchResultId(h, aux1);
  data{'SearchResultId'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SearchTarget', i); ++i)
    push data{'SearchTarget'}, tag[2];
  tag = find_xml_local(x[2], 'UserId', 1);
  h =  hash [];
  parse_hrxml_UserId(h, aux1);
  data{'UserId'} = h;
  POPTAG_RAW(x[2],  'SearchTimeStamp', data.SearchTimeStamp);
  tag = find_xml_local(x[2], 'MatchedObjectId', 1);
  h =  hash [];
  parse_hrxml_MatchedObjectId(h, aux1);
  data{'MatchedObjectId'} = h;
  tag = find_xml_local(x[2], 'SearchRelevanceScore', 1);
  h =  hash [];
  parse_hrxml_SearchRelevanceScore(h, aux1);
  data{'SearchRelevanceScore'} = h;
  POPTAG_RAW(x[2],  'SearchRelevanceRank', data.SearchRelevanceRank);
  POPTAG_RAW(x[2],  'SearchResultCount', data.SearchResultCount);
  tag = find_xml_local(x[2], 'RankedSearchResults', 1);
  h =  hash [];
  parse_hrxml_RankedSearchResults(h, aux1);
  data{'RankedSearchResults'} = h;
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_SearchResult(data) {
  attr = [];
  body = [];

  push body, build_hrxml_SearchResultId(data{'SearchResultId'});
  for d(data{'SearchTarget'})PUSHTAG_RAW(body,'SearchTarget',d);
  push body, build_hrxml_UserId(data{'UserId'});
  PUSHTAG_RAW(body, 'SearchTimeStamp', data.SearchTimeStamp);
  push body, build_hrxml_MatchedObjectId(data{'MatchedObjectId'});
  push body, build_hrxml_SearchRelevanceScore(data{'SearchRelevanceScore'});
  PUSHTAG_RAW(body, 'SearchRelevanceRank', data.SearchRelevanceRank);
  PUSHTAG_RAW(body, 'SearchResultCount', data.SearchResultCount);
  push body, build_hrxml_RankedSearchResults(data{'RankedSearchResults'});
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:SearchResult', attr, body);
}




function parse_hrxml_SearchResultId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_SearchResultId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:SearchResultId', attr, body);
}




function parse_hrxml_SecurityCredential(data, x) {

  POPTAG_RAW(x[2],  'Name', data.Name);
  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  tag = find_xml_local(x[2], 'IssuingAuthority', 1);
  h =  hash [];
  parse_hrxml_IssuingAuthority(h, aux1);
  data{'IssuingAuthority'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  tag = find_xml_local(x[2], 'EffectiveDate', 1);
  h =  hash [];
  parse_hrxml_EffectiveDate(h, aux1);
  data{'EffectiveDate'} = h;

}

function build_hrxml_SecurityCredential(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Name', data.Name);
  push body, build_hrxml_Id(data{'Id'});
  push body, build_hrxml_IssuingAuthority(data{'IssuingAuthority'});
  push body, build_hrxml_Description(data{'Description'});
  push body, build_hrxml_EffectiveDate(data{'EffectiveDate'});

  return TAG('hrxml:SecurityCredential', attr, body);
}




function parse_hrxml_SecurityCredentials(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SecurityCredential', i); ++i) {
    h =  hash [];
    parse_hrxml_SecurityCredential(h, tag);
    push data{'SecurityCredential'}, h;
  }

}

function build_hrxml_SecurityCredentials(data) {
  attr = [];
  body = [];

  for d(data{'SecurityCredential'}) push body,build_hrxml_SecurityCredential(d);

  return TAG('hrxml:SecurityCredentials', attr, body);
}




function parse_hrxml_ServiceDetail(data, x) {
  POPATTR(x[1], 'branch', data.branch);

  POPTAG_RAW(x[2],  'UnitOrDivision', data.UnitOrDivision);
  tag = find_xml_local(x[2], 'RankAchieved', 1);
  h =  hash [];
  parse_hrxml_RankAchieved(h, aux1);
  data{'RankAchieved'} = h;
  tag = find_xml_local(x[2], 'DatesOfService', 1);
  h =  hash [];
  parse_hrxml_DatesOfService(h, aux1);
  data{'DatesOfService'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Campaign', i); ++i)
    push data{'Campaign'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AreaOfExpertise', i); ++i)
    push data{'AreaOfExpertise'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'RecognitionAchieved', i); ++i)
    push data{'RecognitionAchieved'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'DisciplinaryAction', i); ++i)
    push data{'DisciplinaryAction'}, tag[2];
  POPTAG_RAW(x[2],  'DischargeStatus', data.DischargeStatus);
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_ServiceDetail(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'branch', data.branch);

  PUSHTAG_RAW(body, 'UnitOrDivision', data.UnitOrDivision);
  push body, build_hrxml_RankAchieved(data{'RankAchieved'});
  push body, build_hrxml_DatesOfService(data{'DatesOfService'});
  for d(data{'Campaign'})PUSHTAG_RAW(body,'Campaign',d);
  for d(data{'AreaOfExpertise'})PUSHTAG_RAW(body,'AreaOfExpertise',d);
  for d(data{'RecognitionAchieved'})PUSHTAG_RAW(body,'RecognitionAchieved',d);
  for d(data{'DisciplinaryAction'})PUSHTAG_RAW(body,'DisciplinaryAction',d);
  PUSHTAG_RAW(body, 'DischargeStatus', data.DischargeStatus);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:ServiceDetail', attr, body);
}




function parse_hrxml_ServiceNumber(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_ServiceNumber(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:ServiceNumber', attr, body);
}




function parse_hrxml_Shift(data, x) {
  POPATTR(x[1], 'shiftPeriod', data.shiftPeriod);

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Name', data.Name);
  POPTAG_RAW(x[2],  'Hours', data.Hours);
  POPTAG_RAW(x[2],  'StartTime', data.StartTime);
  POPTAG_RAW(x[2],  'EndTime', data.EndTime);
  POPTAG_RAW(x[2],  'PayTypeHours', data.PayTypeHours);
  POPTAG_RAW(x[2],  'Comments', data.Comments);

}

function build_hrxml_Shift(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'shiftPeriod', data.shiftPeriod);

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Name', data.Name);
  PUSHTAG_RAW(body, 'Hours', data.Hours);
  PUSHTAG_RAW(body, 'StartTime', data.StartTime);
  PUSHTAG_RAW(body, 'EndTime', data.EndTime);
  PUSHTAG_RAW(body, 'PayTypeHours', data.PayTypeHours);
  PUSHTAG_RAW(body, 'Comments', data.Comments);

  return TAG('hrxml:Shift', attr, body);
}




function parse_hrxml_SourceType(data, x) {

  POPTAG_RAW(x[2],  'StandardValue', data.StandardValue);
  POPTAG_RAW(x[2],  'NonStandardValue', data.NonStandardValue);

}

function build_hrxml_SourceType(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'StandardValue', data.StandardValue);
  PUSHTAG_RAW(body, 'NonStandardValue', data.NonStandardValue);

  return TAG('hrxml:SourceType', attr, body);
}




function parse_hrxml_SpatialLocation(data, x) {

  tag = find_xml_local(x[2], 'Latitude', 1);
  h =  hash [];
  parse_hrxml_Latitude(h, aux1);
  data{'Latitude'} = h;
  tag = find_xml_local(x[2], 'Longitude', 1);
  h =  hash [];
  parse_hrxml_Longitude(h, aux1);
  data{'Longitude'} = h;
  POPTAG_RAW(x[2],  'Altitude', data.Altitude);
  POPTAG_RAW(x[2],  'AltitudeMeanSeaLevel', data.AltitudeMeanSeaLevel);
  tag = find_xml_local(x[2], 'HorizontalAccuracy', 1);
  h =  hash [];
  parse_hrxml_HorizontalAccuracy(h, aux1);
  data{'HorizontalAccuracy'} = h;
  tag = find_xml_local(x[2], 'VerticalAccuracy', 1);
  h =  hash [];
  parse_hrxml_VerticalAccuracy(h, aux1);
  data{'VerticalAccuracy'} = h;

}

function build_hrxml_SpatialLocation(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Latitude(data{'Latitude'});
  push body, build_hrxml_Longitude(data{'Longitude'});
  PUSHTAG_RAW(body, 'Altitude', data.Altitude);
  PUSHTAG_RAW(body, 'AltitudeMeanSeaLevel', data.AltitudeMeanSeaLevel);
  push body, build_hrxml_HorizontalAccuracy(data{'HorizontalAccuracy'});
  push body, build_hrxml_VerticalAccuracy(data{'VerticalAccuracy'});

  return TAG('hrxml:SpatialLocation', attr, body);
}




function parse_hrxml_SpeakingEvent(data, x) {
  POPATTR(x[1], 'type', data.type);

  POPTAG_RAW(x[2],  'Title', data.Title);
  POPTAG_RAW(x[2],  'Role', data.Role);
  tag = find_xml_local(x[2], 'StartDate', 1);
  h =  hash [];
  parse_hrxml_StartDate(h, aux1);
  data{'StartDate'} = h;
  tag = find_xml_local(x[2], 'EndDate', 1);
  h =  hash [];
  parse_hrxml_EndDate(h, aux1);
  data{'EndDate'} = h;
  POPTAG_RAW(x[2],  'EventName', data.EventName);
  POPTAG_RAW(x[2],  'EventType', data.EventType);
  POPTAG_RAW(x[2],  'Location', data.Location);
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AffiliatedOrganization', i); ++i)
    push data{'AffiliatedOrganization'}, tag[2];
  POPTAG_RAW(x[2],  'Link', data.Link);

}

function build_hrxml_SpeakingEvent(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'type', data.type);

  PUSHTAG_RAW(body, 'Title', data.Title);
  PUSHTAG_RAW(body, 'Role', data.Role);
  push body, build_hrxml_StartDate(data{'StartDate'});
  push body, build_hrxml_EndDate(data{'EndDate'});
  PUSHTAG_RAW(body, 'EventName', data.EventName);
  PUSHTAG_RAW(body, 'EventType', data.EventType);
  PUSHTAG_RAW(body, 'Location', data.Location);
  push body, build_hrxml_Description(data{'Description'});
  for d(data{'AffiliatedOrganization'})PUSHTAG_RAW(body,'AffiliatedOrganization',d);
  PUSHTAG_RAW(body, 'Link', data.Link);

  return TAG('hrxml:SpeakingEvent', attr, body);
}




function parse_hrxml_SpeakingEventsHistory(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SpeakingEvent', i); ++i) {
    h =  hash [];
    parse_hrxml_SpeakingEvent(h, tag);
    push data{'SpeakingEvent'}, h;
  }

}

function build_hrxml_SpeakingEventsHistory(data) {
  attr = [];
  body = [];

  for d(data{'SpeakingEvent'}) push body,build_hrxml_SpeakingEvent(d);

  return TAG('hrxml:SpeakingEventsHistory', attr, body);
}




function parse_hrxml_SpecifiedCompetencyReference(data, x) {

  tag = find_xml_local(x[2], 'CompetencyId', 1);
  h =  hash [];
  parse_hrxml_CompetencyId(h, aux1);
  data{'CompetencyId'} = h;
  POPTAG_RAW(x[2],  'ProficencyLevel', data.ProficencyLevel);

}

function build_hrxml_SpecifiedCompetencyReference(data) {
  attr = [];
  body = [];

  push body, build_hrxml_CompetencyId(data{'CompetencyId'});
  PUSHTAG_RAW(body, 'ProficencyLevel', data.ProficencyLevel);

  return TAG('hrxml:SpecifiedCompetencyReference', attr, body);
}




function parse_hrxml_StartDate(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_StartDate(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:StartDate', attr, body);
}




function parse_hrxml_StartingCompensation(data, x) {
  POPATTR(x[1], 'currency', data.currency);
  POPATTR(x[1], 'intervalType', data.intervalType);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);


}

function build_hrxml_StartingCompensation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'currency', data.currency);
  PUSHATTR(attr, 'intervalType', data.intervalType);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);


  return TAG('hrxml:StartingCompensation', attr, body);
}




function parse_hrxml_Status(data, x) {
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);


}

function build_hrxml_Status(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);


  return TAG('hrxml:Status', attr, body);
}




function parse_hrxml_Stock(data, x) {

  tag = find_xml_local(x[2], 'Id', 1);
  h =  hash [];
  parse_hrxml_Id(h, aux1);
  data{'Id'} = h;
  POPTAG_RAW(x[2],  'Symbol', data.Symbol);
  POPTAG_RAW(x[2],  'Exchange', data.Exchange);

}

function build_hrxml_Stock(data) {
  attr = [];
  body = [];

  push body, build_hrxml_Id(data{'Id'});
  PUSHTAG_RAW(body, 'Symbol', data.Symbol);
  PUSHTAG_RAW(body, 'Exchange', data.Exchange);

  return TAG('hrxml:Stock', attr, body);
}




function parse_hrxml_StringValue(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'maxValue', data.maxValue);
  POPATTR(x[1], 'minValue', data.minValue);


}

function build_hrxml_StringValue(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'maxValue', data.maxValue);
  PUSHATTR(attr, 'minValue', data.minValue);


  return TAG('hrxml:StringValue', attr, body);
}




function parse_hrxml_StructuredXMLResume(data, x) {

  tag = find_xml_local(x[2], 'ContactInfo', 1);
  h =  hash [];
  parse_hrxml_ContactInfo(h, aux1);
  data{'ContactInfo'} = h;
  POPTAG_RAW(x[2],  'ExecutiveSummary', data.ExecutiveSummary);
  POPTAG_RAW(x[2],  'Objective', data.Objective);
  tag = find_xml_local(x[2], 'EmploymentHistory', 1);
  h =  hash [];
  parse_hrxml_EmploymentHistory(h, aux1);
  data{'EmploymentHistory'} = h;
  tag = find_xml_local(x[2], 'EducationHistory', 1);
  h =  hash [];
  parse_hrxml_EducationHistory(h, aux1);
  data{'EducationHistory'} = h;
  tag = find_xml_local(x[2], 'LicensesAndCertifications', 1);
  h =  hash [];
  parse_hrxml_LicensesAndCertifications(h, aux1);
  data{'LicensesAndCertifications'} = h;
  tag = find_xml_local(x[2], 'MilitaryHistory', 1);
  h =  hash [];
  parse_hrxml_MilitaryHistory(h, aux1);
  data{'MilitaryHistory'} = h;
  tag = find_xml_local(x[2], 'PatentHistory', 1);
  h =  hash [];
  parse_hrxml_PatentHistory(h, aux1);
  data{'PatentHistory'} = h;
  tag = find_xml_local(x[2], 'PublicationHistory', 1);
  h =  hash [];
  parse_hrxml_PublicationHistory(h, aux1);
  data{'PublicationHistory'} = h;
  tag = find_xml_local(x[2], 'SpeakingEventsHistory', 1);
  h =  hash [];
  parse_hrxml_SpeakingEventsHistory(h, aux1);
  data{'SpeakingEventsHistory'} = h;
  tag = find_xml_local(x[2], 'Qualifications', 1);
  h =  hash [];
  parse_hrxml_Qualifications(h, aux1);
  data{'Qualifications'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Languages', i); ++i) {
    h =  hash [];
    parse_hrxml_Languages(h, tag);
    push data{'Languages'}, h;
  }
  tag = find_xml_local(x[2], 'Achievements', 1);
  h =  hash [];
  parse_hrxml_Achievements(h, aux1);
  data{'Achievements'} = h;
  tag = find_xml_local(x[2], 'Associations', 1);
  h =  hash [];
  parse_hrxml_Associations(h, aux1);
  data{'Associations'} = h;
  tag = find_xml_local(x[2], 'References', 1);
  h =  hash [];
  parse_hrxml_References(h, aux1);
  data{'References'} = h;
  tag = find_xml_local(x[2], 'SecurityCredentials', 1);
  h =  hash [];
  parse_hrxml_SecurityCredentials(h, aux1);
  data{'SecurityCredentials'} = h;
  tag = find_xml_local(x[2], 'ResumeAdditionalItems', 1);
  h =  hash [];
  parse_hrxml_ResumeAdditionalItems(h, aux1);
  data{'ResumeAdditionalItems'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SupportingMaterials', i); ++i) {
    h =  hash [];
    parse_hrxml_SupportingMaterials(h, tag);
    push data{'SupportingMaterials'}, h;
  }
  tag = find_xml_local(x[2], 'ProfessionalAssociations', 1);
  h =  hash [];
  parse_hrxml_ProfessionalAssociations(h, aux1);
  data{'ProfessionalAssociations'} = h;
  POPTAG_RAW(x[2],  'Comments', data.Comments);
  POPTAG_RAW(x[2],  'RevisionDate', data.RevisionDate);

}

function build_hrxml_StructuredXMLResume(data) {
  attr = [];
  body = [];

  push body, build_hrxml_ContactInfo(data{'ContactInfo'});
  PUSHTAG_RAW(body, 'ExecutiveSummary', data.ExecutiveSummary);
  PUSHTAG_RAW(body, 'Objective', data.Objective);
  push body, build_hrxml_EmploymentHistory(data{'EmploymentHistory'});
  push body, build_hrxml_EducationHistory(data{'EducationHistory'});
  push body, build_hrxml_LicensesAndCertifications(data{'LicensesAndCertifications'});
  push body, build_hrxml_MilitaryHistory(data{'MilitaryHistory'});
  push body, build_hrxml_PatentHistory(data{'PatentHistory'});
  push body, build_hrxml_PublicationHistory(data{'PublicationHistory'});
  push body, build_hrxml_SpeakingEventsHistory(data{'SpeakingEventsHistory'});
  push body, build_hrxml_Qualifications(data{'Qualifications'});
  for d(data{'Languages'}) push body,build_hrxml_Languages(d);
  push body, build_hrxml_Achievements(data{'Achievements'});
  push body, build_hrxml_Associations(data{'Associations'});
  push body, build_hrxml_References(data{'References'});
  push body, build_hrxml_SecurityCredentials(data{'SecurityCredentials'});
  push body, build_hrxml_ResumeAdditionalItems(data{'ResumeAdditionalItems'});
  for d(data{'SupportingMaterials'}) push body,build_hrxml_SupportingMaterials(d);
  push body, build_hrxml_ProfessionalAssociations(data{'ProfessionalAssociations'});
  PUSHTAG_RAW(body, 'Comments', data.Comments);
  PUSHTAG_RAW(body, 'RevisionDate', data.RevisionDate);

  return TAG('hrxml:StructuredXMLResume', attr, body);
}




function parse_hrxml_SupplierId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_SupplierId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:SupplierId', attr, body);
}




function parse_hrxml_SupportingMaterials(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Link', i); ++i)
    push data{'Link'}, tag[2];
  tag = find_xml_local(x[2], 'AttachmentReference', 1);
  h =  hash [];
  parse_hrxml_AttachmentReference(h, aux1);
  data{'AttachmentReference'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_SupportingMaterials(data) {
  attr = [];
  body = [];

  for d(data{'Link'})PUSHTAG_RAW(body,'Link',d);
  push body, build_hrxml_AttachmentReference(data{'AttachmentReference'});
  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:SupportingMaterials', attr, body);
}




function parse_hrxml_TTYTDD(data, x) {

  POPTAG_RAW(x[2],  'FormattedNumber', data.FormattedNumber);

}

function build_hrxml_TTYTDD(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'FormattedNumber', data.FormattedNumber);

  return TAG('hrxml:TTYTDD', attr, body);
}




function parse_hrxml_TaxId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_TaxId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:TaxId', attr, body);
}




function parse_hrxml_TaxonomyId(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'idOwner', data.idOwner);


}

function build_hrxml_TaxonomyId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'idOwner', data.idOwner);


  return TAG('hrxml:TaxonomyId', attr, body);
}




function parse_hrxml_TaxonomyName(data, x) {
  POPATTR(x[1], 'version', data.version);


}

function build_hrxml_TaxonomyName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'version', data.version);


  return TAG('hrxml:TaxonomyName', attr, body);
}




function parse_hrxml_Telephone(data, x) {

  POPTAG_RAW(x[2],  'FormattedNumber', data.FormattedNumber);

}

function build_hrxml_Telephone(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'FormattedNumber', data.FormattedNumber);

  return TAG('hrxml:Telephone', attr, body);
}




function parse_hrxml_TermOfNotice(data, x) {

  POPTAG_RAW(x[2],  'Value', data.Value);
  POPTAG_RAW(x[2],  'Interval', data.Interval);

}

function build_hrxml_TermOfNotice(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Value', data.Value);
  PUSHTAG_RAW(body, 'Interval', data.Interval);

  return TAG('hrxml:TermOfNotice', attr, body);
}




function parse_hrxml_TimeMax(data, x) {
  POPATTR(x[1], 'unitOfMeasure', data.unitOfMeasure);


}

function build_hrxml_TimeMax(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'unitOfMeasure', data.unitOfMeasure);


  return TAG('hrxml:TimeMax', attr, body);
}




function parse_hrxml_TimeOffAllowance(data, x) {
  POPATTR(x[1], 'timeOffType', data.timeOffType);

  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;

}

function build_hrxml_TimeOffAllowance(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'timeOffType', data.timeOffType);

  push body, build_hrxml_Description(data{'Description'});

  return TAG('hrxml:TimeOffAllowance', attr, body);
}




function parse_hrxml_Travel(data, x) {

  POPTAG_RAW(x[2],  'Applicable', data.Applicable);
  POPTAG_RAW(x[2],  'TravelFrequency', data.TravelFrequency);
  POPTAG_RAW(x[2],  'TravelConsiderations', data.TravelConsiderations);

}

function build_hrxml_Travel(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Applicable', data.Applicable);
  PUSHTAG_RAW(body, 'TravelFrequency', data.TravelFrequency);
  PUSHTAG_RAW(body, 'TravelConsiderations', data.TravelConsiderations);

  return TAG('hrxml:Travel', attr, body);
}




function parse_hrxml_TravelDirections(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_hrxml_TravelDirections(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('hrxml:TravelDirections', attr, body);
}




function parse_hrxml_UserArea(data, x) {


}

function build_hrxml_UserArea(data) {
  attr = [];
  body = [];


  return TAG('hrxml:UserArea', attr, body);
}




function parse_hrxml_UserId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_UserId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:UserId', attr, body);
}




function parse_hrxml_ValidFrom(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_ValidFrom(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:ValidFrom', attr, body);
}




function parse_hrxml_ValidTo(data, x) {
  POPATTR(x[1], 'dateDescription', data.dateDescription);

  POPTAG_RAW(x[2],  'AnyDate', data.AnyDate);
  POPTAG_RAW(x[2],  'YearMonth', data.YearMonth);
  POPTAG_RAW(x[2],  'Year', data.Year);
  POPTAG_RAW(x[2],  'MonthDay', data.MonthDay);
  POPTAG_RAW(x[2],  'StringDate', data.StringDate);

}

function build_hrxml_ValidTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'dateDescription', data.dateDescription);

  PUSHTAG_RAW(body, 'AnyDate', data.AnyDate);
  PUSHTAG_RAW(body, 'YearMonth', data.YearMonth);
  PUSHTAG_RAW(body, 'Year', data.Year);
  PUSHTAG_RAW(body, 'MonthDay', data.MonthDay);
  PUSHTAG_RAW(body, 'StringDate', data.StringDate);

  return TAG('hrxml:ValidTo', attr, body);
}




function parse_hrxml_Verification(data, x) {

  tag = find_xml_local(x[2], 'ContactInfo', 1);
  h =  hash [];
  parse_hrxml_ContactInfo(h, aux1);
  data{'ContactInfo'} = h;
  POPTAG_RAW(x[2],  'ReasonForLeaving', data.ReasonForLeaving);
  POPTAG_RAW(x[2],  'PermissionToContact', data.PermissionToContact);
  POPTAG_RAW(x[2],  'VerifyEmployment', data.VerifyEmployment);
  POPTAG_RAW(x[2],  'EligibleForRehire', data.EligibleForRehire);
  POPTAG_RAW(x[2],  'AttendanceRating', data.AttendanceRating);
  POPTAG_RAW(x[2],  'OverallPerformanceRating', data.OverallPerformanceRating);
  for (i=1; tag = find_xml_local(x[2], 'QuestionAnswerPair', i); ++i)
    push data{'QuestionAnswerPair'}, tag[2];

}

function build_hrxml_Verification(data) {
  attr = [];
  body = [];

  push body, build_hrxml_ContactInfo(data{'ContactInfo'});
  PUSHTAG_RAW(body, 'ReasonForLeaving', data.ReasonForLeaving);
  PUSHTAG_RAW(body, 'PermissionToContact', data.PermissionToContact);
  PUSHTAG_RAW(body, 'VerifyEmployment', data.VerifyEmployment);
  PUSHTAG_RAW(body, 'EligibleForRehire', data.EligibleForRehire);
  PUSHTAG_RAW(body, 'AttendanceRating', data.AttendanceRating);
  PUSHTAG_RAW(body, 'OverallPerformanceRating', data.OverallPerformanceRating);
  for d(data{'QuestionAnswerPair'})PUSHTAG_RAW(body,'QuestionAnswerPair',d);

  return TAG('hrxml:Verification', attr, body);
}




function parse_hrxml_VerticalAccuracy(data, x) {


}

function build_hrxml_VerticalAccuracy(data) {
  attr = [];
  body = [];


  return TAG('hrxml:VerticalAccuracy', attr, body);
}




function parse_hrxml_VisaStatus(data, x) {
  POPATTR(x[1], 'countryCode', data.countryCode);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);


}

function build_hrxml_VisaStatus(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'countryCode', data.countryCode);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);


  return TAG('hrxml:VisaStatus', attr, body);
}




function parse_hrxml_Weight(data, x) {
  POPATTR(x[1], 'description', data.description);
  POPATTR(x[1], 'interval', data.interval);
  POPATTR(x[1], 'maxValue', data.maxValue);
  POPATTR(x[1], 'minValue', data.minValue);


}

function build_hrxml_Weight(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'description', data.description);
  PUSHATTR(attr, 'interval', data.interval);
  PUSHATTR(attr, 'maxValue', data.maxValue);
  PUSHATTR(attr, 'minValue', data.minValue);


  return TAG('hrxml:Weight', attr, body);
}




function parse_hrxml_WorkSite(data, x) {

  POPTAG_RAW(x[2],  'WorkSiteName', data.WorkSiteName);
  tag = find_xml_local(x[2], 'WorkSiteId', 1);
  h =  hash [];
  parse_hrxml_WorkSiteId(h, aux1);
  data{'WorkSiteId'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Details', i); ++i) {
    h =  hash [];
    parse_hrxml_Details(h, tag);
    push data{'Details'}, h;
  }
  tag = find_xml_local(x[2], 'PostalAddress', 1);
  h =  hash [];
  parse_hrxml_PostalAddress(h, aux1);
  data{'PostalAddress'} = h;
  for (i=1; tag = find_xml_local(x[2], 'TravelDirections', i); ++i) {
    h =  hash [];
    parse_hrxml_TravelDirections(h, tag);
    push data{'TravelDirections'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ParkingInstructions', i); ++i) {
    h =  hash [];
    parse_hrxml_ParkingInstructions(h, tag);
    push data{'ParkingInstructions'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'WorkSiteEnvironment', i); ++i) {
    h =  hash [];
    parse_hrxml_WorkSiteEnvironment(h, tag);
    push data{'WorkSiteEnvironment'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_WorkSite(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'WorkSiteName', data.WorkSiteName);
  push body, build_hrxml_WorkSiteId(data{'WorkSiteId'});
  for d(data{'Details'}) push body,build_hrxml_Details(d);
  push body, build_hrxml_PostalAddress(data{'PostalAddress'});
  for d(data{'TravelDirections'}) push body,build_hrxml_TravelDirections(d);
  for d(data{'ParkingInstructions'}) push body,build_hrxml_ParkingInstructions(d);
  for d(data{'WorkSiteEnvironment'}) push body,build_hrxml_WorkSiteEnvironment(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:WorkSite', attr, body);
}




function parse_hrxml_WorkSiteEnvironment(data, x) {

  POPTAG_RAW(x[2],  'EnvironmentName', data.EnvironmentName);
  tag = find_xml_local(x[2], 'EnvironmentId', 1);
  h =  hash [];
  parse_hrxml_EnvironmentId(h, aux1);
  data{'EnvironmentId'} = h;
  tag = find_xml_local(x[2], 'WorkSiteId', 1);
  h =  hash [];
  parse_hrxml_WorkSiteId(h, aux1);
  data{'WorkSiteId'} = h;
  tag = find_xml_local(x[2], 'Description', 1);
  h =  hash [];
  parse_hrxml_Description(h, aux1);
  data{'Description'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Considerations', i); ++i) {
    h =  hash [];
    parse_hrxml_Considerations(h, tag);
    push data{'Considerations'}, h;
  }
  tag = find_xml_local(x[2], 'UserArea', 1);
  h =  hash [];
  parse_hrxml_UserArea(h, aux1);
  data{'UserArea'} = h;

}

function build_hrxml_WorkSiteEnvironment(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'EnvironmentName', data.EnvironmentName);
  push body, build_hrxml_EnvironmentId(data{'EnvironmentId'});
  push body, build_hrxml_WorkSiteId(data{'WorkSiteId'});
  push body, build_hrxml_Description(data{'Description'});
  for d(data{'Considerations'}) push body,build_hrxml_Considerations(d);
  push body, build_hrxml_UserArea(data{'UserArea'});

  return TAG('hrxml:WorkSiteEnvironment', attr, body);
}




function parse_hrxml_WorkSiteId(data, x) {
  POPATTR(x[1], 'idOwner', data.idOwner);
  POPATTR(x[1], 'validFrom', data.validFrom);
  POPATTR(x[1], 'validTo', data.validTo);

  for (i=1; tag = find_xml_local(x[2], 'IdValue', i); ++i) {
    h =  hash [];
    parse_hrxml_IdValue(h, tag);
    push data{'IdValue'}, h;
  }

}

function build_hrxml_WorkSiteId(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'idOwner', data.idOwner);
  PUSHATTR(attr, 'validFrom', data.validFrom);
  PUSHATTR(attr, 'validTo', data.validTo);

  for d(data{'IdValue'}) push body,build_hrxml_IdValue(d);

  return TAG('hrxml:WorkSiteId', attr, body);
}


/* EOF -- c/zx-hrxml.ds */
