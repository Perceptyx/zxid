/* c/zx-di.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_di_EndpointContext(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Address', i); ++i)
    push data{'Address'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Framework', i); ++i) {
    h =  hash [];
    parse_sbf_Framework(h, tag);
    push data{'Framework'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i)
    push data{'Action'}, tag[2];

}

function build_di_EndpointContext(data) {
  attr = [];
  body = [];

  for d(data{'Address'})PUSHTAG_RAW(body,'Address',d);
  for d(data{'Framework'}) push body,build_sbf_Framework(d);
  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Action'})PUSHTAG_RAW(body,'Action',d);

  return TAG('di:EndpointContext', attr, body);
}




function parse_di_Framework(data, x) {
  POPATTR(x[1], 'version', data.version);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_di_Framework(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'version', data.version);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('di:Framework', attr, body);
}




function parse_di_Keys(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }

}

function build_di_Keys(data) {
  attr = [];
  body = [];

  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);

  return TAG('di:Keys', attr, body);
}




function parse_di_Options(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Option', i); ++i)
    push data{'Option'}, tag[2];

}

function build_di_Options(data) {
  attr = [];
  body = [];

  for d(data{'Option'})PUSHTAG_RAW(body,'Option',d);

  return TAG('di:Options', attr, body);
}




function parse_di_Query(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'RequestedService', i); ++i) {
    h =  hash [];
    parse_di_RequestedService(h, tag);
    push data{'RequestedService'}, h;
  }

}

function build_di_Query(data) {
  attr = [];
  body = [];

  for d(data{'RequestedService'}) push body,build_di_RequestedService(d);

  return TAG('di:Query', attr, body);
}




function parse_di_QueryResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EndpointReference', i); ++i) {
    h =  hash [];
    parse_a_EndpointReference(h, tag);
    push data{'EndpointReference'}, h;
  }

}

function build_di_QueryResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'EndpointReference'}) push body,build_a_EndpointReference(d);

  return TAG('di:QueryResponse', attr, body);
}




function parse_di_RequestedService(data, x) {
  POPATTR(x[1], 'reqID', data.reqID);
  POPATTR(x[1], 'resultsType', data.resultsType);

  for (i=1; tag = find_xml_local(x[2], 'ServiceType', i); ++i)
    push data{'ServiceType'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'ProviderID', i); ++i)
    push data{'ProviderID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Options', i); ++i) {
    h =  hash [];
    parse_di_Options(h, tag);
    push data{'Options'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Framework', i); ++i) {
    h =  hash [];
    parse_di_Framework(h, tag);
    push data{'Framework'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i)
    push data{'Action'}, tag[2];

}

function build_di_RequestedService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqID', data.reqID);
  PUSHATTR(attr, 'resultsType', data.resultsType);

  for d(data{'ServiceType'})PUSHTAG_RAW(body,'ServiceType',d);
  for d(data{'ProviderID'})PUSHTAG_RAW(body,'ProviderID',d);
  for d(data{'Options'}) push body,build_di_Options(d);
  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Framework'}) push body,build_di_Framework(d);
  for d(data{'Action'})PUSHTAG_RAW(body,'Action',d);

  return TAG('di:RequestedService', attr, body);
}




function parse_di_SecurityContext(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Token', i); ++i) {
    h =  hash [];
    parse_sec_Token(h, tag);
    push data{'Token'}, h;
  }

}

function build_di_SecurityContext(data) {
  attr = [];
  body = [];

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Token'}) push body,build_sec_Token(d);

  return TAG('di:SecurityContext', attr, body);
}




function parse_di_ServiceContext(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ServiceType', i); ++i)
    push data{'ServiceType'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Options', i); ++i) {
    h =  hash [];
    parse_di_Options(h, tag);
    push data{'Options'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EndpointContext', i); ++i) {
    h =  hash [];
    parse_di_EndpointContext(h, tag);
    push data{'EndpointContext'}, h;
  }

}

function build_di_ServiceContext(data) {
  attr = [];
  body = [];

  for d(data{'ServiceType'})PUSHTAG_RAW(body,'ServiceType',d);
  for d(data{'Options'}) push body,build_di_Options(d);
  for d(data{'EndpointContext'}) push body,build_di_EndpointContext(d);

  return TAG('di:ServiceContext', attr, body);
}




function parse_di_SvcMD(data, x) {
  POPATTR(x[1], 'svcMDID', data.svcMDID);

  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  for (i=1; tag = find_xml_local(x[2], 'ServiceContext', i); ++i) {
    h =  hash [];
    parse_di_ServiceContext(h, tag);
    push data{'ServiceContext'}, h;
  }

}

function build_di_SvcMD(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'svcMDID', data.svcMDID);

  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  for d(data{'ServiceContext'}) push body,build_di_ServiceContext(d);

  return TAG('di:SvcMD', attr, body);
}




function parse_di_SvcMDAssociationAdd(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDAssociationAdd(data) {
  attr = [];
  body = [];

  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDAssociationAdd', attr, body);
}




function parse_di_SvcMDAssociationAddResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_di_SvcMDAssociationAddResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('di:SvcMDAssociationAddResponse', attr, body);
}




function parse_di_SvcMDAssociationDelete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDAssociationDelete(data) {
  attr = [];
  body = [];

  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDAssociationDelete', attr, body);
}




function parse_di_SvcMDAssociationDeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_di_SvcMDAssociationDeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('di:SvcMDAssociationDeleteResponse', attr, body);
}




function parse_di_SvcMDAssociationQuery(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDAssociationQuery(data) {
  attr = [];
  body = [];

  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDAssociationQuery', attr, body);
}




function parse_di_SvcMDAssociationQueryResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDAssociationQueryResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDAssociationQueryResponse', attr, body);
}




function parse_di_SvcMDDelete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDDelete(data) {
  attr = [];
  body = [];

  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDDelete', attr, body);
}




function parse_di_SvcMDDeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_di_SvcMDDeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('di:SvcMDDeleteResponse', attr, body);
}




function parse_di_SvcMDQuery(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];

}

function build_di_SvcMDQuery(data) {
  attr = [];
  body = [];

  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);

  return TAG('di:SvcMDQuery', attr, body);
}




function parse_di_SvcMDQueryResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SvcMD', i); ++i) {
    h =  hash [];
    parse_di_SvcMD(h, tag);
    push data{'SvcMD'}, h;
  }

}

function build_di_SvcMDQueryResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'SvcMD'}) push body,build_di_SvcMD(d);

  return TAG('di:SvcMDQueryResponse', attr, body);
}




function parse_di_SvcMDRegister(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMD', i); ++i) {
    h =  hash [];
    parse_di_SvcMD(h, tag);
    push data{'SvcMD'}, h;
  }

}

function build_di_SvcMDRegister(data) {
  attr = [];
  body = [];

  for d(data{'SvcMD'}) push body,build_di_SvcMD(d);

  return TAG('di:SvcMDRegister', attr, body);
}




function parse_di_SvcMDRegisterResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SvcMDID', i); ++i)
    push data{'SvcMDID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Keys', i); ++i) {
    h =  hash [];
    parse_di_Keys(h, tag);
    push data{'Keys'}, h;
  }

}

function build_di_SvcMDRegisterResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'SvcMDID'})PUSHTAG_RAW(body,'SvcMDID',d);
  for d(data{'Keys'}) push body,build_di_Keys(d);

  return TAG('di:SvcMDRegisterResponse', attr, body);
}




function parse_di_SvcMDReplace(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SvcMD', i); ++i) {
    h =  hash [];
    parse_di_SvcMD(h, tag);
    push data{'SvcMD'}, h;
  }

}

function build_di_SvcMDReplace(data) {
  attr = [];
  body = [];

  for d(data{'SvcMD'}) push body,build_di_SvcMD(d);

  return TAG('di:SvcMDReplace', attr, body);
}




function parse_di_SvcMDReplaceResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_di_SvcMDReplaceResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('di:SvcMDReplaceResponse', attr, body);
}


/* EOF -- c/zx-di.ds */
