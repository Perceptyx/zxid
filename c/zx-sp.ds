/* c/zx-sp.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_sp_ArtifactResolve(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  POPTAG_RAW(x[2],  'Artifact', data.Artifact);

}

function build_sp_ArtifactResolve(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  PUSHTAG_RAW(body, 'Artifact', data.Artifact);

  return TAG('sp:ArtifactResolve', attr, body);
}




function parse_sp_ArtifactResponse(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Response', 1);
  h =  hash [];
  parse_sp_Response(h, aux1);
  data{'Response'} = h;

}

function build_sp_ArtifactResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sp_Status(data{'Status'});
  push body, build_sp_Response(data{'Response'});

  return TAG('sp:ArtifactResponse', attr, body);
}




function parse_sp_AssertionIDRequest(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDRef', i); ++i)
    push data{'AssertionIDRef'}, tag[2];

}

function build_sp_AssertionIDRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  for d(data{'AssertionIDRef'})PUSHTAG_RAW(body,'AssertionIDRef',d);

  return TAG('sp:AssertionIDRequest', attr, body);
}




function parse_sp_AttributeQuery(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_sa_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_sp_AttributeQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_Subject(data{'Subject'});
  for d(data{'Attribute'}) push body,build_sa_Attribute(d);

  return TAG('sp:AttributeQuery', attr, body);
}




function parse_sp_AuthnQuery(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'SessionIndex', data.SessionIndex);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa_Subject(h, aux1);
  data{'Subject'} = h;
  tag = find_xml_local(x[2], 'RequestedAuthnContext', 1);
  h =  hash [];
  parse_sp_RequestedAuthnContext(h, aux1);
  data{'RequestedAuthnContext'} = h;

}

function build_sp_AuthnQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'SessionIndex', data.SessionIndex);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_Subject(data{'Subject'});
  push body, build_sp_RequestedAuthnContext(data{'RequestedAuthnContext'});

  return TAG('sp:AuthnQuery', attr, body);
}




function parse_sp_AuthnRequest(data, x) {
  POPATTR(x[1], 'AssertionConsumerServiceIndex', data.AssertionConsumerServiceIndex);
  POPATTR(x[1], 'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);
  POPATTR(x[1], 'AttributeConsumingServiceIndex', data.AttributeConsumingServiceIndex);
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ForceAuthn', data.ForceAuthn);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IsPassive', data.IsPassive);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'ProtocolBinding', data.ProtocolBinding);
  POPATTR(x[1], 'ProviderName', data.ProviderName);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa_Subject(h, aux1);
  data{'Subject'} = h;
  tag = find_xml_local(x[2], 'NameIDPolicy', 1);
  h =  hash [];
  parse_sp_NameIDPolicy(h, aux1);
  data{'NameIDPolicy'} = h;
  tag = find_xml_local(x[2], 'Conditions', 1);
  h =  hash [];
  parse_sa_Conditions(h, aux1);
  data{'Conditions'} = h;
  tag = find_xml_local(x[2], 'RequestedAuthnContext', 1);
  h =  hash [];
  parse_sp_RequestedAuthnContext(h, aux1);
  data{'RequestedAuthnContext'} = h;
  tag = find_xml_local(x[2], 'Scoping', 1);
  h =  hash [];
  parse_sp_Scoping(h, aux1);
  data{'Scoping'} = h;

}

function build_sp_AuthnRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AssertionConsumerServiceIndex', data.AssertionConsumerServiceIndex);
  PUSHATTR(attr, 'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);
  PUSHATTR(attr, 'AttributeConsumingServiceIndex', data.AttributeConsumingServiceIndex);
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ForceAuthn', data.ForceAuthn);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IsPassive', data.IsPassive);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'ProtocolBinding', data.ProtocolBinding);
  PUSHATTR(attr, 'ProviderName', data.ProviderName);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_Subject(data{'Subject'});
  push body, build_sp_NameIDPolicy(data{'NameIDPolicy'});
  push body, build_sa_Conditions(data{'Conditions'});
  push body, build_sp_RequestedAuthnContext(data{'RequestedAuthnContext'});
  push body, build_sp_Scoping(data{'Scoping'});

  return TAG('sp:AuthnRequest', attr, body);
}




function parse_sp_AuthzDecisionQuery(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Resource', data.Resource);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_sa_Action(h, tag);
    push data{'Action'}, h;
  }
  tag = find_xml_local(x[2], 'Evidence', 1);
  h =  hash [];
  parse_sa_Evidence(h, aux1);
  data{'Evidence'} = h;

}

function build_sp_AuthzDecisionQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Resource', data.Resource);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_Subject(data{'Subject'});
  for d(data{'Action'}) push body,build_sa_Action(d);
  push body, build_sa_Evidence(data{'Evidence'});

  return TAG('sp:AuthzDecisionQuery', attr, body);
}




function parse_sp_Extensions(data, x) {


}

function build_sp_Extensions(data) {
  attr = [];
  body = [];


  return TAG('sp:Extensions', attr, body);
}




function parse_sp_IDPEntry(data, x) {
  POPATTR(x[1], 'Loc', data.Loc);
  POPATTR(x[1], 'Name', data.Name);
  POPATTR(x[1], 'ProviderID', data.ProviderID);


}

function build_sp_IDPEntry(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Loc', data.Loc);
  PUSHATTR(attr, 'Name', data.Name);
  PUSHATTR(attr, 'ProviderID', data.ProviderID);


  return TAG('sp:IDPEntry', attr, body);
}




function parse_sp_IDPList(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'IDPEntry', i); ++i) {
    h =  hash [];
    parse_sp_IDPEntry(h, tag);
    push data{'IDPEntry'}, h;
  }
  POPTAG_RAW(x[2],  'GetComplete', data.GetComplete);

}

function build_sp_IDPList(data) {
  attr = [];
  body = [];

  for d(data{'IDPEntry'}) push body,build_sp_IDPEntry(d);
  PUSHTAG_RAW(body, 'GetComplete', data.GetComplete);

  return TAG('sp:IDPList', attr, body);
}




function parse_sp_LogoutRequest(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'NotOnOrAfter', data.NotOnOrAfter);
  POPATTR(x[1], 'Reason', data.Reason);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'BaseID', 1);
  h =  hash [];
  parse_sa_BaseID(h, aux1);
  data{'BaseID'} = h;
  tag = find_xml_local(x[2], 'NameID', 1);
  h =  hash [];
  parse_sa_NameID(h, aux1);
  data{'NameID'} = h;
  tag = find_xml_local(x[2], 'EncryptedID', 1);
  h =  hash [];
  parse_sa_EncryptedID(h, aux1);
  data{'EncryptedID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SessionIndex', i); ++i)
    push data{'SessionIndex'}, tag[2];

}

function build_sp_LogoutRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'NotOnOrAfter', data.NotOnOrAfter);
  PUSHATTR(attr, 'Reason', data.Reason);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_BaseID(data{'BaseID'});
  push body, build_sa_NameID(data{'NameID'});
  push body, build_sa_EncryptedID(data{'EncryptedID'});
  for d(data{'SessionIndex'})PUSHTAG_RAW(body,'SessionIndex',d);

  return TAG('sp:LogoutRequest', attr, body);
}




function parse_sp_LogoutResponse(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp_Status(h, aux1);
  data{'Status'} = h;

}

function build_sp_LogoutResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sp_Status(data{'Status'});

  return TAG('sp:LogoutResponse', attr, body);
}




function parse_sp_ManageNameIDRequest(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'NameID', 1);
  h =  hash [];
  parse_sa_NameID(h, aux1);
  data{'NameID'} = h;
  tag = find_xml_local(x[2], 'EncryptedID', 1);
  h =  hash [];
  parse_sa_EncryptedID(h, aux1);
  data{'EncryptedID'} = h;
  POPTAG_RAW(x[2],  'NewID', data.NewID);
  tag = find_xml_local(x[2], 'NewEncryptedID', 1);
  h =  hash [];
  parse_sp_NewEncryptedID(h, aux1);
  data{'NewEncryptedID'} = h;
  POPTAG_RAW(x[2],  'Terminate', data.Terminate);

}

function build_sp_ManageNameIDRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_NameID(data{'NameID'});
  push body, build_sa_EncryptedID(data{'EncryptedID'});
  PUSHTAG_RAW(body, 'NewID', data.NewID);
  push body, build_sp_NewEncryptedID(data{'NewEncryptedID'});
  PUSHTAG_RAW(body, 'Terminate', data.Terminate);

  return TAG('sp:ManageNameIDRequest', attr, body);
}




function parse_sp_ManageNameIDResponse(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp_Status(h, aux1);
  data{'Status'} = h;

}

function build_sp_ManageNameIDResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sp_Status(data{'Status'});

  return TAG('sp:ManageNameIDResponse', attr, body);
}




function parse_sp_NameIDMappingRequest(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'BaseID', 1);
  h =  hash [];
  parse_sa_BaseID(h, aux1);
  data{'BaseID'} = h;
  tag = find_xml_local(x[2], 'NameID', 1);
  h =  hash [];
  parse_sa_NameID(h, aux1);
  data{'NameID'} = h;
  tag = find_xml_local(x[2], 'EncryptedID', 1);
  h =  hash [];
  parse_sa_EncryptedID(h, aux1);
  data{'EncryptedID'} = h;
  tag = find_xml_local(x[2], 'NameIDPolicy', 1);
  h =  hash [];
  parse_sp_NameIDPolicy(h, aux1);
  data{'NameIDPolicy'} = h;

}

function build_sp_NameIDMappingRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_BaseID(data{'BaseID'});
  push body, build_sa_NameID(data{'NameID'});
  push body, build_sa_EncryptedID(data{'EncryptedID'});
  push body, build_sp_NameIDPolicy(data{'NameIDPolicy'});

  return TAG('sp:NameIDMappingRequest', attr, body);
}




function parse_sp_NameIDMappingResponse(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'NameID', 1);
  h =  hash [];
  parse_sa_NameID(h, aux1);
  data{'NameID'} = h;
  tag = find_xml_local(x[2], 'EncryptedID', 1);
  h =  hash [];
  parse_sa_EncryptedID(h, aux1);
  data{'EncryptedID'} = h;

}

function build_sp_NameIDMappingResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sp_Status(data{'Status'});
  push body, build_sa_NameID(data{'NameID'});
  push body, build_sa_EncryptedID(data{'EncryptedID'});

  return TAG('sp:NameIDMappingResponse', attr, body);
}




function parse_sp_NameIDPolicy(data, x) {
  POPATTR(x[1], 'AllowCreate', data.AllowCreate);
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'SPNameQualifier', data.SPNameQualifier);


}

function build_sp_NameIDPolicy(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AllowCreate', data.AllowCreate);
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'SPNameQualifier', data.SPNameQualifier);


  return TAG('sp:NameIDPolicy', attr, body);
}




function parse_sp_NewEncryptedID(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EncryptedKey', i); ++i) {
    h =  hash [];
    parse_xenc_EncryptedKey(h, tag);
    push data{'EncryptedKey'}, h;
  }

}

function build_sp_NewEncryptedID(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  for d(data{'EncryptedKey'}) push body,build_xenc_EncryptedKey(d);

  return TAG('sp:NewEncryptedID', attr, body);
}




function parse_sp_RequestedAuthnContext(data, x) {
  POPATTR(x[1], 'Comparison', data.Comparison);

  for (i=1; tag = find_xml_local(x[2], 'AuthnContextClassRef', i); ++i)
    push data{'AuthnContextClassRef'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AuthnContextDeclRef', i); ++i)
    push data{'AuthnContextDeclRef'}, tag[2];

}

function build_sp_RequestedAuthnContext(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Comparison', data.Comparison);

  for d(data{'AuthnContextClassRef'})PUSHTAG_RAW(body,'AuthnContextClassRef',d);
  for d(data{'AuthnContextDeclRef'})PUSHTAG_RAW(body,'AuthnContextDeclRef',d);

  return TAG('sp:RequestedAuthnContext', attr, body);
}




function parse_sp_Response(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Assertion', 1);
  h =  hash [];
  parse_sa_Assertion(h, aux1);
  data{'Assertion'} = h;
  tag = find_xml_local(x[2], 'EncryptedAssertion', 1);
  h =  hash [];
  parse_sa_EncryptedAssertion(h, aux1);
  data{'EncryptedAssertion'} = h;

}

function build_sp_Response(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sp_Status(data{'Status'});
  push body, build_sa_Assertion(data{'Assertion'});
  push body, build_sa_EncryptedAssertion(data{'EncryptedAssertion'});

  return TAG('sp:Response', attr, body);
}




function parse_sp_Scoping(data, x) {
  POPATTR(x[1], 'ProxyCount', data.ProxyCount);

  tag = find_xml_local(x[2], 'IDPList', 1);
  h =  hash [];
  parse_sp_IDPList(h, aux1);
  data{'IDPList'} = h;
  for (i=1; tag = find_xml_local(x[2], 'RequesterID', i); ++i)
    push data{'RequesterID'}, tag[2];

}

function build_sp_Scoping(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ProxyCount', data.ProxyCount);

  push body, build_sp_IDPList(data{'IDPList'});
  for d(data{'RequesterID'})PUSHTAG_RAW(body,'RequesterID',d);

  return TAG('sp:Scoping', attr, body);
}




function parse_sp_Status(data, x) {

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_sp_StatusCode(h, aux1);
  data{'StatusCode'} = h;
  POPTAG_RAW(x[2],  'StatusMessage', data.StatusMessage);
  tag = find_xml_local(x[2], 'StatusDetail', 1);
  h =  hash [];
  parse_sp_StatusDetail(h, aux1);
  data{'StatusDetail'} = h;

}

function build_sp_Status(data) {
  attr = [];
  body = [];

  push body, build_sp_StatusCode(data{'StatusCode'});
  PUSHTAG_RAW(body, 'StatusMessage', data.StatusMessage);
  push body, build_sp_StatusDetail(data{'StatusDetail'});

  return TAG('sp:Status', attr, body);
}




function parse_sp_StatusCode(data, x) {
  POPATTR(x[1], 'Value', data.Value);

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_sp_StatusCode(h, aux1);
  data{'StatusCode'} = h;

}

function build_sp_StatusCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Value', data.Value);

  push body, build_sp_StatusCode(data{'StatusCode'});

  return TAG('sp:StatusCode', attr, body);
}




function parse_sp_StatusDetail(data, x) {


}

function build_sp_StatusDetail(data) {
  attr = [];
  body = [];


  return TAG('sp:StatusDetail', attr, body);
}




function parse_sp_SubjectQuery(data, x) {
  POPATTR(x[1], 'Consent', data.Consent);
  POPATTR(x[1], 'Destination', data.Destination);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Version', data.Version);

  tag = find_xml_local(x[2], 'Issuer', 1);
  h =  hash [];
  parse_sa_Issuer(h, aux1);
  data{'Issuer'} = h;
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_sp_Extensions(h, aux1);
  data{'Extensions'} = h;
  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa_Subject(h, aux1);
  data{'Subject'} = h;

}

function build_sp_SubjectQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Consent', data.Consent);
  PUSHATTR(attr, 'Destination', data.Destination);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Version', data.Version);

  push body, build_sa_Issuer(data{'Issuer'});
  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp_Extensions(data{'Extensions'});
  push body, build_sa_Subject(data{'Subject'});

  return TAG('sp:SubjectQuery', attr, body);
}


/* EOF -- c/zx-sp.ds */
