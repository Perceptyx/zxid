/* c/zx-a.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_a_Action(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_Action(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:Action', attr, body);
}




function parse_a_Address(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_Address(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:Address', attr, body);
}




function parse_a_EndpointReference(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_a_EndpointReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('a:EndpointReference', attr, body);
}




function parse_a_FaultTo(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_a_FaultTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('a:FaultTo', attr, body);
}




function parse_a_From(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_a_From(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('a:From', attr, body);
}




function parse_a_MessageID(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_MessageID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:MessageID', attr, body);
}




function parse_a_Metadata(data, x) {
  POPATTR(x[1], 'rankKey', data.rankKey);

  tag = find_xml_local(x[2], 'Framework', 1);
  h =  hash [];
  parse_sbf_Framework(h, aux1);
  data{'Framework'} = h;
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  POPTAG_RAW(x[2],  'ServiceType', data.ServiceType);
  tag = find_xml_local(x[2], 'SecurityContext', 1);
  h =  hash [];
  parse_di_SecurityContext(h, aux1);
  data{'SecurityContext'} = h;
  tag = find_xml_local(x[2], 'Trust', 1);
  h =  hash [];
  parse_tas3_Trust(h, aux1);
  data{'Trust'} = h;

}

function build_a_Metadata(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'rankKey', data.rankKey);

  push body, build_sbf_Framework(data{'Framework'});
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  PUSHTAG_RAW(body, 'ServiceType', data.ServiceType);
  push body, build_di_SecurityContext(data{'SecurityContext'});
  push body, build_tas3_Trust(data{'Trust'});

  return TAG('a:Metadata', attr, body);
}




function parse_a_ProblemAction(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Action', 1);
  h =  hash [];
  parse_a_Action(h, aux1);
  data{'Action'} = h;
  POPTAG_RAW(x[2],  'SoapAction', data.SoapAction);

}

function build_a_ProblemAction(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Action(data{'Action'});
  PUSHTAG_RAW(body, 'SoapAction', data.SoapAction);

  return TAG('a:ProblemAction', attr, body);
}




function parse_a_ProblemHeader(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_ProblemHeader(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:ProblemHeader', attr, body);
}




function parse_a_ProblemHeaderQName(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_ProblemHeaderQName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:ProblemHeaderQName', attr, body);
}




function parse_a_ProblemURI(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_ProblemURI(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:ProblemURI', attr, body);
}




function parse_a_ReferenceParameters(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  for (i=1; tag = find_xml_local(x[2], 'TargetIdentity', i); ++i) {
    h =  hash [];
    parse_b_TargetIdentity(h, tag);
    push data{'TargetIdentity'}, h;
  }

}

function build_a_ReferenceParameters(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  for d(data{'TargetIdentity'}) push body,build_b_TargetIdentity(d);

  return TAG('a:ReferenceParameters', attr, body);
}




function parse_a_RelatesTo(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'RelationshipType', data.RelationshipType);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_RelatesTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'RelationshipType', data.RelationshipType);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:RelatesTo', attr, body);
}




function parse_a_ReplyTo(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_a_ReplyTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('a:ReplyTo', attr, body);
}




function parse_a_RetryAfter(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_RetryAfter(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:RetryAfter', attr, body);
}




function parse_a_To(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_a_To(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('a:To', attr, body);
}


/* EOF -- c/zx-a.ds */
