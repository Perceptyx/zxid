/* c/zx-sa11.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_sa11_Action(data, x) {
  POPATTR(x[1], 'Namespace', data.Namespace);


}

function build_sa11_Action(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Namespace', data.Namespace);


  return TAG('sa11:Action', attr, body);
}




function parse_sa11_Advice(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AssertionIDReference', i); ++i)
    push data{'AssertionIDReference'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Assertion', i); ++i) {
    h =  hash [];
    parse_sa11_Assertion(h, tag);
    push data{'Assertion'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ff12_Assertion', i); ++i) {
    h =  hash [];
    parse_ff12_Assertion(h, tag);
    push data{'ff12_Assertion'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'sa_Assertion', i); ++i) {
    h =  hash [];
    parse_sa_Assertion(h, tag);
    push data{'sa_Assertion'}, h;
  }

}

function build_sa11_Advice(data) {
  attr = [];
  body = [];

  for d(data{'AssertionIDReference'})PUSHTAG_RAW(body,'AssertionIDReference',d);
  for d(data{'Assertion'}) push body,build_sa11_Assertion(d);
  for d(data{'ff12_Assertion'}) push body,build_ff12_Assertion(d);
  for d(data{'sa_Assertion'}) push body,build_sa_Assertion(d);

  return TAG('sa11:Advice', attr, body);
}




function parse_sa11_Assertion(data, x) {
  POPATTR(x[1], 'AssertionID', data.AssertionID);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);

  tag = find_xml_local(x[2], 'Conditions', 1);
  h =  hash [];
  parse_sa11_Conditions(h, aux1);
  data{'Conditions'} = h;
  tag = find_xml_local(x[2], 'Advice', 1);
  h =  hash [];
  parse_sa11_Advice(h, aux1);
  data{'Advice'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Statement', i); ++i)
    push data{'Statement'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SubjectStatement', i); ++i) {
    h =  hash [];
    parse_sa11_SubjectStatement(h, tag);
    push data{'SubjectStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthenticationStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AuthenticationStatement(h, tag);
    push data{'AuthenticationStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthorizationDecisionStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AuthorizationDecisionStatement(h, tag);
    push data{'AuthorizationDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AttributeStatement(h, tag);
    push data{'AttributeStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'XACMLAuthzDecisionStatement', i); ++i) {
    h =  hash [];
    parse_xasa_XACMLAuthzDecisionStatement(h, tag);
    push data{'XACMLAuthzDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'XACMLPolicyStatement', i); ++i) {
    h =  hash [];
    parse_xasa_XACMLPolicyStatement(h, tag);
    push data{'XACMLPolicyStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'xasacd1_XACMLAuthzDecisionStatement', i); ++i) {
    h =  hash [];
    parse_xasacd1_XACMLAuthzDecisionStatement(h, tag);
    push data{'xasacd1_XACMLAuthzDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'xasacd1_XACMLPolicyStatement', i); ++i) {
    h =  hash [];
    parse_xasacd1_XACMLPolicyStatement(h, tag);
    push data{'xasacd1_XACMLPolicyStatement'}, h;
  }
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_sa11_Assertion(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AssertionID', data.AssertionID);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);

  push body, build_sa11_Conditions(data{'Conditions'});
  push body, build_sa11_Advice(data{'Advice'});
  for d(data{'Statement'})PUSHTAG_RAW(body,'Statement',d);
  for d(data{'SubjectStatement'}) push body,build_sa11_SubjectStatement(d);
  for d(data{'AuthenticationStatement'}) push body,build_sa11_AuthenticationStatement(d);
  for d(data{'AuthorizationDecisionStatement'}) push body,build_sa11_AuthorizationDecisionStatement(d);
  for d(data{'AttributeStatement'}) push body,build_sa11_AttributeStatement(d);
  for d(data{'XACMLAuthzDecisionStatement'}) push body,build_xasa_XACMLAuthzDecisionStatement(d);
  for d(data{'XACMLPolicyStatement'}) push body,build_xasa_XACMLPolicyStatement(d);
  for d(data{'xasacd1_XACMLAuthzDecisionStatement'}) push body,build_xasacd1_XACMLAuthzDecisionStatement(d);
  for d(data{'xasacd1_XACMLPolicyStatement'}) push body,build_xasacd1_XACMLPolicyStatement(d);
  push body, build_ds_Signature(data{'Signature'});

  return TAG('sa11:Assertion', attr, body);
}




function parse_sa11_Attribute(data, x) {
  POPATTR(x[1], 'AttributeName', data.AttributeName);
  POPATTR(x[1], 'AttributeNamespace', data.AttributeNamespace);

  for (i=1; tag = find_xml_local(x[2], 'AttributeValue', i); ++i) {
    h =  hash [];
    parse_sa11_AttributeValue(h, tag);
    push data{'AttributeValue'}, h;
  }

}

function build_sa11_Attribute(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeName', data.AttributeName);
  PUSHATTR(attr, 'AttributeNamespace', data.AttributeNamespace);

  for d(data{'AttributeValue'}) push body,build_sa11_AttributeValue(d);

  return TAG('sa11:Attribute', attr, body);
}




function parse_sa11_AttributeDesignator(data, x) {
  POPATTR(x[1], 'AttributeName', data.AttributeName);
  POPATTR(x[1], 'AttributeNamespace', data.AttributeNamespace);


}

function build_sa11_AttributeDesignator(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeName', data.AttributeName);
  PUSHATTR(attr, 'AttributeNamespace', data.AttributeNamespace);


  return TAG('sa11:AttributeDesignator', attr, body);
}




function parse_sa11_AttributeStatement(data, x) {

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_sa11_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_sa11_AttributeStatement(data) {
  attr = [];
  body = [];

  push body, build_sa11_Subject(data{'Subject'});
  for d(data{'Attribute'}) push body,build_sa11_Attribute(d);

  return TAG('sa11:AttributeStatement', attr, body);
}




function parse_sa11_AttributeValue(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ResourceOffering', i); ++i) {
    h =  hash [];
    parse_di12_ResourceOffering(h, tag);
    push data{'ResourceOffering'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EndpointReference', i); ++i) {
    h =  hash [];
    parse_a_EndpointReference(h, tag);
    push data{'EndpointReference'}, h;
  }

}

function build_sa11_AttributeValue(data) {
  attr = [];
  body = [];

  for d(data{'ResourceOffering'}) push body,build_di12_ResourceOffering(d);
  for d(data{'EndpointReference'}) push body,build_a_EndpointReference(d);

  return TAG('sa11:AttributeValue', attr, body);
}




function parse_sa11_AudienceRestrictionCondition(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Audience', i); ++i)
    push data{'Audience'}, tag[2];

}

function build_sa11_AudienceRestrictionCondition(data) {
  attr = [];
  body = [];

  for d(data{'Audience'})PUSHTAG_RAW(body,'Audience',d);

  return TAG('sa11:AudienceRestrictionCondition', attr, body);
}




function parse_sa11_AuthenticationStatement(data, x) {
  POPATTR(x[1], 'AuthenticationInstant', data.AuthenticationInstant);
  POPATTR(x[1], 'AuthenticationMethod', data.AuthenticationMethod);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  tag = find_xml_local(x[2], 'SubjectLocality', 1);
  h =  hash [];
  parse_sa11_SubjectLocality(h, aux1);
  data{'SubjectLocality'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AuthorityBinding', i); ++i) {
    h =  hash [];
    parse_sa11_AuthorityBinding(h, tag);
    push data{'AuthorityBinding'}, h;
  }

}

function build_sa11_AuthenticationStatement(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AuthenticationInstant', data.AuthenticationInstant);
  PUSHATTR(attr, 'AuthenticationMethod', data.AuthenticationMethod);

  push body, build_sa11_Subject(data{'Subject'});
  push body, build_sa11_SubjectLocality(data{'SubjectLocality'});
  for d(data{'AuthorityBinding'}) push body,build_sa11_AuthorityBinding(d);

  return TAG('sa11:AuthenticationStatement', attr, body);
}




function parse_sa11_AuthorityBinding(data, x) {
  POPATTR(x[1], 'AuthorityKind', data.AuthorityKind);
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);


}

function build_sa11_AuthorityBinding(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AuthorityKind', data.AuthorityKind);
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);


  return TAG('sa11:AuthorityBinding', attr, body);
}




function parse_sa11_AuthorizationDecisionStatement(data, x) {
  POPATTR(x[1], 'Decision', data.Decision);
  POPATTR(x[1], 'Resource', data.Resource);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_sa11_Action(h, tag);
    push data{'Action'}, h;
  }
  tag = find_xml_local(x[2], 'Evidence', 1);
  h =  hash [];
  parse_sa11_Evidence(h, aux1);
  data{'Evidence'} = h;

}

function build_sa11_AuthorizationDecisionStatement(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Decision', data.Decision);
  PUSHATTR(attr, 'Resource', data.Resource);

  push body, build_sa11_Subject(data{'Subject'});
  for d(data{'Action'}) push body,build_sa11_Action(d);
  push body, build_sa11_Evidence(data{'Evidence'});

  return TAG('sa11:AuthorizationDecisionStatement', attr, body);
}




function parse_sa11_Conditions(data, x) {
  POPATTR(x[1], 'NotBefore', data.NotBefore);
  POPATTR(x[1], 'NotOnOrAfter', data.NotOnOrAfter);

  for (i=1; tag = find_xml_local(x[2], 'AudienceRestrictionCondition', i); ++i) {
    h =  hash [];
    parse_sa11_AudienceRestrictionCondition(h, tag);
    push data{'AudienceRestrictionCondition'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DoNotCacheCondition', i); ++i) {
    h =  hash [];
    parse_sa11_DoNotCacheCondition(h, tag);
    push data{'DoNotCacheCondition'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Condition', i); ++i)
    push data{'Condition'}, tag[2];

}

function build_sa11_Conditions(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'NotBefore', data.NotBefore);
  PUSHATTR(attr, 'NotOnOrAfter', data.NotOnOrAfter);

  for d(data{'AudienceRestrictionCondition'}) push body,build_sa11_AudienceRestrictionCondition(d);
  for d(data{'DoNotCacheCondition'}) push body,build_sa11_DoNotCacheCondition(d);
  for d(data{'Condition'})PUSHTAG_RAW(body,'Condition',d);

  return TAG('sa11:Conditions', attr, body);
}




function parse_sa11_DoNotCacheCondition(data, x) {


}

function build_sa11_DoNotCacheCondition(data) {
  attr = [];
  body = [];


  return TAG('sa11:DoNotCacheCondition', attr, body);
}




function parse_sa11_Evidence(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AssertionIDReference', i); ++i)
    push data{'AssertionIDReference'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Assertion', i); ++i) {
    h =  hash [];
    parse_sa11_Assertion(h, tag);
    push data{'Assertion'}, h;
  }

}

function build_sa11_Evidence(data) {
  attr = [];
  body = [];

  for d(data{'AssertionIDReference'})PUSHTAG_RAW(body,'AssertionIDReference',d);
  for d(data{'Assertion'}) push body,build_sa11_Assertion(d);

  return TAG('sa11:Evidence', attr, body);
}




function parse_sa11_NameIdentifier(data, x) {
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'NameQualifier', data.NameQualifier);


}

function build_sa11_NameIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'NameQualifier', data.NameQualifier);


  return TAG('sa11:NameIdentifier', attr, body);
}




function parse_sa11_Subject(data, x) {

  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;
  tag = find_xml_local(x[2], 'SubjectConfirmation', 1);
  h =  hash [];
  parse_sa11_SubjectConfirmation(h, aux1);
  data{'SubjectConfirmation'} = h;

}

function build_sa11_Subject(data) {
  attr = [];
  body = [];

  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});
  push body, build_sa11_SubjectConfirmation(data{'SubjectConfirmation'});

  return TAG('sa11:Subject', attr, body);
}




function parse_sa11_SubjectConfirmation(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ConfirmationMethod', i); ++i)
    push data{'ConfirmationMethod'}, tag[2];
  POPTAG_RAW(x[2],  'SubjectConfirmationData', data.SubjectConfirmationData);
  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;

}

function build_sa11_SubjectConfirmation(data) {
  attr = [];
  body = [];

  for d(data{'ConfirmationMethod'})PUSHTAG_RAW(body,'ConfirmationMethod',d);
  PUSHTAG_RAW(body, 'SubjectConfirmationData', data.SubjectConfirmationData);
  push body, build_ds_KeyInfo(data{'KeyInfo'});

  return TAG('sa11:SubjectConfirmation', attr, body);
}




function parse_sa11_SubjectLocality(data, x) {
  POPATTR(x[1], 'DNSAddress', data.DNSAddress);
  POPATTR(x[1], 'IPAddress', data.IPAddress);


}

function build_sa11_SubjectLocality(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'DNSAddress', data.DNSAddress);
  PUSHATTR(attr, 'IPAddress', data.IPAddress);


  return TAG('sa11:SubjectLocality', attr, body);
}




function parse_sa11_SubjectStatement(data, x) {

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;

}

function build_sa11_SubjectStatement(data) {
  attr = [];
  body = [];

  push body, build_sa11_Subject(data{'Subject'});

  return TAG('sa11:SubjectStatement', attr, body);
}


/* EOF -- c/zx-sa11.ds */
