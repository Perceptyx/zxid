/* c/zx-is12.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_is12_Confirm(data, x) {
  POPATTR(x[1], 'name', data.name);

  tag = find_xml_local(x[2], 'Help', 1);
  h =  hash [];
  parse_is12_Help(h, aux1);
  data{'Help'} = h;
  POPTAG_RAW(x[2],  'Hint', data.Hint);
  POPTAG_RAW(x[2],  'Label', data.Label);
  POPTAG_RAW(x[2],  'Value', data.Value);

}

function build_is12_Confirm(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'name', data.name);

  push body, build_is12_Help(data{'Help'});
  PUSHTAG_RAW(body, 'Hint', data.Hint);
  PUSHTAG_RAW(body, 'Label', data.Label);
  PUSHTAG_RAW(body, 'Value', data.Value);

  return TAG('is12:Confirm', attr, body);
}




function parse_is12_EncryptedResourceID(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  tag = find_xml_local(x[2], 'EncryptedKey', 1);
  h =  hash [];
  parse_xenc_EncryptedKey(h, aux1);
  data{'EncryptedKey'} = h;

}

function build_is12_EncryptedResourceID(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  push body, build_xenc_EncryptedKey(data{'EncryptedKey'});

  return TAG('is12:EncryptedResourceID', attr, body);
}




function parse_is12_Extension(data, x) {


}

function build_is12_Extension(data) {
  attr = [];
  body = [];


  return TAG('is12:Extension', attr, body);
}




function parse_is12_Help(data, x) {
  POPATTR(x[1], 'label', data.label);
  POPATTR(x[1], 'link', data.link);
  POPATTR(x[1], 'moreLink', data.moreLink);


}

function build_is12_Help(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'label', data.label);
  PUSHATTR(attr, 'link', data.link);
  PUSHATTR(attr, 'moreLink', data.moreLink);


  return TAG('is12:Help', attr, body);
}




function parse_is12_Inquiry(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'title', data.title);

  tag = find_xml_local(x[2], 'Help', 1);
  h =  hash [];
  parse_is12_Help(h, aux1);
  data{'Help'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Select', i); ++i) {
    h =  hash [];
    parse_is12_Select(h, tag);
    push data{'Select'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Confirm', i); ++i) {
    h =  hash [];
    parse_is12_Confirm(h, tag);
    push data{'Confirm'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Text', i); ++i) {
    h =  hash [];
    parse_is12_Text(h, tag);
    push data{'Text'}, h;
  }

}

function build_is12_Inquiry(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'title', data.title);

  push body, build_is12_Help(data{'Help'});
  for d(data{'Select'}) push body,build_is12_Select(d);
  for d(data{'Confirm'}) push body,build_is12_Confirm(d);
  for d(data{'Text'}) push body,build_is12_Text(d);

  return TAG('is12:Inquiry', attr, body);
}




function parse_is12_InteractionRequest(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'language', data.language);
  POPATTR(x[1], 'maxInteractTime', data.maxInteractTime);
  POPATTR(x[1], 'signed', data.signed);

  for (i=1; tag = find_xml_local(x[2], 'Inquiry', i); ++i) {
    h =  hash [];
    parse_is12_Inquiry(h, tag);
    push data{'Inquiry'}, h;
  }
  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;

}

function build_is12_InteractionRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'language', data.language);
  PUSHATTR(attr, 'maxInteractTime', data.maxInteractTime);
  PUSHATTR(attr, 'signed', data.signed);

  for d(data{'Inquiry'}) push body,build_is12_Inquiry(d);
  push body, build_ds_KeyInfo(data{'KeyInfo'});

  return TAG('is12:InteractionRequest', attr, body);
}




function parse_is12_InteractionResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_is12_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'InteractionStatement', i); ++i) {
    h =  hash [];
    parse_is12_InteractionStatement(h, tag);
    push data{'InteractionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Parameter', i); ++i) {
    h =  hash [];
    parse_is12_Parameter(h, tag);
    push data{'Parameter'}, h;
  }

}

function build_is12_InteractionResponse(data) {
  attr = [];
  body = [];

  push body, build_is12_Status(data{'Status'});
  for d(data{'InteractionStatement'}) push body,build_is12_InteractionStatement(d);
  for d(data{'Parameter'}) push body,build_is12_Parameter(d);

  return TAG('is12:InteractionResponse', attr, body);
}




function parse_is12_InteractionService(data, x) {
  POPATTR(x[1], 'entryID', data.entryID);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_di12_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_di12_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  tag = find_xml_local(x[2], 'ServiceInstance', 1);
  h =  hash [];
  parse_di12_ServiceInstance(h, aux1);
  data{'ServiceInstance'} = h;
  tag = find_xml_local(x[2], 'Options', 1);
  h =  hash [];
  parse_di12_Options(h, aux1);
  data{'Options'} = h;
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);

}

function build_is12_InteractionService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'entryID', data.entryID);

  push body, build_di12_ResourceID(data{'ResourceID'});
  push body, build_di12_EncryptedResourceID(data{'EncryptedResourceID'});
  push body, build_di12_ServiceInstance(data{'ServiceInstance'});
  push body, build_di12_Options(data{'Options'});
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);

  return TAG('is12:InteractionService', attr, body);
}




function parse_is12_InteractionStatement(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Inquiry', i); ++i) {
    h =  hash [];
    parse_is12_Inquiry(h, tag);
    push data{'Inquiry'}, h;
  }
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_is12_InteractionStatement(data) {
  attr = [];
  body = [];

  for d(data{'Inquiry'}) push body,build_is12_Inquiry(d);
  push body, build_ds_Signature(data{'Signature'});

  return TAG('is12:InteractionStatement', attr, body);
}




function parse_is12_Item(data, x) {
  POPATTR(x[1], 'label', data.label);
  POPATTR(x[1], 'value', data.value);

  POPTAG_RAW(x[2],  'Hint', data.Hint);

}

function build_is12_Item(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'label', data.label);
  PUSHATTR(attr, 'value', data.value);

  PUSHTAG_RAW(body, 'Hint', data.Hint);

  return TAG('is12:Item', attr, body);
}




function parse_is12_Parameter(data, x) {
  POPATTR(x[1], 'name', data.name);
  POPATTR(x[1], 'value', data.value);


}

function build_is12_Parameter(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'name', data.name);
  PUSHATTR(attr, 'value', data.value);


  return TAG('is12:Parameter', attr, body);
}




function parse_is12_RedirectRequest(data, x) {
  POPATTR(x[1], 'redirectURL', data.redirectURL);


}

function build_is12_RedirectRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'redirectURL', data.redirectURL);


  return TAG('is12:RedirectRequest', attr, body);
}




function parse_is12_ResourceID(data, x) {
  POPATTR(x[1], 'id', data.id);


}

function build_is12_ResourceID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);


  return TAG('is12:ResourceID', attr, body);
}




function parse_is12_Select(data, x) {
  POPATTR(x[1], 'multiple', data.multiple);
  POPATTR(x[1], 'name', data.name);

  tag = find_xml_local(x[2], 'Help', 1);
  h =  hash [];
  parse_is12_Help(h, aux1);
  data{'Help'} = h;
  POPTAG_RAW(x[2],  'Hint', data.Hint);
  POPTAG_RAW(x[2],  'Label', data.Label);
  POPTAG_RAW(x[2],  'Value', data.Value);
  for (i=1; tag = find_xml_local(x[2], 'Item', i); ++i) {
    h =  hash [];
    parse_is12_Item(h, tag);
    push data{'Item'}, h;
  }

}

function build_is12_Select(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'multiple', data.multiple);
  PUSHATTR(attr, 'name', data.name);

  push body, build_is12_Help(data{'Help'});
  PUSHTAG_RAW(body, 'Hint', data.Hint);
  PUSHTAG_RAW(body, 'Label', data.Label);
  PUSHTAG_RAW(body, 'Value', data.Value);
  for d(data{'Item'}) push body,build_is12_Item(d);

  return TAG('is12:Select', attr, body);
}




function parse_is12_Status(data, x) {
  POPATTR(x[1], 'code', data.code);
  POPATTR(x[1], 'comment', data.comment);
  POPATTR(x[1], 'ref', data.ref);

  for (i=1; tag = find_xml_local(x[2], 'Status', i); ++i) {
    h =  hash [];
    parse_is12_Status(h, tag);
    push data{'Status'}, h;
  }

}

function build_is12_Status(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'code', data.code);
  PUSHATTR(attr, 'comment', data.comment);
  PUSHATTR(attr, 'ref', data.ref);

  for d(data{'Status'}) push body,build_is12_Status(d);

  return TAG('is12:Status', attr, body);
}




function parse_is12_Text(data, x) {
  POPATTR(x[1], 'format', data.format);
  POPATTR(x[1], 'maxChars', data.maxChars);
  POPATTR(x[1], 'minChars', data.minChars);
  POPATTR(x[1], 'name', data.name);

  tag = find_xml_local(x[2], 'Help', 1);
  h =  hash [];
  parse_is12_Help(h, aux1);
  data{'Help'} = h;
  POPTAG_RAW(x[2],  'Hint', data.Hint);
  POPTAG_RAW(x[2],  'Label', data.Label);
  POPTAG_RAW(x[2],  'Value', data.Value);

}

function build_is12_Text(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'format', data.format);
  PUSHATTR(attr, 'maxChars', data.maxChars);
  PUSHATTR(attr, 'minChars', data.minChars);
  PUSHATTR(attr, 'name', data.name);

  push body, build_is12_Help(data{'Help'});
  PUSHTAG_RAW(body, 'Hint', data.Hint);
  PUSHTAG_RAW(body, 'Label', data.Label);
  PUSHTAG_RAW(body, 'Value', data.Value);

  return TAG('is12:Text', attr, body);
}




function parse_is12_UserInteraction(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'interact', data.interact);
  POPATTR(x[1], 'language', data.language);
  POPATTR(x[1], 'maxInteractTime', data.maxInteractTime);
  POPATTR(x[1], 'redirect', data.redirect);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'InteractionService', 1);
  h =  hash [];
  parse_is12_InteractionService(h, aux1);
  data{'InteractionService'} = h;

}

function build_is12_UserInteraction(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'interact', data.interact);
  PUSHATTR(attr, 'language', data.language);
  PUSHATTR(attr, 'maxInteractTime', data.maxInteractTime);
  PUSHATTR(attr, 'redirect', data.redirect);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_is12_InteractionService(data{'InteractionService'});

  return TAG('is12:UserInteraction', attr, body);
}


/* EOF -- c/zx-is12.ds */
