/* c/zx-pmm.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_pmm_PMActivate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMActivateItem', i); ++i) {
    h =  hash [];
    parse_pmm_PMActivateItem(h, tag);
    push data{'PMActivateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_pmm_PMActivate(data) {
  attr = [];
  body = [];

  for d(data{'PMActivateItem'}) push body,build_pmm_PMActivateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('pmm:PMActivate', attr, body);
}




function parse_pmm_PMActivateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_pmm_PMActivateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('pmm:PMActivateItem', attr, body);
}




function parse_pmm_PMActivateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_PMActivateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:PMActivateResponse', attr, body);
}




function parse_pmm_PMDeactivate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMDeactivateItem', i); ++i) {
    h =  hash [];
    parse_pmm_PMDeactivateItem(h, tag);
    push data{'PMDeactivateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_pmm_PMDeactivate(data) {
  attr = [];
  body = [];

  for d(data{'PMDeactivateItem'}) push body,build_pmm_PMDeactivateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('pmm:PMDeactivate', attr, body);
}




function parse_pmm_PMDeactivateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_pmm_PMDeactivateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('pmm:PMDeactivateItem', attr, body);
}




function parse_pmm_PMDeactivateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_PMDeactivateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:PMDeactivateResponse', attr, body);
}




function parse_pmm_PMDelete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMDeleteItem', i); ++i) {
    h =  hash [];
    parse_pmm_PMDeleteItem(h, tag);
    push data{'PMDeleteItem'}, h;
  }

}

function build_pmm_PMDelete(data) {
  attr = [];
  body = [];

  for d(data{'PMDeleteItem'}) push body,build_pmm_PMDeleteItem(d);

  return TAG('pmm:PMDelete', attr, body);
}




function parse_pmm_PMDeleteItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  tag = find_xml_local(x[2], 'PMID', 1);
  h =  hash [];
  parse_prov_PMID(h, aux1);
  data{'PMID'} = h;

}

function build_pmm_PMDeleteItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  push body, build_prov_PMID(data{'PMID'});

  return TAG('pmm:PMDeleteItem', attr, body);
}




function parse_pmm_PMDeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_PMDeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:PMDeleteResponse', attr, body);
}




function parse_pmm_PMGetStatus(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMID', i); ++i) {
    h =  hash [];
    parse_prov_PMID(h, tag);
    push data{'PMID'}, h;
  }

}

function build_pmm_PMGetStatus(data) {
  attr = [];
  body = [];

  for d(data{'PMID'}) push body,build_prov_PMID(d);

  return TAG('pmm:PMGetStatus', attr, body);
}




function parse_pmm_PMGetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'PMStatus', i); ++i) {
    h =  hash [];
    parse_prov_PMStatus(h, tag);
    push data{'PMStatus'}, h;
  }

}

function build_pmm_PMGetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'PMStatus'}) push body,build_prov_PMStatus(d);

  return TAG('pmm:PMGetStatusResponse', attr, body);
}




function parse_pmm_PMSetStatus(data, x) {

  tag = find_xml_local(x[2], 'PMStatus', 1);
  h =  hash [];
  parse_prov_PMStatus(h, aux1);
  data{'PMStatus'} = h;

}

function build_pmm_PMSetStatus(data) {
  attr = [];
  body = [];

  push body, build_prov_PMStatus(data{'PMStatus'});

  return TAG('pmm:PMSetStatus', attr, body);
}




function parse_pmm_PMSetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_PMSetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:PMSetStatusResponse', attr, body);
}




function parse_pmm_PMUpdate(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'PMUpdateItem', i); ++i) {
    h =  hash [];
    parse_pmm_PMUpdateItem(h, tag);
    push data{'PMUpdateItem'}, h;
  }
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_pmm_PMUpdate(data) {
  attr = [];
  body = [];

  for d(data{'PMUpdateItem'}) push body,build_pmm_PMUpdateItem(d);
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('pmm:PMUpdate', attr, body);
}




function parse_pmm_PMUpdateItem(data, x) {
  POPATTR(x[1], 'at', data.at);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'type', data.type);

  tag = find_xml_local(x[2], 'PMDescriptor', 1);
  h =  hash [];
  parse_prov_PMDescriptor(h, aux1);
  data{'PMDescriptor'} = h;

}

function build_pmm_PMUpdateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'at', data.at);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'type', data.type);

  push body, build_prov_PMDescriptor(data{'PMDescriptor'});

  return TAG('pmm:PMUpdateItem', attr, body);
}




function parse_pmm_PMUpdateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_PMUpdateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:PMUpdateResponse', attr, body);
}




function parse_pmm_Provision(data, x) {
  POPATTR(x[1], 'wait', data.wait);

  tag = find_xml_local(x[2], 'ProvisioningHandle', 1);
  h =  hash [];
  parse_prov_ProvisioningHandle(h, aux1);
  data{'ProvisioningHandle'} = h;
  tag = find_xml_local(x[2], 'PMDescriptor', 1);
  h =  hash [];
  parse_prov_PMDescriptor(h, aux1);
  data{'PMDescriptor'} = h;
  POPTAG_RAW(x[2],  'NotifyTo', data.NotifyTo);

}

function build_pmm_Provision(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wait', data.wait);

  push body, build_prov_ProvisioningHandle(data{'ProvisioningHandle'});
  push body, build_prov_PMDescriptor(data{'PMDescriptor'});
  PUSHTAG_RAW(body, 'NotifyTo', data.NotifyTo);

  return TAG('pmm:Provision', attr, body);
}




function parse_pmm_ProvisionResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_pmm_ProvisionResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('pmm:ProvisionResponse', attr, body);
}


/* EOF -- c/zx-pmm.ds */
