/* c/zx-xenc.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_xenc_AgreementMethod(data, x) {
  POPATTR(x[1], 'Algorithm', data.Algorithm);

  POPTAG_RAW(x[2],  'KA_Nonce', data.KA_Nonce);
  tag = find_xml_local(x[2], 'OriginatorKeyInfo', 1);
  h =  hash [];
  parse_xenc_OriginatorKeyInfo(h, aux1);
  data{'OriginatorKeyInfo'} = h;
  tag = find_xml_local(x[2], 'RecipientKeyInfo', 1);
  h =  hash [];
  parse_xenc_RecipientKeyInfo(h, aux1);
  data{'RecipientKeyInfo'} = h;

}

function build_xenc_AgreementMethod(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Algorithm', data.Algorithm);

  PUSHTAG_RAW(body, 'KA_Nonce', data.KA_Nonce);
  push body, build_xenc_OriginatorKeyInfo(data{'OriginatorKeyInfo'});
  push body, build_xenc_RecipientKeyInfo(data{'RecipientKeyInfo'});

  return TAG('xenc:AgreementMethod', attr, body);
}




function parse_xenc_CipherData(data, x) {

  POPTAG_RAW(x[2],  'CipherValue', data.CipherValue);
  tag = find_xml_local(x[2], 'CipherReference', 1);
  h =  hash [];
  parse_xenc_CipherReference(h, aux1);
  data{'CipherReference'} = h;

}

function build_xenc_CipherData(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'CipherValue', data.CipherValue);
  push body, build_xenc_CipherReference(data{'CipherReference'});

  return TAG('xenc:CipherData', attr, body);
}




function parse_xenc_CipherReference(data, x) {
  POPATTR(x[1], 'URI', data.URI);

  tag = find_xml_local(x[2], 'Transforms', 1);
  h =  hash [];
  parse_xenc_Transforms(h, aux1);
  data{'Transforms'} = h;

}

function build_xenc_CipherReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'URI', data.URI);

  push body, build_xenc_Transforms(data{'Transforms'});

  return TAG('xenc:CipherReference', attr, body);
}




function parse_xenc_DataReference(data, x) {
  POPATTR(x[1], 'URI', data.URI);


}

function build_xenc_DataReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'URI', data.URI);


  return TAG('xenc:DataReference', attr, body);
}




function parse_xenc_EncryptedData(data, x) {
  POPATTR(x[1], 'Encoding', data.Encoding);
  POPATTR(x[1], 'Id', data.Id);
  POPATTR(x[1], 'MimeType', data.MimeType);
  POPATTR(x[1], 'Type', data.Type);

  tag = find_xml_local(x[2], 'EncryptionMethod', 1);
  h =  hash [];
  parse_xenc_EncryptionMethod(h, aux1);
  data{'EncryptionMethod'} = h;
  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;
  tag = find_xml_local(x[2], 'CipherData', 1);
  h =  hash [];
  parse_xenc_CipherData(h, aux1);
  data{'CipherData'} = h;
  tag = find_xml_local(x[2], 'EncryptionProperties', 1);
  h =  hash [];
  parse_xenc_EncryptionProperties(h, aux1);
  data{'EncryptionProperties'} = h;

}

function build_xenc_EncryptedData(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Encoding', data.Encoding);
  PUSHATTR(attr, 'Id', data.Id);
  PUSHATTR(attr, 'MimeType', data.MimeType);
  PUSHATTR(attr, 'Type', data.Type);

  push body, build_xenc_EncryptionMethod(data{'EncryptionMethod'});
  push body, build_ds_KeyInfo(data{'KeyInfo'});
  push body, build_xenc_CipherData(data{'CipherData'});
  push body, build_xenc_EncryptionProperties(data{'EncryptionProperties'});

  return TAG('xenc:EncryptedData', attr, body);
}




function parse_xenc_EncryptedKey(data, x) {
  POPATTR(x[1], 'Encoding', data.Encoding);
  POPATTR(x[1], 'Id', data.Id);
  POPATTR(x[1], 'MimeType', data.MimeType);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'Type', data.Type);

  tag = find_xml_local(x[2], 'EncryptionMethod', 1);
  h =  hash [];
  parse_xenc_EncryptionMethod(h, aux1);
  data{'EncryptionMethod'} = h;
  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;
  tag = find_xml_local(x[2], 'CipherData', 1);
  h =  hash [];
  parse_xenc_CipherData(h, aux1);
  data{'CipherData'} = h;
  tag = find_xml_local(x[2], 'EncryptionProperties', 1);
  h =  hash [];
  parse_xenc_EncryptionProperties(h, aux1);
  data{'EncryptionProperties'} = h;
  tag = find_xml_local(x[2], 'ReferenceList', 1);
  h =  hash [];
  parse_xenc_ReferenceList(h, aux1);
  data{'ReferenceList'} = h;
  POPTAG_RAW(x[2],  'CarriedKeyName', data.CarriedKeyName);

}

function build_xenc_EncryptedKey(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Encoding', data.Encoding);
  PUSHATTR(attr, 'Id', data.Id);
  PUSHATTR(attr, 'MimeType', data.MimeType);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'Type', data.Type);

  push body, build_xenc_EncryptionMethod(data{'EncryptionMethod'});
  push body, build_ds_KeyInfo(data{'KeyInfo'});
  push body, build_xenc_CipherData(data{'CipherData'});
  push body, build_xenc_EncryptionProperties(data{'EncryptionProperties'});
  push body, build_xenc_ReferenceList(data{'ReferenceList'});
  PUSHTAG_RAW(body, 'CarriedKeyName', data.CarriedKeyName);

  return TAG('xenc:EncryptedKey', attr, body);
}




function parse_xenc_EncryptionMethod(data, x) {
  POPATTR(x[1], 'Algorithm', data.Algorithm);

  POPTAG_RAW(x[2],  'KeySize', data.KeySize);
  POPTAG_RAW(x[2],  'OAEPparams', data.OAEPparams);

}

function build_xenc_EncryptionMethod(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Algorithm', data.Algorithm);

  PUSHTAG_RAW(body, 'KeySize', data.KeySize);
  PUSHTAG_RAW(body, 'OAEPparams', data.OAEPparams);

  return TAG('xenc:EncryptionMethod', attr, body);
}




function parse_xenc_EncryptionProperties(data, x) {
  POPATTR(x[1], 'Id', data.Id);

  for (i=1; tag = find_xml_local(x[2], 'EncryptionProperty', i); ++i) {
    h =  hash [];
    parse_xenc_EncryptionProperty(h, tag);
    push data{'EncryptionProperty'}, h;
  }

}

function build_xenc_EncryptionProperties(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Id', data.Id);

  for d(data{'EncryptionProperty'}) push body,build_xenc_EncryptionProperty(d);

  return TAG('xenc:EncryptionProperties', attr, body);
}




function parse_xenc_EncryptionProperty(data, x) {
  POPATTR(x[1], 'Id', data.Id);
  POPATTR(x[1], 'Target', data.Target);


}

function build_xenc_EncryptionProperty(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Id', data.Id);
  PUSHATTR(attr, 'Target', data.Target);


  return TAG('xenc:EncryptionProperty', attr, body);
}




function parse_xenc_KeyReference(data, x) {
  POPATTR(x[1], 'URI', data.URI);


}

function build_xenc_KeyReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'URI', data.URI);


  return TAG('xenc:KeyReference', attr, body);
}




function parse_xenc_OriginatorKeyInfo(data, x) {
  POPATTR(x[1], 'Id', data.Id);

  for (i=1; tag = find_xml_local(x[2], 'KeyName', i); ++i)
    push data{'KeyName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'KeyValue', i); ++i) {
    h =  hash [];
    parse_ds_KeyValue(h, tag);
    push data{'KeyValue'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RetrievalMethod', i); ++i) {
    h =  hash [];
    parse_ds_RetrievalMethod(h, tag);
    push data{'RetrievalMethod'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'X509Data', i); ++i) {
    h =  hash [];
    parse_ds_X509Data(h, tag);
    push data{'X509Data'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PGPData', i); ++i) {
    h =  hash [];
    parse_ds_PGPData(h, tag);
    push data{'PGPData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SPKIData', i); ++i) {
    h =  hash [];
    parse_ds_SPKIData(h, tag);
    push data{'SPKIData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'MgmtData', i); ++i)
    push data{'MgmtData'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'EncryptedKey', i); ++i) {
    h =  hash [];
    parse_xenc_EncryptedKey(h, tag);
    push data{'EncryptedKey'}, h;
  }

}

function build_xenc_OriginatorKeyInfo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Id', data.Id);

  for d(data{'KeyName'})PUSHTAG_RAW(body,'KeyName',d);
  for d(data{'KeyValue'}) push body,build_ds_KeyValue(d);
  for d(data{'RetrievalMethod'}) push body,build_ds_RetrievalMethod(d);
  for d(data{'X509Data'}) push body,build_ds_X509Data(d);
  for d(data{'PGPData'}) push body,build_ds_PGPData(d);
  for d(data{'SPKIData'}) push body,build_ds_SPKIData(d);
  for d(data{'MgmtData'})PUSHTAG_RAW(body,'MgmtData',d);
  for d(data{'EncryptedKey'}) push body,build_xenc_EncryptedKey(d);

  return TAG('xenc:OriginatorKeyInfo', attr, body);
}




function parse_xenc_RecipientKeyInfo(data, x) {
  POPATTR(x[1], 'Id', data.Id);

  for (i=1; tag = find_xml_local(x[2], 'KeyName', i); ++i)
    push data{'KeyName'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'KeyValue', i); ++i) {
    h =  hash [];
    parse_ds_KeyValue(h, tag);
    push data{'KeyValue'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RetrievalMethod', i); ++i) {
    h =  hash [];
    parse_ds_RetrievalMethod(h, tag);
    push data{'RetrievalMethod'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'X509Data', i); ++i) {
    h =  hash [];
    parse_ds_X509Data(h, tag);
    push data{'X509Data'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PGPData', i); ++i) {
    h =  hash [];
    parse_ds_PGPData(h, tag);
    push data{'PGPData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SPKIData', i); ++i) {
    h =  hash [];
    parse_ds_SPKIData(h, tag);
    push data{'SPKIData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'MgmtData', i); ++i)
    push data{'MgmtData'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'EncryptedKey', i); ++i) {
    h =  hash [];
    parse_xenc_EncryptedKey(h, tag);
    push data{'EncryptedKey'}, h;
  }

}

function build_xenc_RecipientKeyInfo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Id', data.Id);

  for d(data{'KeyName'})PUSHTAG_RAW(body,'KeyName',d);
  for d(data{'KeyValue'}) push body,build_ds_KeyValue(d);
  for d(data{'RetrievalMethod'}) push body,build_ds_RetrievalMethod(d);
  for d(data{'X509Data'}) push body,build_ds_X509Data(d);
  for d(data{'PGPData'}) push body,build_ds_PGPData(d);
  for d(data{'SPKIData'}) push body,build_ds_SPKIData(d);
  for d(data{'MgmtData'})PUSHTAG_RAW(body,'MgmtData',d);
  for d(data{'EncryptedKey'}) push body,build_xenc_EncryptedKey(d);

  return TAG('xenc:RecipientKeyInfo', attr, body);
}




function parse_xenc_ReferenceList(data, x) {

  tag = find_xml_local(x[2], 'DataReference', 1);
  h =  hash [];
  parse_xenc_DataReference(h, aux1);
  data{'DataReference'} = h;
  tag = find_xml_local(x[2], 'KeyReference', 1);
  h =  hash [];
  parse_xenc_KeyReference(h, aux1);
  data{'KeyReference'} = h;

}

function build_xenc_ReferenceList(data) {
  attr = [];
  body = [];

  push body, build_xenc_DataReference(data{'DataReference'});
  push body, build_xenc_KeyReference(data{'KeyReference'});

  return TAG('xenc:ReferenceList', attr, body);
}




function parse_xenc_Transforms(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Transform', i); ++i) {
    h =  hash [];
    parse_ds_Transform(h, tag);
    push data{'Transform'}, h;
  }

}

function build_xenc_Transforms(data) {
  attr = [];
  body = [];

  for d(data{'Transform'}) push body,build_ds_Transform(d);

  return TAG('xenc:Transforms', attr, body);
}


/* EOF -- c/zx-xenc.ds */
