/* c/zx-demomed.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_demomed_DeleteObjectRequest(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ObjectID', i); ++i)
    push data{'ObjectID'}, tag[2];

}

function build_demomed_DeleteObjectRequest(data) {
  attr = [];
  body = [];

  for d(data{'ObjectID'})PUSHTAG_RAW(body,'ObjectID',d);

  return TAG('demomed:DeleteObjectRequest', attr, body);
}




function parse_demomed_DeleteObjectResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'Count', data.Count);

}

function build_demomed_DeleteObjectResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  PUSHTAG_RAW(body, 'Count', data.Count);

  return TAG('demomed:DeleteObjectResponse', attr, body);
}




function parse_demomed_GetObjectListRequest(data, x) {

  tag = find_xml_local(x[2], 'ObjectSearchParm', 1);
  h =  hash [];
  parse_demomed_ObjectSearchParm(h, aux1);
  data{'ObjectSearchParm'} = h;

}

function build_demomed_GetObjectListRequest(data) {
  attr = [];
  body = [];

  push body, build_demomed_ObjectSearchParm(data{'ObjectSearchParm'});

  return TAG('demomed:GetObjectListRequest', attr, body);
}




function parse_demomed_GetObjectListResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ObjectInfo', i); ++i) {
    h =  hash [];
    parse_demomed_ObjectInfo(h, tag);
    push data{'ObjectInfo'}, h;
  }

}

function build_demomed_GetObjectListResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'ObjectInfo'}) push body,build_demomed_ObjectInfo(d);

  return TAG('demomed:GetObjectListResponse', attr, body);
}




function parse_demomed_GetObjectRequest(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ObjectID', i); ++i)
    push data{'ObjectID'}, tag[2];

}

function build_demomed_GetObjectRequest(data) {
  attr = [];
  body = [];

  for d(data{'ObjectID'})PUSHTAG_RAW(body,'ObjectID',d);

  return TAG('demomed:GetObjectRequest', attr, body);
}




function parse_demomed_GetObjectResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ObjectData', i); ++i) {
    h =  hash [];
    parse_demomed_ObjectData(h, tag);
    push data{'ObjectData'}, h;
  }

}

function build_demomed_GetObjectResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'ObjectData'}) push body,build_demomed_ObjectData(d);

  return TAG('demomed:GetObjectResponse', attr, body);
}




function parse_demomed_Object(data, x) {
  POPATTR(x[1], 'reqID', data.reqID);

  tag = find_xml_local(x[2], 'ObjectInfo', 1);
  h =  hash [];
  parse_demomed_ObjectInfo(h, aux1);
  data{'ObjectInfo'} = h;
  tag = find_xml_local(x[2], 'ObjectData', 1);
  h =  hash [];
  parse_demomed_ObjectData(h, aux1);
  data{'ObjectData'} = h;

}

function build_demomed_Object(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqID', data.reqID);

  push body, build_demomed_ObjectInfo(data{'ObjectInfo'});
  push body, build_demomed_ObjectData(data{'ObjectData'});

  return TAG('demomed:Object', attr, body);
}




function parse_demomed_ObjectData(data, x) {
  POPATTR(x[1], 'objectID', data.objectID);


}

function build_demomed_ObjectData(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'objectID', data.objectID);


  return TAG('demomed:ObjectData', attr, body);
}




function parse_demomed_ObjectInfo(data, x) {
  POPATTR(x[1], 'objectID', data.objectID);

  POPTAG_RAW(x[2],  'Dir', data.Dir);
  POPTAG_RAW(x[2],  'Name', data.Name);
  POPTAG_RAW(x[2],  'Type', data.Type);
  POPTAG_RAW(x[2],  'Created', data.Created);
  POPTAG_RAW(x[2],  'Comment', data.Comment);

}

function build_demomed_ObjectInfo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'objectID', data.objectID);

  PUSHTAG_RAW(body, 'Dir', data.Dir);
  PUSHTAG_RAW(body, 'Name', data.Name);
  PUSHTAG_RAW(body, 'Type', data.Type);
  PUSHTAG_RAW(body, 'Created', data.Created);
  PUSHTAG_RAW(body, 'Comment', data.Comment);

  return TAG('demomed:ObjectInfo', attr, body);
}




function parse_demomed_ObjectSearchParm(data, x) {

  POPTAG_RAW(x[2],  'Dir', data.Dir);
  POPTAG_RAW(x[2],  'Name', data.Name);
  POPTAG_RAW(x[2],  'Type', data.Type);
  POPTAG_RAW(x[2],  'objectID', data.objectID);

}

function build_demomed_ObjectSearchParm(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Dir', data.Dir);
  PUSHTAG_RAW(body, 'Name', data.Name);
  PUSHTAG_RAW(body, 'Type', data.Type);
  PUSHTAG_RAW(body, 'objectID', data.objectID);

  return TAG('demomed:ObjectSearchParm', attr, body);
}




function parse_demomed_ObjectStoreInfo(data, x) {
  POPATTR(x[1], 'objectID', data.objectID);
  POPATTR(x[1], 'storeRef', data.storeRef);


}

function build_demomed_ObjectStoreInfo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'objectID', data.objectID);
  PUSHATTR(attr, 'storeRef', data.storeRef);


  return TAG('demomed:ObjectStoreInfo', attr, body);
}




function parse_demomed_StoreObjectRequest(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Object', i); ++i) {
    h =  hash [];
    parse_demomed_Object(h, tag);
    push data{'Object'}, h;
  }

}

function build_demomed_StoreObjectRequest(data) {
  attr = [];
  body = [];

  for d(data{'Object'}) push body,build_demomed_Object(d);

  return TAG('demomed:StoreObjectRequest', attr, body);
}




function parse_demomed_StoreObjectResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ObjectStoreInfo', i); ++i) {
    h =  hash [];
    parse_demomed_ObjectStoreInfo(h, tag);
    push data{'ObjectStoreInfo'}, h;
  }

}

function build_demomed_StoreObjectResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'ObjectStoreInfo'}) push body,build_demomed_ObjectStoreInfo(d);

  return TAG('demomed:StoreObjectResponse', attr, body);
}


/* EOF -- c/zx-demomed.ds */
