/* c/zx-wsse.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_wsse_BinarySecurityToken(data, x) {
  POPATTR(x[1], 'EncodingType', data.EncodingType);
  POPATTR(x[1], 'ValueType', data.ValueType);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);


}

function build_wsse_BinarySecurityToken(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'EncodingType', data.EncodingType);
  PUSHATTR(attr, 'ValueType', data.ValueType);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);


  return TAG('wsse:BinarySecurityToken', attr, body);
}




function parse_wsse_Embedded(data, x) {
  POPATTR(x[1], 'ValueType', data.ValueType);


}

function build_wsse_Embedded(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ValueType', data.ValueType);


  return TAG('wsse:Embedded', attr, body);
}




function parse_wsse_KeyIdentifier(data, x) {
  POPATTR(x[1], 'EncodingType', data.EncodingType);
  POPATTR(x[1], 'ValueType', data.ValueType);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);


}

function build_wsse_KeyIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'EncodingType', data.EncodingType);
  PUSHATTR(attr, 'ValueType', data.ValueType);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);


  return TAG('wsse:KeyIdentifier', attr, body);
}




function parse_wsse_Nonce(data, x) {
  POPATTR(x[1], 'EncodingType', data.EncodingType);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);


}

function build_wsse_Nonce(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'EncodingType', data.EncodingType);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);


  return TAG('wsse:Nonce', attr, body);
}




function parse_wsse_Password(data, x) {
  POPATTR(x[1], 'Type', data.Type);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);


}

function build_wsse_Password(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Type', data.Type);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);


  return TAG('wsse:Password', attr, body);
}




function parse_wsse_Reference(data, x) {
  POPATTR(x[1], 'URI', data.URI);
  POPATTR(x[1], 'ValueType', data.ValueType);


}

function build_wsse_Reference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'URI', data.URI);
  PUSHATTR(attr, 'ValueType', data.ValueType);


  return TAG('wsse:Reference', attr, body);
}




function parse_wsse_Security(data, x) {
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Assertion', 1);
  h =  hash [];
  parse_sa_Assertion(h, aux1);
  data{'Assertion'} = h;
  tag = find_xml_local(x[2], 'EncryptedAssertion', 1);
  h =  hash [];
  parse_sa_EncryptedAssertion(h, aux1);
  data{'EncryptedAssertion'} = h;
  tag = find_xml_local(x[2], 'sa11_Assertion', 1);
  h =  hash [];
  parse_sa11_Assertion(h, aux1);
  data{'sa11_Assertion'} = h;
  tag = find_xml_local(x[2], 'ff12_Assertion', 1);
  h =  hash [];
  parse_ff12_Assertion(h, aux1);
  data{'ff12_Assertion'} = h;
  tag = find_xml_local(x[2], 'BinarySecurityToken', 1);
  h =  hash [];
  parse_wsse_BinarySecurityToken(h, aux1);
  data{'BinarySecurityToken'} = h;
  tag = find_xml_local(x[2], 'SecurityTokenReference', 1);
  h =  hash [];
  parse_wsse_SecurityTokenReference(h, aux1);
  data{'SecurityTokenReference'} = h;
  tag = find_xml_local(x[2], 'Timestamp', 1);
  h =  hash [];
  parse_wsu_Timestamp(h, aux1);
  data{'Timestamp'} = h;

}

function build_wsse_Security(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_sa_Assertion(data{'Assertion'});
  push body, build_sa_EncryptedAssertion(data{'EncryptedAssertion'});
  push body, build_sa11_Assertion(data{'sa11_Assertion'});
  push body, build_ff12_Assertion(data{'ff12_Assertion'});
  push body, build_wsse_BinarySecurityToken(data{'BinarySecurityToken'});
  push body, build_wsse_SecurityTokenReference(data{'SecurityTokenReference'});
  push body, build_wsu_Timestamp(data{'Timestamp'});

  return TAG('wsse:Security', attr, body);
}




function parse_wsse_SecurityTokenReference(data, x) {
  POPATTR(x[1], 'wsse_Usage', data.wsse_Usage);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);

  tag = find_xml_local(x[2], 'KeyIdentifier', 1);
  h =  hash [];
  parse_wsse_KeyIdentifier(h, aux1);
  data{'KeyIdentifier'} = h;

}

function build_wsse_SecurityTokenReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wsse_Usage', data.wsse_Usage);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);

  push body, build_wsse_KeyIdentifier(data{'KeyIdentifier'});

  return TAG('wsse:SecurityTokenReference', attr, body);
}




function parse_wsse_TransformationParameters(data, x) {


}

function build_wsse_TransformationParameters(data) {
  attr = [];
  body = [];


  return TAG('wsse:TransformationParameters', attr, body);
}




function parse_wsse_Username(data, x) {
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);


}

function build_wsse_Username(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);


  return TAG('wsse:Username', attr, body);
}




function parse_wsse_UsernameToken(data, x) {
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);

  tag = find_xml_local(x[2], 'Username', 1);
  h =  hash [];
  parse_wsse_Username(h, aux1);
  data{'Username'} = h;

}

function build_wsse_UsernameToken(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);

  push body, build_wsse_Username(data{'Username'});

  return TAG('wsse:UsernameToken', attr, body);
}


/* EOF -- c/zx-wsse.ds */
