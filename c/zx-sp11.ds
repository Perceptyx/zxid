/* c/zx-sp11.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_sp11_AttributeQuery(data, x) {
  POPATTR(x[1], 'Resource', data.Resource);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AttributeDesignator', i); ++i) {
    h =  hash [];
    parse_sa11_AttributeDesignator(h, tag);
    push data{'AttributeDesignator'}, h;
  }

}

function build_sp11_AttributeQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Resource', data.Resource);

  push body, build_sa11_Subject(data{'Subject'});
  for d(data{'AttributeDesignator'}) push body,build_sa11_AttributeDesignator(d);

  return TAG('sp11:AttributeQuery', attr, body);
}




function parse_sp11_AuthenticationQuery(data, x) {
  POPATTR(x[1], 'AuthenticationMethod', data.AuthenticationMethod);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;

}

function build_sp11_AuthenticationQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AuthenticationMethod', data.AuthenticationMethod);

  push body, build_sa11_Subject(data{'Subject'});

  return TAG('sp11:AuthenticationQuery', attr, body);
}




function parse_sp11_AuthorizationDecisionQuery(data, x) {
  POPATTR(x[1], 'Resource', data.Resource);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_sa11_Action(h, tag);
    push data{'Action'}, h;
  }
  tag = find_xml_local(x[2], 'Evidence', 1);
  h =  hash [];
  parse_sa11_Evidence(h, aux1);
  data{'Evidence'} = h;

}

function build_sp11_AuthorizationDecisionQuery(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Resource', data.Resource);

  push body, build_sa11_Subject(data{'Subject'});
  for d(data{'Action'}) push body,build_sa11_Action(d);
  push body, build_sa11_Evidence(data{'Evidence'});

  return TAG('sp11:AuthorizationDecisionQuery', attr, body);
}




function parse_sp11_Request(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'RequestID', data.RequestID);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  POPTAG_RAW(x[2],  'Query', data.Query);
  tag = find_xml_local(x[2], 'SubjectQuery', 1);
  h =  hash [];
  parse_sp11_SubjectQuery(h, aux1);
  data{'SubjectQuery'} = h;
  tag = find_xml_local(x[2], 'AuthenticationQuery', 1);
  h =  hash [];
  parse_sp11_AuthenticationQuery(h, aux1);
  data{'AuthenticationQuery'} = h;
  tag = find_xml_local(x[2], 'AttributeQuery', 1);
  h =  hash [];
  parse_sp11_AttributeQuery(h, aux1);
  data{'AttributeQuery'} = h;
  tag = find_xml_local(x[2], 'AuthorizationDecisionQuery', 1);
  h =  hash [];
  parse_sp11_AuthorizationDecisionQuery(h, aux1);
  data{'AuthorizationDecisionQuery'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDReference', i); ++i)
    push data{'AssertionIDReference'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AssertionArtifact', i); ++i)
    push data{'AssertionArtifact'}, tag[2];

}

function build_sp11_Request(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'RequestID', data.RequestID);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  PUSHTAG_RAW(body, 'Query', data.Query);
  push body, build_sp11_SubjectQuery(data{'SubjectQuery'});
  push body, build_sp11_AuthenticationQuery(data{'AuthenticationQuery'});
  push body, build_sp11_AttributeQuery(data{'AttributeQuery'});
  push body, build_sp11_AuthorizationDecisionQuery(data{'AuthorizationDecisionQuery'});
  for d(data{'AssertionIDReference'})PUSHTAG_RAW(body,'AssertionIDReference',d);
  for d(data{'AssertionArtifact'})PUSHTAG_RAW(body,'AssertionArtifact',d);

  return TAG('sp11:Request', attr, body);
}




function parse_sp11_Response(data, x) {
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'ResponseID', data.ResponseID);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp11_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Assertion', i); ++i) {
    h =  hash [];
    parse_sa11_Assertion(h, tag);
    push data{'Assertion'}, h;
  }

}

function build_sp11_Response(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'ResponseID', data.ResponseID);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp11_Status(data{'Status'});
  for d(data{'Assertion'}) push body,build_sa11_Assertion(d);

  return TAG('sp11:Response', attr, body);
}




function parse_sp11_Status(data, x) {

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_sp11_StatusCode(h, aux1);
  data{'StatusCode'} = h;
  POPTAG_RAW(x[2],  'StatusMessage', data.StatusMessage);
  tag = find_xml_local(x[2], 'StatusDetail', 1);
  h =  hash [];
  parse_sp11_StatusDetail(h, aux1);
  data{'StatusDetail'} = h;

}

function build_sp11_Status(data) {
  attr = [];
  body = [];

  push body, build_sp11_StatusCode(data{'StatusCode'});
  PUSHTAG_RAW(body, 'StatusMessage', data.StatusMessage);
  push body, build_sp11_StatusDetail(data{'StatusDetail'});

  return TAG('sp11:Status', attr, body);
}




function parse_sp11_StatusCode(data, x) {
  POPATTR(x[1], 'Value', data.Value);

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_sp11_StatusCode(h, aux1);
  data{'StatusCode'} = h;

}

function build_sp11_StatusCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Value', data.Value);

  push body, build_sp11_StatusCode(data{'StatusCode'});

  return TAG('sp11:StatusCode', attr, body);
}




function parse_sp11_StatusDetail(data, x) {


}

function build_sp11_StatusDetail(data) {
  attr = [];
  body = [];


  return TAG('sp11:StatusDetail', attr, body);
}




function parse_sp11_SubjectQuery(data, x) {

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;

}

function build_sp11_SubjectQuery(data) {
  attr = [];
  body = [];

  push body, build_sa11_Subject(data{'Subject'});

  return TAG('sp11:SubjectQuery', attr, body);
}


/* EOF -- c/zx-sp11.ds */
