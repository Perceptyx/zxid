/* c/zx-ps.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_ps_AddCollectionRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_AddCollectionRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_ps_Object(data{'Object'});
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:AddCollectionRequest', attr, body);
}




function parse_ps_AddCollectionResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;

}

function build_ps_AddCollectionResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  push body, build_ps_Object(data{'Object'});

  return TAG('ps:AddCollectionResponse', attr, body);
}




function parse_ps_AddEntityRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;
  POPTAG_RAW(x[2],  'PStoSPRedirectURL', data.PStoSPRedirectURL);
  tag = find_xml_local(x[2], 'CreatePSObject', 1);
  h =  hash [];
  parse_ps_CreatePSObject(h, aux1);
  data{'CreatePSObject'} = h;
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;
  tag = find_xml_local(x[2], 'TokenPolicy', 1);
  h =  hash [];
  parse_sec_TokenPolicy(h, aux1);
  data{'TokenPolicy'} = h;

}

function build_ps_AddEntityRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_ps_Object(data{'Object'});
  PUSHTAG_RAW(body, 'PStoSPRedirectURL', data.PStoSPRedirectURL);
  push body, build_ps_CreatePSObject(data{'CreatePSObject'});
  push body, build_ps_Subscription(data{'Subscription'});
  push body, build_sec_TokenPolicy(data{'TokenPolicy'});

  return TAG('ps:AddEntityRequest', attr, body);
}




function parse_ps_AddEntityResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;
  POPTAG_RAW(x[2],  'SPtoPSRedirectURL', data.SPtoPSRedirectURL);
  POPTAG_RAW(x[2],  'QueryString', data.QueryString);

}

function build_ps_AddEntityResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  push body, build_ps_Object(data{'Object'});
  PUSHTAG_RAW(body, 'SPtoPSRedirectURL', data.SPtoPSRedirectURL);
  PUSHTAG_RAW(body, 'QueryString', data.QueryString);

  return TAG('ps:AddEntityResponse', attr, body);
}




function parse_ps_AddKnownEntityRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;
  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;
  tag = find_xml_local(x[2], 'CreatePSObject', 1);
  h =  hash [];
  parse_ps_CreatePSObject(h, aux1);
  data{'CreatePSObject'} = h;
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;
  tag = find_xml_local(x[2], 'TokenPolicy', 1);
  h =  hash [];
  parse_sec_TokenPolicy(h, aux1);
  data{'TokenPolicy'} = h;

}

function build_ps_AddKnownEntityRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_ps_Object(data{'Object'});
  push body, build_sec_Token(data{'Token'});
  push body, build_ps_CreatePSObject(data{'CreatePSObject'});
  push body, build_ps_Subscription(data{'Subscription'});
  push body, build_sec_TokenPolicy(data{'TokenPolicy'});

  return TAG('ps:AddKnownEntityRequest', attr, body);
}




function parse_ps_AddKnownEntityResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;
  POPTAG_RAW(x[2],  'SPtoPSRedirectURL', data.SPtoPSRedirectURL);
  POPTAG_RAW(x[2],  'QueryString', data.QueryString);

}

function build_ps_AddKnownEntityResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  push body, build_ps_Object(data{'Object'});
  PUSHTAG_RAW(body, 'SPtoPSRedirectURL', data.SPtoPSRedirectURL);
  PUSHTAG_RAW(body, 'QueryString', data.QueryString);

  return TAG('ps:AddKnownEntityResponse', attr, body);
}




function parse_ps_AddToCollectionRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);
  for (i=1; tag = find_xml_local(x[2], 'ObjectID', i); ++i)
    push data{'ObjectID'}, tag[2];
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_AddToCollectionRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);
  for d(data{'ObjectID'})PUSHTAG_RAW(body,'ObjectID',d);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:AddToCollectionRequest', attr, body);
}




function parse_ps_AddToCollectionResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_ps_AddToCollectionResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});

  return TAG('ps:AddToCollectionResponse', attr, body);
}




function parse_ps_CreatePSObject(data, x) {


}

function build_ps_CreatePSObject(data) {
  attr = [];
  body = [];


  return TAG('ps:CreatePSObject', attr, body);
}




function parse_ps_DisplayName(data, x) {
  POPATTR(x[1], 'IsDefault', data.IsDefault);
  POPATTR(x[1], 'Locale', data.Locale);


}

function build_ps_DisplayName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IsDefault', data.IsDefault);
  PUSHATTR(attr, 'Locale', data.Locale);


  return TAG('ps:DisplayName', attr, body);
}




function parse_ps_GetObjectInfoRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_GetObjectInfoRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:GetObjectInfoRequest', attr, body);
}




function parse_ps_GetObjectInfoResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;

}

function build_ps_GetObjectInfoResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  push body, build_ps_Object(data{'Object'});

  return TAG('ps:GetObjectInfoResponse', attr, body);
}




function parse_ps_ItemData(data, x) {

  tag = find_xml_local(x[2], 'Object', 1);
  h =  hash [];
  parse_ps_Object(h, aux1);
  data{'Object'} = h;

}

function build_ps_ItemData(data) {
  attr = [];
  body = [];

  push body, build_ps_Object(data{'Object'});

  return TAG('ps:ItemData', attr, body);
}




function parse_ps_ListMembersRequest(data, x) {
  POPATTR(x[1], 'Count', data.Count);
  POPATTR(x[1], 'Offset', data.Offset);
  POPATTR(x[1], 'Structured', data.Structured);
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_ListMembersRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Count', data.Count);
  PUSHATTR(attr, 'Offset', data.Offset);
  PUSHATTR(attr, 'Structured', data.Structured);
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:ListMembersRequest', attr, body);
}




function parse_ps_ListMembersResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Object', i); ++i) {
    h =  hash [];
    parse_ps_Object(h, tag);
    push data{'Object'}, h;
  }

}

function build_ps_ListMembersResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  for d(data{'Object'}) push body,build_ps_Object(d);

  return TAG('ps:ListMembersResponse', attr, body);
}




function parse_ps_Notification(data, x) {
  POPATTR(x[1], 'endReason', data.endReason);
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'TestResult', i); ++i) {
    h =  hash [];
    parse_lu_TestResult(h, tag);
    push data{'TestResult'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_ps_ItemData(h, tag);
    push data{'ItemData'}, h;
  }

}

function build_ps_Notification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'endReason', data.endReason);
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'TestResult'}) push body,build_lu_TestResult(d);
  for d(data{'ItemData'}) push body,build_ps_ItemData(d);

  return TAG('ps:Notification', attr, body);
}




function parse_ps_Notify(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  for (i=1; tag = find_xml_local(x[2], 'Notification', i); ++i) {
    h =  hash [];
    parse_ps_Notification(h, tag);
    push data{'Notification'}, h;
  }

}

function build_ps_Notify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  for d(data{'Notification'}) push body,build_ps_Notification(d);

  return TAG('ps:Notify', attr, body);
}




function parse_ps_NotifyResponse(data, x) {
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_lu_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ps_NotifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);

  push body, build_lu_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_lu_Extension(d);

  return TAG('ps:NotifyResponse', attr, body);
}




function parse_ps_Object(data, x) {
  POPATTR(x[1], 'CreatedDateTime', data.CreatedDateTime);
  POPATTR(x[1], 'ModifiedDateTime', data.ModifiedDateTime);
  POPATTR(x[1], 'NodeType', data.NodeType);

  POPTAG_RAW(x[2],  'ObjectID', data.ObjectID);
  for (i=1; tag = find_xml_local(x[2], 'DisplayName', i); ++i) {
    h =  hash [];
    parse_ps_DisplayName(h, tag);
    push data{'DisplayName'}, h;
  }
  tag = find_xml_local(x[2], 'Tag', 1);
  h =  hash [];
  parse_ps_Tag(h, aux1);
  data{'Tag'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Object', i); ++i) {
    h =  hash [];
    parse_ps_Object(h, tag);
    push data{'Object'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ObjectRef', i); ++i)
    push data{'ObjectRef'}, tag[2];

}

function build_ps_Object(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'CreatedDateTime', data.CreatedDateTime);
  PUSHATTR(attr, 'ModifiedDateTime', data.ModifiedDateTime);
  PUSHATTR(attr, 'NodeType', data.NodeType);

  PUSHTAG_RAW(body, 'ObjectID', data.ObjectID);
  for d(data{'DisplayName'}) push body,build_ps_DisplayName(d);
  push body, build_ps_Tag(data{'Tag'});
  for d(data{'Object'}) push body,build_ps_Object(d);
  for d(data{'ObjectRef'})PUSHTAG_RAW(body,'ObjectRef',d);

  return TAG('ps:Object', attr, body);
}




function parse_ps_QueryObjectsRequest(data, x) {
  POPATTR(x[1], 'Count', data.Count);
  POPATTR(x[1], 'Offset', data.Offset);
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'Filter', data.Filter);
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_QueryObjectsRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Count', data.Count);
  PUSHATTR(attr, 'Offset', data.Offset);
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'Filter', data.Filter);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:QueryObjectsRequest', attr, body);
}




function parse_ps_QueryObjectsResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Object', i); ++i) {
    h =  hash [];
    parse_ps_Object(h, tag);
    push data{'Object'}, h;
  }

}

function build_ps_QueryObjectsResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  for d(data{'Object'}) push body,build_ps_Object(d);

  return TAG('ps:QueryObjectsResponse', attr, body);
}




function parse_ps_RemoveCollectionRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'TargetObjectID', i); ++i)
    push data{'TargetObjectID'}, tag[2];

}

function build_ps_RemoveCollectionRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'TargetObjectID'})PUSHTAG_RAW(body,'TargetObjectID',d);

  return TAG('ps:RemoveCollectionRequest', attr, body);
}




function parse_ps_RemoveCollectionResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_ps_RemoveCollectionResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});

  return TAG('ps:RemoveCollectionResponse', attr, body);
}




function parse_ps_RemoveEntityRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'TargetObjectID', i); ++i)
    push data{'TargetObjectID'}, tag[2];

}

function build_ps_RemoveEntityRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'TargetObjectID'})PUSHTAG_RAW(body,'TargetObjectID',d);

  return TAG('ps:RemoveEntityRequest', attr, body);
}




function parse_ps_RemoveEntityResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_ps_RemoveEntityResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});

  return TAG('ps:RemoveEntityResponse', attr, body);
}




function parse_ps_RemoveFromCollectionRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);
  for (i=1; tag = find_xml_local(x[2], 'ObjectID', i); ++i)
    push data{'ObjectID'}, tag[2];
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_RemoveFromCollectionRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);
  for d(data{'ObjectID'})PUSHTAG_RAW(body,'ObjectID',d);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:RemoveFromCollectionRequest', attr, body);
}




function parse_ps_RemoveFromCollectionResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_ps_RemoveFromCollectionResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});

  return TAG('ps:RemoveFromCollectionResponse', attr, body);
}




function parse_ps_ResolveIdentifierRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'ResolveInput', i); ++i) {
    h =  hash [];
    parse_ps_ResolveInput(h, tag);
    push data{'ResolveInput'}, h;
  }

}

function build_ps_ResolveIdentifierRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'ResolveInput'}) push body,build_ps_ResolveInput(d);

  return TAG('ps:ResolveIdentifierRequest', attr, body);
}




function parse_ps_ResolveIdentifierResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ResolveOutput', i); ++i) {
    h =  hash [];
    parse_ps_ResolveOutput(h, tag);
    push data{'ResolveOutput'}, h;
  }

}

function build_ps_ResolveIdentifierResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  for d(data{'ResolveOutput'}) push body,build_ps_ResolveOutput(d);

  return TAG('ps:ResolveIdentifierResponse', attr, body);
}




function parse_ps_ResolveInput(data, x) {
  POPATTR(x[1], 'reqID', data.reqID);

  tag = find_xml_local(x[2], 'TokenPolicy', 1);
  h =  hash [];
  parse_sec_TokenPolicy(h, aux1);
  data{'TokenPolicy'} = h;
  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;
  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);

}

function build_ps_ResolveInput(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqID', data.reqID);

  push body, build_sec_TokenPolicy(data{'TokenPolicy'});
  push body, build_sec_Token(data{'Token'});
  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);

  return TAG('ps:ResolveInput', attr, body);
}




function parse_ps_ResolveOutput(data, x) {
  POPATTR(x[1], 'reqRef', data.reqRef);

  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;

}

function build_ps_ResolveOutput(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqRef', data.reqRef);

  push body, build_sec_Token(data{'Token'});

  return TAG('ps:ResolveOutput', attr, body);
}




function parse_ps_SetObjectInfoRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'Object', i); ++i) {
    h =  hash [];
    parse_ps_Object(h, tag);
    push data{'Object'}, h;
  }
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_SetObjectInfoRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'Object'}) push body,build_ps_Object(d);
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:SetObjectInfoRequest', attr, body);
}




function parse_ps_SetObjectInfoResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_ps_SetObjectInfoResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});

  return TAG('ps:SetObjectInfoResponse', attr, body);
}




function parse_ps_Subscription(data, x) {
  POPATTR(x[1], 'adminNotifyToRef', data.adminNotifyToRef);
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'includeData', data.includeData);
  POPATTR(x[1], 'notifyToRef', data.notifyToRef);
  POPATTR(x[1], 'starts', data.starts);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'RefItem', i); ++i) {
    h =  hash [];
    parse_subs_RefItem(h, tag);
    push data{'RefItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_lu_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ps_Subscription(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'adminNotifyToRef', data.adminNotifyToRef);
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'includeData', data.includeData);
  PUSHATTR(attr, 'notifyToRef', data.notifyToRef);
  PUSHATTR(attr, 'starts', data.starts);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'RefItem'}) push body,build_subs_RefItem(d);
  for d(data{'Extension'}) push body,build_lu_Extension(d);

  return TAG('ps:Subscription', attr, body);
}




function parse_ps_Tag(data, x) {
  POPATTR(x[1], 'Ref', data.Ref);


}

function build_ps_Tag(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Ref', data.Ref);


  return TAG('ps:Tag', attr, body);
}




function parse_ps_TestMembershipRequest(data, x) {
  POPATTR(x[1], 'id', data.id);

  POPTAG_RAW(x[2],  'TargetObjectID', data.TargetObjectID);
  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;
  tag = find_xml_local(x[2], 'Subscription', 1);
  h =  hash [];
  parse_ps_Subscription(h, aux1);
  data{'Subscription'} = h;

}

function build_ps_TestMembershipRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  PUSHTAG_RAW(body, 'TargetObjectID', data.TargetObjectID);
  push body, build_sec_Token(data{'Token'});
  push body, build_ps_Subscription(data{'Subscription'});

  return TAG('ps:TestMembershipRequest', attr, body);
}




function parse_ps_TestMembershipResponse(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'Result', data.Result);

}

function build_ps_TestMembershipResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'id', data.id);

  push body, build_lu_Status(data{'Status'});
  PUSHTAG_RAW(body, 'Result', data.Result);

  return TAG('ps:TestMembershipResponse', attr, body);
}


/* EOF -- c/zx-ps.ds */
