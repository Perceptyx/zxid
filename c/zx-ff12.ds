/* c/zx-ff12.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_ff12_Assertion(data, x) {
  POPATTR(x[1], 'AssertionID', data.AssertionID);
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);

  tag = find_xml_local(x[2], 'Conditions', 1);
  h =  hash [];
  parse_sa11_Conditions(h, aux1);
  data{'Conditions'} = h;
  tag = find_xml_local(x[2], 'Advice', 1);
  h =  hash [];
  parse_sa11_Advice(h, aux1);
  data{'Advice'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Statement', i); ++i)
    push data{'Statement'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SubjectStatement', i); ++i) {
    h =  hash [];
    parse_sa11_SubjectStatement(h, tag);
    push data{'SubjectStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthenticationStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AuthenticationStatement(h, tag);
    push data{'AuthenticationStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthorizationDecisionStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AuthorizationDecisionStatement(h, tag);
    push data{'AuthorizationDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeStatement', i); ++i) {
    h =  hash [];
    parse_sa11_AttributeStatement(h, tag);
    push data{'AttributeStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'XACMLAuthzDecisionStatement', i); ++i) {
    h =  hash [];
    parse_xasa_XACMLAuthzDecisionStatement(h, tag);
    push data{'XACMLAuthzDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'XACMLPolicyStatement', i); ++i) {
    h =  hash [];
    parse_xasa_XACMLPolicyStatement(h, tag);
    push data{'XACMLPolicyStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'xasacd1_XACMLAuthzDecisionStatement', i); ++i) {
    h =  hash [];
    parse_xasacd1_XACMLAuthzDecisionStatement(h, tag);
    push data{'xasacd1_XACMLAuthzDecisionStatement'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'xasacd1_XACMLPolicyStatement', i); ++i) {
    h =  hash [];
    parse_xasacd1_XACMLPolicyStatement(h, tag);
    push data{'xasacd1_XACMLPolicyStatement'}, h;
  }
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;

}

function build_ff12_Assertion(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AssertionID', data.AssertionID);
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);

  push body, build_sa11_Conditions(data{'Conditions'});
  push body, build_sa11_Advice(data{'Advice'});
  for d(data{'Statement'})PUSHTAG_RAW(body,'Statement',d);
  for d(data{'SubjectStatement'}) push body,build_sa11_SubjectStatement(d);
  for d(data{'AuthenticationStatement'}) push body,build_sa11_AuthenticationStatement(d);
  for d(data{'AuthorizationDecisionStatement'}) push body,build_sa11_AuthorizationDecisionStatement(d);
  for d(data{'AttributeStatement'}) push body,build_sa11_AttributeStatement(d);
  for d(data{'XACMLAuthzDecisionStatement'}) push body,build_xasa_XACMLAuthzDecisionStatement(d);
  for d(data{'XACMLPolicyStatement'}) push body,build_xasa_XACMLPolicyStatement(d);
  for d(data{'xasacd1_XACMLAuthzDecisionStatement'}) push body,build_xasacd1_XACMLAuthzDecisionStatement(d);
  for d(data{'xasacd1_XACMLPolicyStatement'}) push body,build_xasacd1_XACMLPolicyStatement(d);
  push body, build_ds_Signature(data{'Signature'});

  return TAG('ff12:Assertion', attr, body);
}




function parse_ff12_AuthenticationStatement(data, x) {
  POPATTR(x[1], 'AuthenticationInstant', data.AuthenticationInstant);
  POPATTR(x[1], 'AuthenticationMethod', data.AuthenticationMethod);
  POPATTR(x[1], 'ReauthenticateOnOrAfter', data.ReauthenticateOnOrAfter);
  POPATTR(x[1], 'SessionIndex', data.SessionIndex);

  tag = find_xml_local(x[2], 'Subject', 1);
  h =  hash [];
  parse_sa11_Subject(h, aux1);
  data{'Subject'} = h;
  tag = find_xml_local(x[2], 'SubjectLocality', 1);
  h =  hash [];
  parse_sa11_SubjectLocality(h, aux1);
  data{'SubjectLocality'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AuthorityBinding', i); ++i) {
    h =  hash [];
    parse_sa11_AuthorityBinding(h, tag);
    push data{'AuthorityBinding'}, h;
  }
  tag = find_xml_local(x[2], 'AuthnContext', 1);
  h =  hash [];
  parse_ff12_AuthnContext(h, aux1);
  data{'AuthnContext'} = h;

}

function build_ff12_AuthenticationStatement(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AuthenticationInstant', data.AuthenticationInstant);
  PUSHATTR(attr, 'AuthenticationMethod', data.AuthenticationMethod);
  PUSHATTR(attr, 'ReauthenticateOnOrAfter', data.ReauthenticateOnOrAfter);
  PUSHATTR(attr, 'SessionIndex', data.SessionIndex);

  push body, build_sa11_Subject(data{'Subject'});
  push body, build_sa11_SubjectLocality(data{'SubjectLocality'});
  for d(data{'AuthorityBinding'}) push body,build_sa11_AuthorityBinding(d);
  push body, build_ff12_AuthnContext(data{'AuthnContext'});

  return TAG('ff12:AuthenticationStatement', attr, body);
}




function parse_ff12_AuthnContext(data, x) {

  POPTAG_RAW(x[2],  'AuthnContextClassRef', data.AuthnContextClassRef);
  tag = find_xml_local(x[2], 'AuthenticationContextStatement', 1);
  h =  hash [];
  parse_ac_AuthenticationContextStatement(h, aux1);
  data{'AuthenticationContextStatement'} = h;
  POPTAG_RAW(x[2],  'AuthnContextStatementRef', data.AuthnContextStatementRef);

}

function build_ff12_AuthnContext(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'AuthnContextClassRef', data.AuthnContextClassRef);
  push body, build_ac_AuthenticationContextStatement(data{'AuthenticationContextStatement'});
  PUSHTAG_RAW(body, 'AuthnContextStatementRef', data.AuthnContextStatementRef);

  return TAG('ff12:AuthnContext', attr, body);
}




function parse_ff12_AuthnRequest(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'RequestID', data.RequestID);
  POPATTR(x[1], 'consent', data.consent);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  POPTAG_RAW(x[2],  'AffiliationID', data.AffiliationID);
  POPTAG_RAW(x[2],  'NameIDPolicy', data.NameIDPolicy);
  POPTAG_RAW(x[2],  'ForceAuthn', data.ForceAuthn);
  POPTAG_RAW(x[2],  'IsPassive', data.IsPassive);
  POPTAG_RAW(x[2],  'ProtocolProfile', data.ProtocolProfile);
  POPTAG_RAW(x[2],  'AssertionConsumerServiceID', data.AssertionConsumerServiceID);
  tag = find_xml_local(x[2], 'RequestAuthnContext', 1);
  h =  hash [];
  parse_ff12_RequestAuthnContext(h, aux1);
  data{'RequestAuthnContext'} = h;
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);
  tag = find_xml_local(x[2], 'Scoping', 1);
  h =  hash [];
  parse_ff12_Scoping(h, aux1);
  data{'Scoping'} = h;

}

function build_ff12_AuthnRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'RequestID', data.RequestID);
  PUSHATTR(attr, 'consent', data.consent);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  PUSHTAG_RAW(body, 'AffiliationID', data.AffiliationID);
  PUSHTAG_RAW(body, 'NameIDPolicy', data.NameIDPolicy);
  PUSHTAG_RAW(body, 'ForceAuthn', data.ForceAuthn);
  PUSHTAG_RAW(body, 'IsPassive', data.IsPassive);
  PUSHTAG_RAW(body, 'ProtocolProfile', data.ProtocolProfile);
  PUSHTAG_RAW(body, 'AssertionConsumerServiceID', data.AssertionConsumerServiceID);
  push body, build_ff12_RequestAuthnContext(data{'RequestAuthnContext'});
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);
  push body, build_ff12_Scoping(data{'Scoping'});

  return TAG('ff12:AuthnRequest', attr, body);
}




function parse_ff12_AuthnRequestEnvelope(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  tag = find_xml_local(x[2], 'AuthnRequest', 1);
  h =  hash [];
  parse_ff12_AuthnRequest(h, aux1);
  data{'AuthnRequest'} = h;
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  POPTAG_RAW(x[2],  'ProviderName', data.ProviderName);
  POPTAG_RAW(x[2],  'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);
  tag = find_xml_local(x[2], 'IDPList', 1);
  h =  hash [];
  parse_ff12_IDPList(h, aux1);
  data{'IDPList'} = h;
  POPTAG_RAW(x[2],  'IsPassive', data.IsPassive);

}

function build_ff12_AuthnRequestEnvelope(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  push body, build_ff12_AuthnRequest(data{'AuthnRequest'});
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  PUSHTAG_RAW(body, 'ProviderName', data.ProviderName);
  PUSHTAG_RAW(body, 'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);
  push body, build_ff12_IDPList(data{'IDPList'});
  PUSHTAG_RAW(body, 'IsPassive', data.IsPassive);

  return TAG('ff12:AuthnRequestEnvelope', attr, body);
}




function parse_ff12_AuthnResponse(data, x) {
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'ResponseID', data.ResponseID);
  POPATTR(x[1], 'consent', data.consent);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp11_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Assertion', i); ++i) {
    h =  hash [];
    parse_sa11_Assertion(h, tag);
    push data{'Assertion'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);

}

function build_ff12_AuthnResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'ResponseID', data.ResponseID);
  PUSHATTR(attr, 'consent', data.consent);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_sp11_Status(data{'Status'});
  for d(data{'Assertion'}) push body,build_sa11_Assertion(d);
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);

  return TAG('ff12:AuthnResponse', attr, body);
}




function parse_ff12_AuthnResponseEnvelope(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  tag = find_xml_local(x[2], 'AuthnResponse', 1);
  h =  hash [];
  parse_ff12_AuthnResponse(h, aux1);
  data{'AuthnResponse'} = h;
  POPTAG_RAW(x[2],  'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);

}

function build_ff12_AuthnResponseEnvelope(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  push body, build_ff12_AuthnResponse(data{'AuthnResponse'});
  PUSHTAG_RAW(body, 'AssertionConsumerServiceURL', data.AssertionConsumerServiceURL);

  return TAG('ff12:AuthnResponseEnvelope', attr, body);
}




function parse_ff12_EncryptableNameIdentifier(data, x) {
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'NameQualifier', data.NameQualifier);
  POPATTR(x[1], 'Nonce', data.Nonce);


}

function build_ff12_EncryptableNameIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'NameQualifier', data.NameQualifier);
  PUSHATTR(attr, 'Nonce', data.Nonce);


  return TAG('ff12:EncryptableNameIdentifier', attr, body);
}




function parse_ff12_EncryptedNameIdentifier(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  tag = find_xml_local(x[2], 'EncryptedKey', 1);
  h =  hash [];
  parse_xenc_EncryptedKey(h, aux1);
  data{'EncryptedKey'} = h;

}

function build_ff12_EncryptedNameIdentifier(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  push body, build_xenc_EncryptedKey(data{'EncryptedKey'});

  return TAG('ff12:EncryptedNameIdentifier', attr, body);
}




function parse_ff12_Extension(data, x) {


}

function build_ff12_Extension(data) {
  attr = [];
  body = [];


  return TAG('ff12:Extension', attr, body);
}




function parse_ff12_FederationTerminationNotification(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'RequestID', data.RequestID);
  POPATTR(x[1], 'consent', data.consent);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;

}

function build_ff12_FederationTerminationNotification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'RequestID', data.RequestID);
  PUSHATTR(attr, 'consent', data.consent);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});

  return TAG('ff12:FederationTerminationNotification', attr, body);
}




function parse_ff12_IDPEntries(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'IDPEntry', i); ++i) {
    h =  hash [];
    parse_ff12_IDPEntry(h, tag);
    push data{'IDPEntry'}, h;
  }

}

function build_ff12_IDPEntries(data) {
  attr = [];
  body = [];

  for d(data{'IDPEntry'}) push body,build_ff12_IDPEntry(d);

  return TAG('ff12:IDPEntries', attr, body);
}




function parse_ff12_IDPEntry(data, x) {

  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  POPTAG_RAW(x[2],  'ProviderName', data.ProviderName);
  POPTAG_RAW(x[2],  'Loc', data.Loc);

}

function build_ff12_IDPEntry(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  PUSHTAG_RAW(body, 'ProviderName', data.ProviderName);
  PUSHTAG_RAW(body, 'Loc', data.Loc);

  return TAG('ff12:IDPEntry', attr, body);
}




function parse_ff12_IDPList(data, x) {

  tag = find_xml_local(x[2], 'IDPEntries', 1);
  h =  hash [];
  parse_ff12_IDPEntries(h, aux1);
  data{'IDPEntries'} = h;
  POPTAG_RAW(x[2],  'GetComplete', data.GetComplete);

}

function build_ff12_IDPList(data) {
  attr = [];
  body = [];

  push body, build_ff12_IDPEntries(data{'IDPEntries'});
  PUSHTAG_RAW(body, 'GetComplete', data.GetComplete);

  return TAG('ff12:IDPList', attr, body);
}




function parse_ff12_IDPProvidedNameIdentifier(data, x) {
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'NameQualifier', data.NameQualifier);


}

function build_ff12_IDPProvidedNameIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'NameQualifier', data.NameQualifier);


  return TAG('ff12:IDPProvidedNameIdentifier', attr, body);
}




function parse_ff12_LogoutRequest(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'NotOnOrAfter', data.NotOnOrAfter);
  POPATTR(x[1], 'RequestID', data.RequestID);
  POPATTR(x[1], 'consent', data.consent);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;
  for (i=1; tag = find_xml_local(x[2], 'SessionIndex', i); ++i)
    push data{'SessionIndex'}, tag[2];
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);

}

function build_ff12_LogoutRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'NotOnOrAfter', data.NotOnOrAfter);
  PUSHATTR(attr, 'RequestID', data.RequestID);
  PUSHATTR(attr, 'consent', data.consent);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});
  for d(data{'SessionIndex'})PUSHTAG_RAW(body,'SessionIndex',d);
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);

  return TAG('ff12:LogoutRequest', attr, body);
}




function parse_ff12_LogoutResponse(data, x) {
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'ResponseID', data.ResponseID);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp11_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);

}

function build_ff12_LogoutResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'ResponseID', data.ResponseID);

  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sp11_Status(data{'Status'});
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);

  return TAG('ff12:LogoutResponse', attr, body);
}




function parse_ff12_NameIdentifierMappingRequest(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'RequestID', data.RequestID);
  POPATTR(x[1], 'consent', data.consent);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;
  POPTAG_RAW(x[2],  'TargetNamespace', data.TargetNamespace);

}

function build_ff12_NameIdentifierMappingRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'RequestID', data.RequestID);
  PUSHATTR(attr, 'consent', data.consent);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});
  PUSHTAG_RAW(body, 'TargetNamespace', data.TargetNamespace);

  return TAG('ff12:NameIdentifierMappingRequest', attr, body);
}




function parse_ff12_NameIdentifierMappingResponse(data, x) {
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'ResponseID', data.ResponseID);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp11_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;

}

function build_ff12_NameIdentifierMappingResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'ResponseID', data.ResponseID);

  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sp11_Status(data{'Status'});
  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});

  return TAG('ff12:NameIdentifierMappingResponse', attr, body);
}




function parse_ff12_OldProvidedNameIdentifier(data, x) {
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'NameQualifier', data.NameQualifier);


}

function build_ff12_OldProvidedNameIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'NameQualifier', data.NameQualifier);


  return TAG('ff12:OldProvidedNameIdentifier', attr, body);
}




function parse_ff12_RegisterNameIdentifierRequest(data, x) {
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'RequestID', data.RequestID);

  for (i=1; tag = find_xml_local(x[2], 'RespondWith', i); ++i)
    push data{'RespondWith'}, tag[2];
  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'IDPProvidedNameIdentifier', 1);
  h =  hash [];
  parse_ff12_IDPProvidedNameIdentifier(h, aux1);
  data{'IDPProvidedNameIdentifier'} = h;
  tag = find_xml_local(x[2], 'SPProvidedNameIdentifier', 1);
  h =  hash [];
  parse_ff12_SPProvidedNameIdentifier(h, aux1);
  data{'SPProvidedNameIdentifier'} = h;
  tag = find_xml_local(x[2], 'OldProvidedNameIdentifier', 1);
  h =  hash [];
  parse_ff12_OldProvidedNameIdentifier(h, aux1);
  data{'OldProvidedNameIdentifier'} = h;
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);

}

function build_ff12_RegisterNameIdentifierRequest(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'RequestID', data.RequestID);

  for d(data{'RespondWith'})PUSHTAG_RAW(body,'RespondWith',d);
  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_ff12_IDPProvidedNameIdentifier(data{'IDPProvidedNameIdentifier'});
  push body, build_ff12_SPProvidedNameIdentifier(data{'SPProvidedNameIdentifier'});
  push body, build_ff12_OldProvidedNameIdentifier(data{'OldProvidedNameIdentifier'});
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);

  return TAG('ff12:RegisterNameIdentifierRequest', attr, body);
}




function parse_ff12_RegisterNameIdentifierResponse(data, x) {
  POPATTR(x[1], 'InResponseTo', data.InResponseTo);
  POPATTR(x[1], 'IssueInstant', data.IssueInstant);
  POPATTR(x[1], 'MajorVersion', data.MajorVersion);
  POPATTR(x[1], 'MinorVersion', data.MinorVersion);
  POPATTR(x[1], 'Recipient', data.Recipient);
  POPATTR(x[1], 'ResponseID', data.ResponseID);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ff12_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_sp11_Status(h, aux1);
  data{'Status'} = h;
  POPTAG_RAW(x[2],  'RelayState', data.RelayState);

}

function build_ff12_RegisterNameIdentifierResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'InResponseTo', data.InResponseTo);
  PUSHATTR(attr, 'IssueInstant', data.IssueInstant);
  PUSHATTR(attr, 'MajorVersion', data.MajorVersion);
  PUSHATTR(attr, 'MinorVersion', data.MinorVersion);
  PUSHATTR(attr, 'Recipient', data.Recipient);
  PUSHATTR(attr, 'ResponseID', data.ResponseID);

  push body, build_ds_Signature(data{'Signature'});
  for d(data{'Extension'}) push body,build_ff12_Extension(d);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  push body, build_sp11_Status(data{'Status'});
  PUSHTAG_RAW(body, 'RelayState', data.RelayState);

  return TAG('ff12:RegisterNameIdentifierResponse', attr, body);
}




function parse_ff12_RequestAuthnContext(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'AuthnContextClassRef', i); ++i)
    push data{'AuthnContextClassRef'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AuthnContextStatementRef', i); ++i)
    push data{'AuthnContextStatementRef'}, tag[2];
  POPTAG_RAW(x[2],  'AuthnContextComparison', data.AuthnContextComparison);

}

function build_ff12_RequestAuthnContext(data) {
  attr = [];
  body = [];

  for d(data{'AuthnContextClassRef'})PUSHTAG_RAW(body,'AuthnContextClassRef',d);
  for d(data{'AuthnContextStatementRef'})PUSHTAG_RAW(body,'AuthnContextStatementRef',d);
  PUSHTAG_RAW(body, 'AuthnContextComparison', data.AuthnContextComparison);

  return TAG('ff12:RequestAuthnContext', attr, body);
}




function parse_ff12_SPProvidedNameIdentifier(data, x) {
  POPATTR(x[1], 'Format', data.Format);
  POPATTR(x[1], 'NameQualifier', data.NameQualifier);


}

function build_ff12_SPProvidedNameIdentifier(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Format', data.Format);
  PUSHATTR(attr, 'NameQualifier', data.NameQualifier);


  return TAG('ff12:SPProvidedNameIdentifier', attr, body);
}




function parse_ff12_Scoping(data, x) {

  POPTAG_RAW(x[2],  'ProxyCount', data.ProxyCount);
  tag = find_xml_local(x[2], 'IDPList', 1);
  h =  hash [];
  parse_ff12_IDPList(h, aux1);
  data{'IDPList'} = h;

}

function build_ff12_Scoping(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'ProxyCount', data.ProxyCount);
  push body, build_ff12_IDPList(data{'IDPList'});

  return TAG('ff12:Scoping', attr, body);
}




function parse_ff12_Subject(data, x) {

  tag = find_xml_local(x[2], 'NameIdentifier', 1);
  h =  hash [];
  parse_sa11_NameIdentifier(h, aux1);
  data{'NameIdentifier'} = h;
  tag = find_xml_local(x[2], 'SubjectConfirmation', 1);
  h =  hash [];
  parse_sa11_SubjectConfirmation(h, aux1);
  data{'SubjectConfirmation'} = h;
  tag = find_xml_local(x[2], 'IDPProvidedNameIdentifier', 1);
  h =  hash [];
  parse_ff12_IDPProvidedNameIdentifier(h, aux1);
  data{'IDPProvidedNameIdentifier'} = h;

}

function build_ff12_Subject(data) {
  attr = [];
  body = [];

  push body, build_sa11_NameIdentifier(data{'NameIdentifier'});
  push body, build_sa11_SubjectConfirmation(data{'SubjectConfirmation'});
  push body, build_ff12_IDPProvidedNameIdentifier(data{'IDPProvidedNameIdentifier'});

  return TAG('ff12:Subject', attr, body);
}


/* EOF -- c/zx-ff12.ds */
