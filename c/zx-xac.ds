/* c/zx-xac.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_xac_Action(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_xac_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_xac_Action(data) {
  attr = [];
  body = [];

  for d(data{'Attribute'}) push body,build_xac_Attribute(d);

  return TAG('xac:Action', attr, body);
}




function parse_xac_Attribute(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);

  for (i=1; tag = find_xml_local(x[2], 'AttributeValue', i); ++i)
    push data{'AttributeValue'}, tag[2];

}

function build_xac_Attribute(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);

  for d(data{'AttributeValue'})PUSHTAG_RAW(body,'AttributeValue',d);

  return TAG('xac:Attribute', attr, body);
}




function parse_xac_Environment(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_xac_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_xac_Environment(data) {
  attr = [];
  body = [];

  for d(data{'Attribute'}) push body,build_xac_Attribute(d);

  return TAG('xac:Environment', attr, body);
}




function parse_xac_MissingAttributeDetail(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);

  for (i=1; tag = find_xml_local(x[2], 'AttributeValue', i); ++i)
    push data{'AttributeValue'}, tag[2];

}

function build_xac_MissingAttributeDetail(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);

  for d(data{'AttributeValue'})PUSHTAG_RAW(body,'AttributeValue',d);

  return TAG('xac:MissingAttributeDetail', attr, body);
}




function parse_xac_Request(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Subject', i); ++i) {
    h =  hash [];
    parse_xac_Subject(h, tag);
    push data{'Subject'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Resource', i); ++i) {
    h =  hash [];
    parse_xac_Resource(h, tag);
    push data{'Resource'}, h;
  }
  tag = find_xml_local(x[2], 'Action', 1);
  h =  hash [];
  parse_xac_Action(h, aux1);
  data{'Action'} = h;
  tag = find_xml_local(x[2], 'Environment', 1);
  h =  hash [];
  parse_xac_Environment(h, aux1);
  data{'Environment'} = h;

}

function build_xac_Request(data) {
  attr = [];
  body = [];

  for d(data{'Subject'}) push body,build_xac_Subject(d);
  for d(data{'Resource'}) push body,build_xac_Resource(d);
  push body, build_xac_Action(data{'Action'});
  push body, build_xac_Environment(data{'Environment'});

  return TAG('xac:Request', attr, body);
}




function parse_xac_Resource(data, x) {

  tag = find_xml_local(x[2], 'ResourceContent', 1);
  h =  hash [];
  parse_xac_ResourceContent(h, aux1);
  data{'ResourceContent'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_xac_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_xac_Resource(data) {
  attr = [];
  body = [];

  push body, build_xac_ResourceContent(data{'ResourceContent'});
  for d(data{'Attribute'}) push body,build_xac_Attribute(d);

  return TAG('xac:Resource', attr, body);
}




function parse_xac_ResourceContent(data, x) {


}

function build_xac_ResourceContent(data) {
  attr = [];
  body = [];


  return TAG('xac:ResourceContent', attr, body);
}




function parse_xac_Response(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Result', i); ++i) {
    h =  hash [];
    parse_xac_Result(h, tag);
    push data{'Result'}, h;
  }

}

function build_xac_Response(data) {
  attr = [];
  body = [];

  for d(data{'Result'}) push body,build_xac_Result(d);

  return TAG('xac:Response', attr, body);
}




function parse_xac_Result(data, x) {
  POPATTR(x[1], 'ResourceId', data.ResourceId);

  POPTAG_RAW(x[2],  'Decision', data.Decision);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_xac_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Obligations', 1);
  h =  hash [];
  parse_xa_Obligations(h, aux1);
  data{'Obligations'} = h;

}

function build_xac_Result(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ResourceId', data.ResourceId);

  PUSHTAG_RAW(body, 'Decision', data.Decision);
  push body, build_xac_Status(data{'Status'});
  push body, build_xa_Obligations(data{'Obligations'});

  return TAG('xac:Result', attr, body);
}




function parse_xac_Status(data, x) {

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_xac_StatusCode(h, aux1);
  data{'StatusCode'} = h;
  POPTAG_RAW(x[2],  'StatusMessage', data.StatusMessage);
  tag = find_xml_local(x[2], 'StatusDetail', 1);
  h =  hash [];
  parse_xac_StatusDetail(h, aux1);
  data{'StatusDetail'} = h;

}

function build_xac_Status(data) {
  attr = [];
  body = [];

  push body, build_xac_StatusCode(data{'StatusCode'});
  PUSHTAG_RAW(body, 'StatusMessage', data.StatusMessage);
  push body, build_xac_StatusDetail(data{'StatusDetail'});

  return TAG('xac:Status', attr, body);
}




function parse_xac_StatusCode(data, x) {
  POPATTR(x[1], 'Value', data.Value);

  tag = find_xml_local(x[2], 'StatusCode', 1);
  h =  hash [];
  parse_xac_StatusCode(h, aux1);
  data{'StatusCode'} = h;

}

function build_xac_StatusCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Value', data.Value);

  push body, build_xac_StatusCode(data{'StatusCode'});

  return TAG('xac:StatusCode', attr, body);
}




function parse_xac_StatusDetail(data, x) {


}

function build_xac_StatusDetail(data) {
  attr = [];
  body = [];


  return TAG('xac:StatusDetail', attr, body);
}




function parse_xac_Subject(data, x) {
  POPATTR(x[1], 'SubjectCategory', data.SubjectCategory);

  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_xac_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_xac_Subject(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'SubjectCategory', data.SubjectCategory);

  for d(data{'Attribute'}) push body,build_xac_Attribute(d);

  return TAG('xac:Subject', attr, body);
}


/* EOF -- c/zx-xac.ds */
