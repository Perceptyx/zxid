/* c/zx-ac.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_ac_ActivationLimit(data, x) {

  tag = find_xml_local(x[2], 'ActivationLimitDuration', 1);
  h =  hash [];
  parse_ac_ActivationLimitDuration(h, aux1);
  data{'ActivationLimitDuration'} = h;
  tag = find_xml_local(x[2], 'ActivationLimitUsages', 1);
  h =  hash [];
  parse_ac_ActivationLimitUsages(h, aux1);
  data{'ActivationLimitUsages'} = h;
  POPTAG_RAW(x[2],  'ActivationLimitSession', data.ActivationLimitSession);

}

function build_ac_ActivationLimit(data) {
  attr = [];
  body = [];

  push body, build_ac_ActivationLimitDuration(data{'ActivationLimitDuration'});
  push body, build_ac_ActivationLimitUsages(data{'ActivationLimitUsages'});
  PUSHTAG_RAW(body, 'ActivationLimitSession', data.ActivationLimitSession);

  return TAG('ac:ActivationLimit', attr, body);
}




function parse_ac_ActivationLimitDuration(data, x) {
  POPATTR(x[1], 'duration', data.duration);


}

function build_ac_ActivationLimitDuration(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'duration', data.duration);


  return TAG('ac:ActivationLimitDuration', attr, body);
}




function parse_ac_ActivationLimitUsages(data, x) {
  POPATTR(x[1], 'number', data.number);


}

function build_ac_ActivationLimitUsages(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'number', data.number);


  return TAG('ac:ActivationLimitUsages', attr, body);
}




function parse_ac_ActivationPin(data, x) {

  tag = find_xml_local(x[2], 'Length', 1);
  h =  hash [];
  parse_ac_Length(h, aux1);
  data{'Length'} = h;
  tag = find_xml_local(x[2], 'Alphabet', 1);
  h =  hash [];
  parse_ac_Alphabet(h, aux1);
  data{'Alphabet'} = h;
  tag = find_xml_local(x[2], 'Generation', 1);
  h =  hash [];
  parse_ac_Generation(h, aux1);
  data{'Generation'} = h;
  tag = find_xml_local(x[2], 'ActivationLimit', 1);
  h =  hash [];
  parse_ac_ActivationLimit(h, aux1);
  data{'ActivationLimit'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_ActivationPin(data) {
  attr = [];
  body = [];

  push body, build_ac_Length(data{'Length'});
  push body, build_ac_Alphabet(data{'Alphabet'});
  push body, build_ac_Generation(data{'Generation'});
  push body, build_ac_ActivationLimit(data{'ActivationLimit'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:ActivationPin', attr, body);
}




function parse_ac_Alphabet(data, x) {
  POPATTR(x[1], 'case', data.case);
  POPATTR(x[1], 'excludedChars', data.excludedChars);
  POPATTR(x[1], 'requiredChars', data.requiredChars);


}

function build_ac_Alphabet(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'case', data.case);
  PUSHATTR(attr, 'excludedChars', data.excludedChars);
  PUSHATTR(attr, 'requiredChars', data.requiredChars);


  return TAG('ac:Alphabet', attr, body);
}




function parse_ac_AsymmetricDecryption(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_AsymmetricDecryption(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:AsymmetricDecryption', attr, body);
}




function parse_ac_AsymmetricKeyAgreement(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_AsymmetricKeyAgreement(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:AsymmetricKeyAgreement', attr, body);
}




function parse_ac_AuthenticatingAuthority(data, x) {
  POPATTR(x[1], 'ID', data.ID);

  tag = find_xml_local(x[2], 'GoverningAgreements', 1);
  h =  hash [];
  parse_ac_GoverningAgreements(h, aux1);
  data{'GoverningAgreements'} = h;

}

function build_ac_AuthenticatingAuthority(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);

  push body, build_ac_GoverningAgreements(data{'GoverningAgreements'});

  return TAG('ac:AuthenticatingAuthority', attr, body);
}




function parse_ac_AuthenticationContextStatement(data, x) {
  POPATTR(x[1], 'ID', data.ID);

  tag = find_xml_local(x[2], 'Identification', 1);
  h =  hash [];
  parse_ac_Identification(h, aux1);
  data{'Identification'} = h;
  tag = find_xml_local(x[2], 'TechnicalProtection', 1);
  h =  hash [];
  parse_ac_TechnicalProtection(h, aux1);
  data{'TechnicalProtection'} = h;
  tag = find_xml_local(x[2], 'OperationalProtection', 1);
  h =  hash [];
  parse_ac_OperationalProtection(h, aux1);
  data{'OperationalProtection'} = h;
  tag = find_xml_local(x[2], 'AuthenticationMethod', 1);
  h =  hash [];
  parse_ac_AuthenticationMethod(h, aux1);
  data{'AuthenticationMethod'} = h;
  tag = find_xml_local(x[2], 'GoverningAgreements', 1);
  h =  hash [];
  parse_ac_GoverningAgreements(h, aux1);
  data{'GoverningAgreements'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AuthenticatingAuthority', i); ++i) {
    h =  hash [];
    parse_ac_AuthenticatingAuthority(h, tag);
    push data{'AuthenticatingAuthority'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_AuthenticationContextStatement(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);

  push body, build_ac_Identification(data{'Identification'});
  push body, build_ac_TechnicalProtection(data{'TechnicalProtection'});
  push body, build_ac_OperationalProtection(data{'OperationalProtection'});
  push body, build_ac_AuthenticationMethod(data{'AuthenticationMethod'});
  push body, build_ac_GoverningAgreements(data{'GoverningAgreements'});
  for d(data{'AuthenticatingAuthority'}) push body,build_ac_AuthenticatingAuthority(d);
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:AuthenticationContextStatement', attr, body);
}




function parse_ac_AuthenticationMethod(data, x) {

  tag = find_xml_local(x[2], 'PrincipalAuthenticationMechanism', 1);
  h =  hash [];
  parse_ac_PrincipalAuthenticationMechanism(h, aux1);
  data{'PrincipalAuthenticationMechanism'} = h;
  tag = find_xml_local(x[2], 'Authenticator', 1);
  h =  hash [];
  parse_ac_Authenticator(h, aux1);
  data{'Authenticator'} = h;
  tag = find_xml_local(x[2], 'AuthenticatorTransportProtocol', 1);
  h =  hash [];
  parse_ac_AuthenticatorTransportProtocol(h, aux1);
  data{'AuthenticatorTransportProtocol'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_AuthenticationMethod(data) {
  attr = [];
  body = [];

  push body, build_ac_PrincipalAuthenticationMechanism(data{'PrincipalAuthenticationMechanism'});
  push body, build_ac_Authenticator(data{'Authenticator'});
  push body, build_ac_AuthenticatorTransportProtocol(data{'AuthenticatorTransportProtocol'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:AuthenticationMethod', attr, body);
}




function parse_ac_Authenticator(data, x) {

  tag = find_xml_local(x[2], 'PreviousSession', 1);
  h =  hash [];
  parse_ac_PreviousSession(h, aux1);
  data{'PreviousSession'} = h;
  tag = find_xml_local(x[2], 'ResumeSession', 1);
  h =  hash [];
  parse_ac_ResumeSession(h, aux1);
  data{'ResumeSession'} = h;
  tag = find_xml_local(x[2], 'DigSig', 1);
  h =  hash [];
  parse_ac_DigSig(h, aux1);
  data{'DigSig'} = h;
  tag = find_xml_local(x[2], 'Password', 1);
  h =  hash [];
  parse_ac_Password(h, aux1);
  data{'Password'} = h;
  tag = find_xml_local(x[2], 'ZeroKnowledge', 1);
  h =  hash [];
  parse_ac_ZeroKnowledge(h, aux1);
  data{'ZeroKnowledge'} = h;
  tag = find_xml_local(x[2], 'SharedSecretChallengeResponse', 1);
  h =  hash [];
  parse_ac_SharedSecretChallengeResponse(h, aux1);
  data{'SharedSecretChallengeResponse'} = h;
  tag = find_xml_local(x[2], 'SharedSecretDynamicPlaintext', 1);
  h =  hash [];
  parse_ac_SharedSecretDynamicPlaintext(h, aux1);
  data{'SharedSecretDynamicPlaintext'} = h;
  tag = find_xml_local(x[2], 'IPAddress', 1);
  h =  hash [];
  parse_ac_IPAddress(h, aux1);
  data{'IPAddress'} = h;
  tag = find_xml_local(x[2], 'AsymmetricDecryption', 1);
  h =  hash [];
  parse_ac_AsymmetricDecryption(h, aux1);
  data{'AsymmetricDecryption'} = h;
  tag = find_xml_local(x[2], 'AsymmetricKeyAgreement', 1);
  h =  hash [];
  parse_ac_AsymmetricKeyAgreement(h, aux1);
  data{'AsymmetricKeyAgreement'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_Authenticator(data) {
  attr = [];
  body = [];

  push body, build_ac_PreviousSession(data{'PreviousSession'});
  push body, build_ac_ResumeSession(data{'ResumeSession'});
  push body, build_ac_DigSig(data{'DigSig'});
  push body, build_ac_Password(data{'Password'});
  push body, build_ac_ZeroKnowledge(data{'ZeroKnowledge'});
  push body, build_ac_SharedSecretChallengeResponse(data{'SharedSecretChallengeResponse'});
  push body, build_ac_SharedSecretDynamicPlaintext(data{'SharedSecretDynamicPlaintext'});
  push body, build_ac_IPAddress(data{'IPAddress'});
  push body, build_ac_AsymmetricDecryption(data{'AsymmetricDecryption'});
  push body, build_ac_AsymmetricKeyAgreement(data{'AsymmetricKeyAgreement'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:Authenticator', attr, body);
}




function parse_ac_AuthenticatorTransportProtocol(data, x) {

  tag = find_xml_local(x[2], 'HTTP', 1);
  h =  hash [];
  parse_ac_HTTP(h, aux1);
  data{'HTTP'} = h;
  tag = find_xml_local(x[2], 'SSL', 1);
  h =  hash [];
  parse_ac_SSL(h, aux1);
  data{'SSL'} = h;
  tag = find_xml_local(x[2], 'MobileNetworkNoEncryption', 1);
  h =  hash [];
  parse_ac_MobileNetworkNoEncryption(h, aux1);
  data{'MobileNetworkNoEncryption'} = h;
  tag = find_xml_local(x[2], 'MobileNetworkRadioEncryption', 1);
  h =  hash [];
  parse_ac_MobileNetworkRadioEncryption(h, aux1);
  data{'MobileNetworkRadioEncryption'} = h;
  tag = find_xml_local(x[2], 'MobileNetworkEndToEndEncryption', 1);
  h =  hash [];
  parse_ac_MobileNetworkEndToEndEncryption(h, aux1);
  data{'MobileNetworkEndToEndEncryption'} = h;
  tag = find_xml_local(x[2], 'WTLS', 1);
  h =  hash [];
  parse_ac_WTLS(h, aux1);
  data{'WTLS'} = h;
  tag = find_xml_local(x[2], 'IPSec', 1);
  h =  hash [];
  parse_ac_IPSec(h, aux1);
  data{'IPSec'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_AuthenticatorTransportProtocol(data) {
  attr = [];
  body = [];

  push body, build_ac_HTTP(data{'HTTP'});
  push body, build_ac_SSL(data{'SSL'});
  push body, build_ac_MobileNetworkNoEncryption(data{'MobileNetworkNoEncryption'});
  push body, build_ac_MobileNetworkRadioEncryption(data{'MobileNetworkRadioEncryption'});
  push body, build_ac_MobileNetworkEndToEndEncryption(data{'MobileNetworkEndToEndEncryption'});
  push body, build_ac_WTLS(data{'WTLS'});
  push body, build_ac_IPSec(data{'IPSec'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:AuthenticatorTransportProtocol', attr, body);
}




function parse_ac_DeactivationCallCenter(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_DeactivationCallCenter(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:DeactivationCallCenter', attr, body);
}




function parse_ac_DigSig(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_DigSig(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:DigSig', attr, body);
}




function parse_ac_Extension(data, x) {


}

function build_ac_Extension(data) {
  attr = [];
  body = [];


  return TAG('ac:Extension', attr, body);
}




function parse_ac_Generation(data, x) {
  POPATTR(x[1], 'mechanism', data.mechanism);


}

function build_ac_Generation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'mechanism', data.mechanism);


  return TAG('ac:Generation', attr, body);
}




function parse_ac_GoverningAgreementRef(data, x) {
  POPATTR(x[1], 'governingAgreementRef', data.governingAgreementRef);


}

function build_ac_GoverningAgreementRef(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'governingAgreementRef', data.governingAgreementRef);


  return TAG('ac:GoverningAgreementRef', attr, body);
}




function parse_ac_GoverningAgreements(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'GoverningAgreementRef', i); ++i) {
    h =  hash [];
    parse_ac_GoverningAgreementRef(h, tag);
    push data{'GoverningAgreementRef'}, h;
  }

}

function build_ac_GoverningAgreements(data) {
  attr = [];
  body = [];

  for d(data{'GoverningAgreementRef'}) push body,build_ac_GoverningAgreementRef(d);

  return TAG('ac:GoverningAgreements', attr, body);
}




function parse_ac_HTTP(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_HTTP(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:HTTP', attr, body);
}




function parse_ac_IPAddress(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_IPAddress(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:IPAddress', attr, body);
}




function parse_ac_IPSec(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_IPSec(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:IPSec', attr, body);
}




function parse_ac_Identification(data, x) {
  POPATTR(x[1], 'nym', data.nym);

  tag = find_xml_local(x[2], 'PhysicalVerification', 1);
  h =  hash [];
  parse_ac_PhysicalVerification(h, aux1);
  data{'PhysicalVerification'} = h;
  tag = find_xml_local(x[2], 'WrittenConsent', 1);
  h =  hash [];
  parse_ac_WrittenConsent(h, aux1);
  data{'WrittenConsent'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_Identification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'nym', data.nym);

  push body, build_ac_PhysicalVerification(data{'PhysicalVerification'});
  push body, build_ac_WrittenConsent(data{'WrittenConsent'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:Identification', attr, body);
}




function parse_ac_KeyActivation(data, x) {

  tag = find_xml_local(x[2], 'ActivationPin', 1);
  h =  hash [];
  parse_ac_ActivationPin(h, aux1);
  data{'ActivationPin'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_KeyActivation(data) {
  attr = [];
  body = [];

  push body, build_ac_ActivationPin(data{'ActivationPin'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:KeyActivation', attr, body);
}




function parse_ac_KeySharing(data, x) {
  POPATTR(x[1], 'sharing', data.sharing);


}

function build_ac_KeySharing(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'sharing', data.sharing);


  return TAG('ac:KeySharing', attr, body);
}




function parse_ac_KeyStorage(data, x) {
  POPATTR(x[1], 'medium', data.medium);


}

function build_ac_KeyStorage(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'medium', data.medium);


  return TAG('ac:KeyStorage', attr, body);
}




function parse_ac_Length(data, x) {
  POPATTR(x[1], 'max', data.max);
  POPATTR(x[1], 'min', data.min);


}

function build_ac_Length(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'max', data.max);
  PUSHATTR(attr, 'min', data.min);


  return TAG('ac:Length', attr, body);
}




function parse_ac_MobileNetworkEndToEndEncryption(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_MobileNetworkEndToEndEncryption(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:MobileNetworkEndToEndEncryption', attr, body);
}




function parse_ac_MobileNetworkNoEncryption(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_MobileNetworkNoEncryption(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:MobileNetworkNoEncryption', attr, body);
}




function parse_ac_MobileNetworkRadioEncryption(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_MobileNetworkRadioEncryption(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:MobileNetworkRadioEncryption', attr, body);
}




function parse_ac_OperationalProtection(data, x) {

  tag = find_xml_local(x[2], 'SecurityAudit', 1);
  h =  hash [];
  parse_ac_SecurityAudit(h, aux1);
  data{'SecurityAudit'} = h;
  tag = find_xml_local(x[2], 'DeactivationCallCenter', 1);
  h =  hash [];
  parse_ac_DeactivationCallCenter(h, aux1);
  data{'DeactivationCallCenter'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_OperationalProtection(data) {
  attr = [];
  body = [];

  push body, build_ac_SecurityAudit(data{'SecurityAudit'});
  push body, build_ac_DeactivationCallCenter(data{'DeactivationCallCenter'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:OperationalProtection', attr, body);
}




function parse_ac_Password(data, x) {

  tag = find_xml_local(x[2], 'Length', 1);
  h =  hash [];
  parse_ac_Length(h, aux1);
  data{'Length'} = h;
  tag = find_xml_local(x[2], 'Alphabet', 1);
  h =  hash [];
  parse_ac_Alphabet(h, aux1);
  data{'Alphabet'} = h;
  tag = find_xml_local(x[2], 'Generation', 1);
  h =  hash [];
  parse_ac_Generation(h, aux1);
  data{'Generation'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_Password(data) {
  attr = [];
  body = [];

  push body, build_ac_Length(data{'Length'});
  push body, build_ac_Alphabet(data{'Alphabet'});
  push body, build_ac_Generation(data{'Generation'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:Password', attr, body);
}




function parse_ac_PhysicalVerification(data, x) {
  POPATTR(x[1], 'credentialLevel', data.credentialLevel);


}

function build_ac_PhysicalVerification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'credentialLevel', data.credentialLevel);


  return TAG('ac:PhysicalVerification', attr, body);
}




function parse_ac_PreviousSession(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_PreviousSession(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:PreviousSession', attr, body);
}




function parse_ac_PrincipalAuthenticationMechanism(data, x) {

  tag = find_xml_local(x[2], 'Password', 1);
  h =  hash [];
  parse_ac_Password(h, aux1);
  data{'Password'} = h;
  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_ac_Token(h, aux1);
  data{'Token'} = h;
  tag = find_xml_local(x[2], 'Smartcard', 1);
  h =  hash [];
  parse_ac_Smartcard(h, aux1);
  data{'Smartcard'} = h;
  tag = find_xml_local(x[2], 'ActivationPin', 1);
  h =  hash [];
  parse_ac_ActivationPin(h, aux1);
  data{'ActivationPin'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_PrincipalAuthenticationMechanism(data) {
  attr = [];
  body = [];

  push body, build_ac_Password(data{'Password'});
  push body, build_ac_Token(data{'Token'});
  push body, build_ac_Smartcard(data{'Smartcard'});
  push body, build_ac_ActivationPin(data{'ActivationPin'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:PrincipalAuthenticationMechanism', attr, body);
}




function parse_ac_PrivateKeyProtection(data, x) {

  tag = find_xml_local(x[2], 'KeyActivation', 1);
  h =  hash [];
  parse_ac_KeyActivation(h, aux1);
  data{'KeyActivation'} = h;
  tag = find_xml_local(x[2], 'KeyStorage', 1);
  h =  hash [];
  parse_ac_KeyStorage(h, aux1);
  data{'KeyStorage'} = h;
  tag = find_xml_local(x[2], 'KeySharing', 1);
  h =  hash [];
  parse_ac_KeySharing(h, aux1);
  data{'KeySharing'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_PrivateKeyProtection(data) {
  attr = [];
  body = [];

  push body, build_ac_KeyActivation(data{'KeyActivation'});
  push body, build_ac_KeyStorage(data{'KeyStorage'});
  push body, build_ac_KeySharing(data{'KeySharing'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:PrivateKeyProtection', attr, body);
}




function parse_ac_ResumeSession(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_ResumeSession(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:ResumeSession', attr, body);
}




function parse_ac_SSL(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SSL(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SSL', attr, body);
}




function parse_ac_SecretKeyProtection(data, x) {

  tag = find_xml_local(x[2], 'KeyActivation', 1);
  h =  hash [];
  parse_ac_KeyActivation(h, aux1);
  data{'KeyActivation'} = h;
  tag = find_xml_local(x[2], 'KeyStorage', 1);
  h =  hash [];
  parse_ac_KeyStorage(h, aux1);
  data{'KeyStorage'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SecretKeyProtection(data) {
  attr = [];
  body = [];

  push body, build_ac_KeyActivation(data{'KeyActivation'});
  push body, build_ac_KeyStorage(data{'KeyStorage'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SecretKeyProtection', attr, body);
}




function parse_ac_SecurityAudit(data, x) {

  tag = find_xml_local(x[2], 'SwitchAudit', 1);
  h =  hash [];
  parse_ac_SwitchAudit(h, aux1);
  data{'SwitchAudit'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SecurityAudit(data) {
  attr = [];
  body = [];

  push body, build_ac_SwitchAudit(data{'SwitchAudit'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SecurityAudit', attr, body);
}




function parse_ac_SharedSecretChallengeResponse(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SharedSecretChallengeResponse(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SharedSecretChallengeResponse', attr, body);
}




function parse_ac_SharedSecretDynamicPlaintext(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SharedSecretDynamicPlaintext(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SharedSecretDynamicPlaintext', attr, body);
}




function parse_ac_Smartcard(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_Smartcard(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:Smartcard', attr, body);
}




function parse_ac_SwitchAudit(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_SwitchAudit(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:SwitchAudit', attr, body);
}




function parse_ac_TechnicalProtection(data, x) {

  tag = find_xml_local(x[2], 'PrivateKeyProtection', 1);
  h =  hash [];
  parse_ac_PrivateKeyProtection(h, aux1);
  data{'PrivateKeyProtection'} = h;
  tag = find_xml_local(x[2], 'SecretKeyProtection', 1);
  h =  hash [];
  parse_ac_SecretKeyProtection(h, aux1);
  data{'SecretKeyProtection'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_TechnicalProtection(data) {
  attr = [];
  body = [];

  push body, build_ac_PrivateKeyProtection(data{'PrivateKeyProtection'});
  push body, build_ac_SecretKeyProtection(data{'SecretKeyProtection'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:TechnicalProtection', attr, body);
}




function parse_ac_TimeSyncToken(data, x) {
  POPATTR(x[1], 'DeviceInHand', data.DeviceInHand);
  POPATTR(x[1], 'DeviceType', data.DeviceType);
  POPATTR(x[1], 'SeedLength', data.SeedLength);


}

function build_ac_TimeSyncToken(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'DeviceInHand', data.DeviceInHand);
  PUSHATTR(attr, 'DeviceType', data.DeviceType);
  PUSHATTR(attr, 'SeedLength', data.SeedLength);


  return TAG('ac:TimeSyncToken', attr, body);
}




function parse_ac_Token(data, x) {

  tag = find_xml_local(x[2], 'TimeSyncToken', 1);
  h =  hash [];
  parse_ac_TimeSyncToken(h, aux1);
  data{'TimeSyncToken'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_Token(data) {
  attr = [];
  body = [];

  push body, build_ac_TimeSyncToken(data{'TimeSyncToken'});
  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:Token', attr, body);
}




function parse_ac_WTLS(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_WTLS(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:WTLS', attr, body);
}




function parse_ac_WrittenConsent(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_WrittenConsent(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:WrittenConsent', attr, body);
}




function parse_ac_ZeroKnowledge(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_ac_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_ac_ZeroKnowledge(data) {
  attr = [];
  body = [];

  for d(data{'Extension'}) push body,build_ac_Extension(d);

  return TAG('ac:ZeroKnowledge', attr, body);
}


/* EOF -- c/zx-ac.ds */
