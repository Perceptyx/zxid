/* c/zx-mm7.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_mm7_AdditionalInformation(data, x) {
  POPATTR(x[1], 'href', data.href);


}

function build_mm7_AdditionalInformation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'href', data.href);


  return TAG('mm7:AdditionalInformation', attr, body);
}




function parse_mm7_Bcc(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_Bcc(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:Bcc', attr, body);
}




function parse_mm7_CancelReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'SenderIdentification', 1);
  h =  hash [];
  parse_mm7_SenderIdentification(h, aux1);
  data{'SenderIdentification'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);
  tag = find_xml_local(x[2], 'Recipients', 1);
  h =  hash [];
  parse_mm7_Recipients(h, aux1);
  data{'Recipients'} = h;
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);

}

function build_mm7_CancelReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_SenderIdentification(data{'SenderIdentification'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);
  push body, build_mm7_Recipients(data{'Recipients'});
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);

  return TAG('mm7:CancelReq', attr, body);
}




function parse_mm7_CancelRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_CancelRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:CancelRsp', attr, body);
}




function parse_mm7_Cc(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_Cc(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:Cc', attr, body);
}




function parse_mm7_Content(data, x) {
  POPATTR(x[1], 'allowAdaptations', data.allowAdaptations);
  POPATTR(x[1], 'href', data.href);
  POPATTR(x[1], 'type', data.type);


}

function build_mm7_Content(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'allowAdaptations', data.allowAdaptations);
  PUSHATTR(attr, 'href', data.href);
  PUSHATTR(attr, 'type', data.type);


  return TAG('mm7:Content', attr, body);
}




function parse_mm7_DateTime(data, x) {
  POPATTR(x[1], 'sequence', data.sequence);


}

function build_mm7_DateTime(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'sequence', data.sequence);


  return TAG('mm7:DateTime', attr, body);
}




function parse_mm7_DeliverReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'MMSRelayServerID', data.MMSRelayServerID);
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'VASPID', data.VASPID);
  POPTAG_RAW(x[2],  'VASID', data.VASID);
  POPTAG_RAW(x[2],  'LinkedID', data.LinkedID);
  tag = find_xml_local(x[2], 'Sender', 1);
  h =  hash [];
  parse_mm7_Sender(h, aux1);
  data{'Sender'} = h;
  tag = find_xml_local(x[2], 'Recipients', 1);
  h =  hash [];
  parse_mm7_Recipients(h, aux1);
  data{'Recipients'} = h;
  tag = find_xml_local(x[2], 'Previouslysentby', 1);
  h =  hash [];
  parse_mm7_Previouslysentby(h, aux1);
  data{'Previouslysentby'} = h;
  tag = find_xml_local(x[2], 'Previouslysentdateandtime', 1);
  h =  hash [];
  parse_mm7_Previouslysentdateandtime(h, aux1);
  data{'Previouslysentdateandtime'} = h;
  POPTAG_RAW(x[2],  'SenderSPI', data.SenderSPI);
  POPTAG_RAW(x[2],  'RecipientSPI', data.RecipientSPI);
  POPTAG_RAW(x[2],  'TimeStamp', data.TimeStamp);
  POPTAG_RAW(x[2],  'ReplyChargingID', data.ReplyChargingID);
  POPTAG_RAW(x[2],  'Priority', data.Priority);
  POPTAG_RAW(x[2],  'Subject', data.Subject);
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);
  tag = find_xml_local(x[2], 'UACapabilities', 1);
  h =  hash [];
  parse_mm7_UACapabilities(h, aux1);
  data{'UACapabilities'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Content', i); ++i) {
    h =  hash [];
    parse_mm7_Content(h, tag);
    push data{'Content'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalInformation', i); ++i) {
    h =  hash [];
    parse_mm7_AdditionalInformation(h, tag);
    push data{'AdditionalInformation'}, h;
  }
  tag = find_xml_local(x[2], 'MessageExtraData', 1);
  h =  hash [];
  parse_mm7_MessageExtraData(h, aux1);
  data{'MessageExtraData'} = h;

}

function build_mm7_DeliverReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'MMSRelayServerID', data.MMSRelayServerID);
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'VASPID', data.VASPID);
  PUSHTAG_RAW(body, 'VASID', data.VASID);
  PUSHTAG_RAW(body, 'LinkedID', data.LinkedID);
  push body, build_mm7_Sender(data{'Sender'});
  push body, build_mm7_Recipients(data{'Recipients'});
  push body, build_mm7_Previouslysentby(data{'Previouslysentby'});
  push body, build_mm7_Previouslysentdateandtime(data{'Previouslysentdateandtime'});
  PUSHTAG_RAW(body, 'SenderSPI', data.SenderSPI);
  PUSHTAG_RAW(body, 'RecipientSPI', data.RecipientSPI);
  PUSHTAG_RAW(body, 'TimeStamp', data.TimeStamp);
  PUSHTAG_RAW(body, 'ReplyChargingID', data.ReplyChargingID);
  PUSHTAG_RAW(body, 'Priority', data.Priority);
  PUSHTAG_RAW(body, 'Subject', data.Subject);
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);
  push body, build_mm7_UACapabilities(data{'UACapabilities'});
  for d(data{'Content'}) push body,build_mm7_Content(d);
  for d(data{'AdditionalInformation'}) push body,build_mm7_AdditionalInformation(d);
  push body, build_mm7_MessageExtraData(data{'MessageExtraData'});

  return TAG('mm7:DeliverReq', attr, body);
}




function parse_mm7_DeliverRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  tag = find_xml_local(x[2], 'ServiceCode', 1);
  h =  hash [];
  parse_mm7_ServiceCode(h, aux1);
  data{'ServiceCode'} = h;

}

function build_mm7_DeliverRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  push body, build_mm7_ServiceCode(data{'ServiceCode'});

  return TAG('mm7:DeliverRsp', attr, body);
}




function parse_mm7_DeliveryCondition(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'DC', i); ++i)
    push data{'DC'}, tag[2];

}

function build_mm7_DeliveryCondition(data) {
  attr = [];
  body = [];

  for d(data{'DC'})PUSHTAG_RAW(body,'DC',d);

  return TAG('mm7:DeliveryCondition', attr, body);
}




function parse_mm7_DeliveryReportReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'MMSRelayServerID', data.MMSRelayServerID);
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);
  tag = find_xml_local(x[2], 'Recipient', 1);
  h =  hash [];
  parse_mm7_Recipient(h, aux1);
  data{'Recipient'} = h;
  tag = find_xml_local(x[2], 'Sender', 1);
  h =  hash [];
  parse_mm7_Sender(h, aux1);
  data{'Sender'} = h;
  POPTAG_RAW(x[2],  'Date', data.Date);
  POPTAG_RAW(x[2],  'MMStatus', data.MMStatus);
  POPTAG_RAW(x[2],  'MMStatusExtension', data.MMStatusExtension);
  POPTAG_RAW(x[2],  'StatusText', data.StatusText);
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);
  tag = find_xml_local(x[2], 'UACapabilities', 1);
  h =  hash [];
  parse_mm7_UACapabilities(h, aux1);
  data{'UACapabilities'} = h;

}

function build_mm7_DeliveryReportReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'MMSRelayServerID', data.MMSRelayServerID);
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);
  push body, build_mm7_Recipient(data{'Recipient'});
  push body, build_mm7_Sender(data{'Sender'});
  PUSHTAG_RAW(body, 'Date', data.Date);
  PUSHTAG_RAW(body, 'MMStatus', data.MMStatus);
  PUSHTAG_RAW(body, 'MMStatusExtension', data.MMStatusExtension);
  PUSHTAG_RAW(body, 'StatusText', data.StatusText);
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);
  push body, build_mm7_UACapabilities(data{'UACapabilities'});

  return TAG('mm7:DeliveryReportReq', attr, body);
}




function parse_mm7_DeliveryReportRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_DeliveryReportRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:DeliveryReportRsp', attr, body);
}




function parse_mm7_Details(data, x) {


}

function build_mm7_Details(data) {
  attr = [];
  body = [];


  return TAG('mm7:Details', attr, body);
}




function parse_mm7_Extension(data, x) {

  tag = find_xml_local(x[2], 'IdentityAddressingToken', 1);
  h =  hash [];
  parse_mm7_IdentityAddressingToken(h, aux1);
  data{'IdentityAddressingToken'} = h;
  tag = find_xml_local(x[2], 'MessageExtraData', 1);
  h =  hash [];
  parse_mm7_MessageExtraData(h, aux1);
  data{'MessageExtraData'} = h;

}

function build_mm7_Extension(data) {
  attr = [];
  body = [];

  push body, build_mm7_IdentityAddressingToken(data{'IdentityAddressingToken'});
  push body, build_mm7_MessageExtraData(data{'MessageExtraData'});

  return TAG('mm7:Extension', attr, body);
}




function parse_mm7_IdentityAddressingToken(data, x) {

  POPTAG_RAW(x[2],  'CredentialRef', data.CredentialRef);

}

function build_mm7_IdentityAddressingToken(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'CredentialRef', data.CredentialRef);

  return TAG('mm7:IdentityAddressingToken', attr, body);
}




function parse_mm7_MessageExtraData(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'element', i); ++i) {
    h =  hash [];
    parse_mm7_element(h, tag);
    push data{'element'}, h;
  }

}

function build_mm7_MessageExtraData(data) {
  attr = [];
  body = [];

  for d(data{'element'}) push body,build_mm7_element(d);

  return TAG('mm7:MessageExtraData', attr, body);
}




function parse_mm7_Number(data, x) {
  POPATTR(x[1], 'addressCoding', data.addressCoding);
  POPATTR(x[1], 'displayOnly', data.displayOnly);
  POPATTR(x[1], 'id', data.id);


}

function build_mm7_Number(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'addressCoding', data.addressCoding);
  PUSHATTR(attr, 'displayOnly', data.displayOnly);
  PUSHATTR(attr, 'id', data.id);


  return TAG('mm7:Number', attr, body);
}




function parse_mm7_PreferredChannels(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'DeliverUsing', i); ++i)
    push data{'DeliverUsing'}, tag[2];

}

function build_mm7_PreferredChannels(data) {
  attr = [];
  body = [];

  for d(data{'DeliverUsing'})PUSHTAG_RAW(body,'DeliverUsing',d);

  return TAG('mm7:PreferredChannels', attr, body);
}




function parse_mm7_Previouslysentby(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'UserAgent', i); ++i) {
    h =  hash [];
    parse_mm7_UserAgent(h, tag);
    push data{'UserAgent'}, h;
  }

}

function build_mm7_Previouslysentby(data) {
  attr = [];
  body = [];

  for d(data{'UserAgent'}) push body,build_mm7_UserAgent(d);

  return TAG('mm7:Previouslysentby', attr, body);
}




function parse_mm7_Previouslysentdateandtime(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'DateTime', i); ++i) {
    h =  hash [];
    parse_mm7_DateTime(h, tag);
    push data{'DateTime'}, h;
  }

}

function build_mm7_Previouslysentdateandtime(data) {
  attr = [];
  body = [];

  for d(data{'DateTime'}) push body,build_mm7_DateTime(d);

  return TAG('mm7:Previouslysentdateandtime', attr, body);
}




function parse_mm7_QueryStatusReq(data, x) {

  tag = find_xml_local(x[2], 'TransactionID', 1);
  h =  hash [];
  parse_mm7_TransactionID(h, aux1);
  data{'TransactionID'} = h;
  POPTAG_RAW(x[2],  'MessageType', data.MessageType);
  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'VASPID', data.VASPID);
  POPTAG_RAW(x[2],  'VASID', data.VASID);
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);

}

function build_mm7_QueryStatusReq(data) {
  attr = [];
  body = [];

  push body, build_mm7_TransactionID(data{'TransactionID'});
  PUSHTAG_RAW(body, 'MessageType', data.MessageType);
  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'VASPID', data.VASPID);
  PUSHTAG_RAW(body, 'VASID', data.VASID);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);

  return TAG('mm7:QueryStatusReq', attr, body);
}




function parse_mm7_QueryStatusRsp(data, x) {

  tag = find_xml_local(x[2], 'TransactionID', 1);
  h =  hash [];
  parse_mm7_TransactionID(h, aux1);
  data{'TransactionID'} = h;
  POPTAG_RAW(x[2],  'MessageType', data.MessageType);
  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'StatusCode', data.StatusCode);
  POPTAG_RAW(x[2],  'StatusText', data.StatusText);
  tag = find_xml_local(x[2], 'Details', 1);
  h =  hash [];
  parse_mm7_Details(h, aux1);
  data{'Details'} = h;

}

function build_mm7_QueryStatusRsp(data) {
  attr = [];
  body = [];

  push body, build_mm7_TransactionID(data{'TransactionID'});
  PUSHTAG_RAW(body, 'MessageType', data.MessageType);
  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'StatusCode', data.StatusCode);
  PUSHTAG_RAW(body, 'StatusText', data.StatusText);
  push body, build_mm7_Details(data{'Details'});

  return TAG('mm7:QueryStatusRsp', attr, body);
}




function parse_mm7_RFC2822Address(data, x) {
  POPATTR(x[1], 'addressCoding', data.addressCoding);
  POPATTR(x[1], 'displayOnly', data.displayOnly);
  POPATTR(x[1], 'id', data.id);


}

function build_mm7_RFC2822Address(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'addressCoding', data.addressCoding);
  PUSHATTR(attr, 'displayOnly', data.displayOnly);
  PUSHATTR(attr, 'id', data.id);


  return TAG('mm7:RFC2822Address', attr, body);
}




function parse_mm7_RSErrorRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_RSErrorRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:RSErrorRsp', attr, body);
}




function parse_mm7_ReadReplyReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'MMSRelayServerID', data.MMSRelayServerID);
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);
  tag = find_xml_local(x[2], 'Recipient', 1);
  h =  hash [];
  parse_mm7_Recipient(h, aux1);
  data{'Recipient'} = h;
  tag = find_xml_local(x[2], 'Sender', 1);
  h =  hash [];
  parse_mm7_Sender(h, aux1);
  data{'Sender'} = h;
  POPTAG_RAW(x[2],  'TimeStamp', data.TimeStamp);
  POPTAG_RAW(x[2],  'MMStatus', data.MMStatus);
  POPTAG_RAW(x[2],  'StatusText', data.StatusText);
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);

}

function build_mm7_ReadReplyReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'MMSRelayServerID', data.MMSRelayServerID);
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);
  push body, build_mm7_Recipient(data{'Recipient'});
  push body, build_mm7_Sender(data{'Sender'});
  PUSHTAG_RAW(body, 'TimeStamp', data.TimeStamp);
  PUSHTAG_RAW(body, 'MMStatus', data.MMStatus);
  PUSHTAG_RAW(body, 'StatusText', data.StatusText);
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);

  return TAG('mm7:ReadReplyReq', attr, body);
}




function parse_mm7_ReadReplyRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_ReadReplyRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:ReadReplyRsp', attr, body);
}




function parse_mm7_Recipient(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_Recipient(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:Recipient', attr, body);
}




function parse_mm7_Recipients(data, x) {

  tag = find_xml_local(x[2], 'To', 1);
  h =  hash [];
  parse_mm7_To(h, aux1);
  data{'To'} = h;
  tag = find_xml_local(x[2], 'Cc', 1);
  h =  hash [];
  parse_mm7_Cc(h, aux1);
  data{'Cc'} = h;
  tag = find_xml_local(x[2], 'Bcc', 1);
  h =  hash [];
  parse_mm7_Bcc(h, aux1);
  data{'Bcc'} = h;

}

function build_mm7_Recipients(data) {
  attr = [];
  body = [];

  push body, build_mm7_To(data{'To'});
  push body, build_mm7_Cc(data{'Cc'});
  push body, build_mm7_Bcc(data{'Bcc'});

  return TAG('mm7:Recipients', attr, body);
}




function parse_mm7_ReplaceReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'SenderIdentification', 1);
  h =  hash [];
  parse_mm7_SenderIdentification(h, aux1);
  data{'SenderIdentification'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);
  tag = find_xml_local(x[2], 'ServiceCode', 1);
  h =  hash [];
  parse_mm7_ServiceCode(h, aux1);
  data{'ServiceCode'} = h;
  POPTAG_RAW(x[2],  'TimeStamp', data.TimeStamp);
  POPTAG_RAW(x[2],  'ReadReply', data.ReadReply);
  POPTAG_RAW(x[2],  'EarliestDeliveryTime', data.EarliestDeliveryTime);
  POPTAG_RAW(x[2],  'DistributionIndicator', data.DistributionIndicator);
  POPTAG_RAW(x[2],  'ContentClass', data.ContentClass);
  POPTAG_RAW(x[2],  'DRMContent', data.DRMContent);
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);
  for (i=1; tag = find_xml_local(x[2], 'Content', i); ++i) {
    h =  hash [];
    parse_mm7_Content(h, tag);
    push data{'Content'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalInformation', i); ++i) {
    h =  hash [];
    parse_mm7_AdditionalInformation(h, tag);
    push data{'AdditionalInformation'}, h;
  }
  tag = find_xml_local(x[2], 'MessageExtraData', 1);
  h =  hash [];
  parse_mm7_MessageExtraData(h, aux1);
  data{'MessageExtraData'} = h;

}

function build_mm7_ReplaceReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_SenderIdentification(data{'SenderIdentification'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);
  push body, build_mm7_ServiceCode(data{'ServiceCode'});
  PUSHTAG_RAW(body, 'TimeStamp', data.TimeStamp);
  PUSHTAG_RAW(body, 'ReadReply', data.ReadReply);
  PUSHTAG_RAW(body, 'EarliestDeliveryTime', data.EarliestDeliveryTime);
  PUSHTAG_RAW(body, 'DistributionIndicator', data.DistributionIndicator);
  PUSHTAG_RAW(body, 'ContentClass', data.ContentClass);
  PUSHTAG_RAW(body, 'DRMContent', data.DRMContent);
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);
  for d(data{'Content'}) push body,build_mm7_Content(d);
  for d(data{'AdditionalInformation'}) push body,build_mm7_AdditionalInformation(d);
  push body, build_mm7_MessageExtraData(data{'MessageExtraData'});

  return TAG('mm7:ReplaceReq', attr, body);
}




function parse_mm7_ReplaceRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_ReplaceRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:ReplaceRsp', attr, body);
}




function parse_mm7_ReplyCharging(data, x) {
  POPATTR(x[1], 'replyChargingSize', data.replyChargingSize);
  POPATTR(x[1], 'replyDeadline', data.replyDeadline);


}

function build_mm7_ReplyCharging(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'replyChargingSize', data.replyChargingSize);
  PUSHATTR(attr, 'replyDeadline', data.replyDeadline);


  return TAG('mm7:ReplyCharging', attr, body);
}




function parse_mm7_Sender(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_Sender(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:Sender', attr, body);
}




function parse_mm7_SenderAddress(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_SenderAddress(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:SenderAddress', attr, body);
}




function parse_mm7_SenderIdentification(data, x) {

  POPTAG_RAW(x[2],  'VASPID', data.VASPID);
  POPTAG_RAW(x[2],  'VASID', data.VASID);
  tag = find_xml_local(x[2], 'SenderAddress', 1);
  h =  hash [];
  parse_mm7_SenderAddress(h, aux1);
  data{'SenderAddress'} = h;

}

function build_mm7_SenderIdentification(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'VASPID', data.VASPID);
  PUSHTAG_RAW(body, 'VASID', data.VASID);
  push body, build_mm7_SenderAddress(data{'SenderAddress'});

  return TAG('mm7:SenderIdentification', attr, body);
}




function parse_mm7_ServiceCode(data, x) {


}

function build_mm7_ServiceCode(data) {
  attr = [];
  body = [];


  return TAG('mm7:ServiceCode', attr, body);
}




function parse_mm7_ShortCode(data, x) {
  POPATTR(x[1], 'addressCoding', data.addressCoding);
  POPATTR(x[1], 'displayOnly', data.displayOnly);
  POPATTR(x[1], 'id', data.id);


}

function build_mm7_ShortCode(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'addressCoding', data.addressCoding);
  PUSHATTR(attr, 'displayOnly', data.displayOnly);
  PUSHATTR(attr, 'id', data.id);


  return TAG('mm7:ShortCode', attr, body);
}




function parse_mm7_Status(data, x) {

  POPTAG_RAW(x[2],  'StatusCode', data.StatusCode);
  POPTAG_RAW(x[2],  'StatusText', data.StatusText);
  tag = find_xml_local(x[2], 'Details', 1);
  h =  hash [];
  parse_mm7_Details(h, aux1);
  data{'Details'} = h;

}

function build_mm7_Status(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'StatusCode', data.StatusCode);
  PUSHTAG_RAW(body, 'StatusText', data.StatusText);
  push body, build_mm7_Details(data{'Details'});

  return TAG('mm7:Status', attr, body);
}




function parse_mm7_SubmitReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'SenderIdentification', 1);
  h =  hash [];
  parse_mm7_SenderIdentification(h, aux1);
  data{'SenderIdentification'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  tag = find_xml_local(x[2], 'Recipients', 1);
  h =  hash [];
  parse_mm7_Recipients(h, aux1);
  data{'Recipients'} = h;
  tag = find_xml_local(x[2], 'PreferredChannels', 1);
  h =  hash [];
  parse_mm7_PreferredChannels(h, aux1);
  data{'PreferredChannels'} = h;
  tag = find_xml_local(x[2], 'ServiceCode', 1);
  h =  hash [];
  parse_mm7_ServiceCode(h, aux1);
  data{'ServiceCode'} = h;
  POPTAG_RAW(x[2],  'LinkedID', data.LinkedID);
  POPTAG_RAW(x[2],  'MessageClass', data.MessageClass);
  POPTAG_RAW(x[2],  'TimeStamp', data.TimeStamp);
  tag = find_xml_local(x[2], 'ReplyCharging', 1);
  h =  hash [];
  parse_mm7_ReplyCharging(h, aux1);
  data{'ReplyCharging'} = h;
  POPTAG_RAW(x[2],  'EarliestDeliveryTime', data.EarliestDeliveryTime);
  POPTAG_RAW(x[2],  'ExpiryDate', data.ExpiryDate);
  POPTAG_RAW(x[2],  'DeliveryReport', data.DeliveryReport);
  POPTAG_RAW(x[2],  'ReadReply', data.ReadReply);
  POPTAG_RAW(x[2],  'Priority', data.Priority);
  POPTAG_RAW(x[2],  'Subject', data.Subject);
  POPTAG_RAW(x[2],  'ChargedParty', data.ChargedParty);
  POPTAG_RAW(x[2],  'ChargedPartyID', data.ChargedPartyID);
  tag = find_xml_local(x[2], 'ThirdPartyPayer', 1);
  h =  hash [];
  parse_mm7_ThirdPartyPayer(h, aux1);
  data{'ThirdPartyPayer'} = h;
  POPTAG_RAW(x[2],  'DistributionIndicator', data.DistributionIndicator);
  tag = find_xml_local(x[2], 'DeliveryCondition', 1);
  h =  hash [];
  parse_mm7_DeliveryCondition(h, aux1);
  data{'DeliveryCondition'} = h;
  POPTAG_RAW(x[2],  'ApplicID', data.ApplicID);
  POPTAG_RAW(x[2],  'ReplyApplicID', data.ReplyApplicID);
  POPTAG_RAW(x[2],  'AuxApplicInfo', data.AuxApplicInfo);
  POPTAG_RAW(x[2],  'ContentClass', data.ContentClass);
  POPTAG_RAW(x[2],  'DRMContent', data.DRMContent);
  for (i=1; tag = find_xml_local(x[2], 'Content', i); ++i) {
    h =  hash [];
    parse_mm7_Content(h, tag);
    push data{'Content'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalInformation', i); ++i) {
    h =  hash [];
    parse_mm7_AdditionalInformation(h, tag);
    push data{'AdditionalInformation'}, h;
  }
  tag = find_xml_local(x[2], 'MessageExtraData', 1);
  h =  hash [];
  parse_mm7_MessageExtraData(h, aux1);
  data{'MessageExtraData'} = h;

}

function build_mm7_SubmitReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_SenderIdentification(data{'SenderIdentification'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  push body, build_mm7_Recipients(data{'Recipients'});
  push body, build_mm7_PreferredChannels(data{'PreferredChannels'});
  push body, build_mm7_ServiceCode(data{'ServiceCode'});
  PUSHTAG_RAW(body, 'LinkedID', data.LinkedID);
  PUSHTAG_RAW(body, 'MessageClass', data.MessageClass);
  PUSHTAG_RAW(body, 'TimeStamp', data.TimeStamp);
  push body, build_mm7_ReplyCharging(data{'ReplyCharging'});
  PUSHTAG_RAW(body, 'EarliestDeliveryTime', data.EarliestDeliveryTime);
  PUSHTAG_RAW(body, 'ExpiryDate', data.ExpiryDate);
  PUSHTAG_RAW(body, 'DeliveryReport', data.DeliveryReport);
  PUSHTAG_RAW(body, 'ReadReply', data.ReadReply);
  PUSHTAG_RAW(body, 'Priority', data.Priority);
  PUSHTAG_RAW(body, 'Subject', data.Subject);
  PUSHTAG_RAW(body, 'ChargedParty', data.ChargedParty);
  PUSHTAG_RAW(body, 'ChargedPartyID', data.ChargedPartyID);
  push body, build_mm7_ThirdPartyPayer(data{'ThirdPartyPayer'});
  PUSHTAG_RAW(body, 'DistributionIndicator', data.DistributionIndicator);
  push body, build_mm7_DeliveryCondition(data{'DeliveryCondition'});
  PUSHTAG_RAW(body, 'ApplicID', data.ApplicID);
  PUSHTAG_RAW(body, 'ReplyApplicID', data.ReplyApplicID);
  PUSHTAG_RAW(body, 'AuxApplicInfo', data.AuxApplicInfo);
  PUSHTAG_RAW(body, 'ContentClass', data.ContentClass);
  PUSHTAG_RAW(body, 'DRMContent', data.DRMContent);
  for d(data{'Content'}) push body,build_mm7_Content(d);
  for d(data{'AdditionalInformation'}) push body,build_mm7_AdditionalInformation(d);
  push body, build_mm7_MessageExtraData(data{'MessageExtraData'});

  return TAG('mm7:SubmitReq', attr, body);
}




function parse_mm7_SubmitRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);

}

function build_mm7_SubmitRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);

  return TAG('mm7:SubmitRsp', attr, body);
}




function parse_mm7_ThirdPartyPayer(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_ThirdPartyPayer(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:ThirdPartyPayer', attr, body);
}




function parse_mm7_To(data, x) {

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_To(data) {
  attr = [];
  body = [];

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:To', attr, body);
}




function parse_mm7_TransactionID(data, x) {
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_encodingStyle', data.e_encodingStyle);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);


}

function build_mm7_TransactionID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_encodingStyle', data.e_encodingStyle);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);


  return TAG('mm7:TransactionID', attr, body);
}




function parse_mm7_UACapabilities(data, x) {
  POPATTR(x[1], 'TimeStamp', data.TimeStamp);
  POPATTR(x[1], 'UAProf', data.UAProf);


}

function build_mm7_UACapabilities(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'TimeStamp', data.TimeStamp);
  PUSHATTR(attr, 'UAProf', data.UAProf);


  return TAG('mm7:UACapabilities', attr, body);
}




function parse_mm7_UserAgent(data, x) {
  POPATTR(x[1], 'sequence', data.sequence);

  tag = find_xml_local(x[2], 'RFC2822Address', 1);
  h =  hash [];
  parse_mm7_RFC2822Address(h, aux1);
  data{'RFC2822Address'} = h;
  tag = find_xml_local(x[2], 'Number', 1);
  h =  hash [];
  parse_mm7_Number(h, aux1);
  data{'Number'} = h;
  tag = find_xml_local(x[2], 'ShortCode', 1);
  h =  hash [];
  parse_mm7_ShortCode(h, aux1);
  data{'ShortCode'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_mm7_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_mm7_UserAgent(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'sequence', data.sequence);

  push body, build_mm7_RFC2822Address(data{'RFC2822Address'});
  push body, build_mm7_Number(data{'Number'});
  push body, build_mm7_ShortCode(data{'ShortCode'});
  push body, build_mm7_Extension(data{'Extension'});

  return TAG('mm7:UserAgent', attr, body);
}




function parse_mm7_VASPErrorRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_mm7_VASPErrorRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);

  return TAG('mm7:VASPErrorRsp', attr, body);
}




function parse_mm7_element(data, x) {

  POPTAG_RAW(x[2],  'key', data.key);
  POPTAG_RAW(x[2],  'value', data.value);

}

function build_mm7_element(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'key', data.key);
  PUSHTAG_RAW(body, 'value', data.value);

  return TAG('mm7:element', attr, body);
}




function parse_mm7_extendedCancelReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'SenderIdentification', 1);
  h =  hash [];
  parse_mm7_SenderIdentification(h, aux1);
  data{'SenderIdentification'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_mm7_Extension(h, tag);
    push data{'Extension'}, h;
  }
  POPTAG_RAW(x[2],  'CancelID', data.CancelID);

}

function build_mm7_extendedCancelReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_SenderIdentification(data{'SenderIdentification'});
  for d(data{'Extension'}) push body,build_mm7_Extension(d);
  PUSHTAG_RAW(body, 'CancelID', data.CancelID);

  return TAG('mm7:extendedCancelReq', attr, body);
}




function parse_mm7_extendedCancelRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;

}

function build_mm7_extendedCancelRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  push body, build_mm7_Status(data{'Status'});

  return TAG('mm7:extendedCancelRsp', attr, body);
}




function parse_mm7_extendedReplaceReq(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'VASPID', data.VASPID);
  POPTAG_RAW(x[2],  'VASID', data.VASID);
  tag = find_xml_local(x[2], 'ServiceCode', 1);
  h =  hash [];
  parse_mm7_ServiceCode(h, aux1);
  data{'ServiceCode'} = h;
  POPTAG_RAW(x[2],  'ReplaceID', data.ReplaceID);
  POPTAG_RAW(x[2],  'TimeStamp', data.TimeStamp);
  POPTAG_RAW(x[2],  'EarliestDeliveryTime', data.EarliestDeliveryTime);
  POPTAG_RAW(x[2],  'ExpiryDate', data.ExpiryDate);
  POPTAG_RAW(x[2],  'ReadReply', data.ReadReply);
  POPTAG_RAW(x[2],  'DeliveryReport', data.DeliveryReport);
  for (i=1; tag = find_xml_local(x[2], 'Content', i); ++i) {
    h =  hash [];
    parse_mm7_Content(h, tag);
    push data{'Content'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalInformation', i); ++i) {
    h =  hash [];
    parse_mm7_AdditionalInformation(h, tag);
    push data{'AdditionalInformation'}, h;
  }
  tag = find_xml_local(x[2], 'MessageExtraData', 1);
  h =  hash [];
  parse_mm7_MessageExtraData(h, aux1);
  data{'MessageExtraData'} = h;

}

function build_mm7_extendedReplaceReq(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'VASPID', data.VASPID);
  PUSHTAG_RAW(body, 'VASID', data.VASID);
  push body, build_mm7_ServiceCode(data{'ServiceCode'});
  PUSHTAG_RAW(body, 'ReplaceID', data.ReplaceID);
  PUSHTAG_RAW(body, 'TimeStamp', data.TimeStamp);
  PUSHTAG_RAW(body, 'EarliestDeliveryTime', data.EarliestDeliveryTime);
  PUSHTAG_RAW(body, 'ExpiryDate', data.ExpiryDate);
  PUSHTAG_RAW(body, 'ReadReply', data.ReadReply);
  PUSHTAG_RAW(body, 'DeliveryReport', data.DeliveryReport);
  for d(data{'Content'}) push body,build_mm7_Content(d);
  for d(data{'AdditionalInformation'}) push body,build_mm7_AdditionalInformation(d);
  push body, build_mm7_MessageExtraData(data{'MessageExtraData'});

  return TAG('mm7:extendedReplaceReq', attr, body);
}




function parse_mm7_extendedReplaceRsp(data, x) {

  POPTAG_RAW(x[2],  'MM7Version', data.MM7Version);
  POPTAG_RAW(x[2],  'MessageID', data.MessageID);
  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_mm7_Status(h, aux1);
  data{'Status'} = h;

}

function build_mm7_extendedReplaceRsp(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'MM7Version', data.MM7Version);
  PUSHTAG_RAW(body, 'MessageID', data.MessageID);
  push body, build_mm7_Status(data{'Status'});

  return TAG('mm7:extendedReplaceRsp', attr, body);
}


/* EOF -- c/zx-mm7.ds */
