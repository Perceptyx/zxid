/* c/zx-im.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_im_IdentityMappingRequest(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'MappingInput', i); ++i) {
    h =  hash [];
    parse_im_MappingInput(h, tag);
    push data{'MappingInput'}, h;
  }

}

function build_im_IdentityMappingRequest(data) {
  attr = [];
  body = [];

  for d(data{'MappingInput'}) push body,build_im_MappingInput(d);

  return TAG('im:IdentityMappingRequest', attr, body);
}




function parse_im_IdentityMappingResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'MappingOutput', i); ++i) {
    h =  hash [];
    parse_im_MappingOutput(h, tag);
    push data{'MappingOutput'}, h;
  }

}

function build_im_IdentityMappingResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'MappingOutput'}) push body,build_im_MappingOutput(d);

  return TAG('im:IdentityMappingResponse', attr, body);
}




function parse_im_MappingInput(data, x) {
  POPATTR(x[1], 'reqID', data.reqID);

  tag = find_xml_local(x[2], 'TokenPolicy', 1);
  h =  hash [];
  parse_sec_TokenPolicy(h, aux1);
  data{'TokenPolicy'} = h;
  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;

}

function build_im_MappingInput(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqID', data.reqID);

  push body, build_sec_TokenPolicy(data{'TokenPolicy'});
  push body, build_sec_Token(data{'Token'});

  return TAG('im:MappingInput', attr, body);
}




function parse_im_MappingOutput(data, x) {
  POPATTR(x[1], 'reqRef', data.reqRef);

  tag = find_xml_local(x[2], 'Token', 1);
  h =  hash [];
  parse_sec_Token(h, aux1);
  data{'Token'} = h;

}

function build_im_MappingOutput(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'reqRef', data.reqRef);

  push body, build_sec_Token(data{'Token'});

  return TAG('im:MappingOutput', attr, body);
}


/* EOF -- c/zx-im.ds */
