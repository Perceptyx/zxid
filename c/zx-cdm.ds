/* c/zx-cdm.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_cdm_ADR(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  POPTAG_RAW(x[2],  'HOME', data.HOME);
  POPTAG_RAW(x[2],  'WORK', data.WORK);
  POPTAG_RAW(x[2],  'POSTAL', data.POSTAL);
  POPTAG_RAW(x[2],  'PARCEL', data.PARCEL);
  POPTAG_RAW(x[2],  'DOM', data.DOM);
  POPTAG_RAW(x[2],  'INTL', data.INTL);
  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'POBOX', 1);
  h =  hash [];
  parse_cdm_POBOX(h, aux1);
  data{'POBOX'} = h;
  tag = find_xml_local(x[2], 'EXTADR', 1);
  h =  hash [];
  parse_cdm_EXTADR(h, aux1);
  data{'EXTADR'} = h;
  tag = find_xml_local(x[2], 'STREET', 1);
  h =  hash [];
  parse_cdm_STREET(h, aux1);
  data{'STREET'} = h;
  tag = find_xml_local(x[2], 'LOCALITY', 1);
  h =  hash [];
  parse_cdm_LOCALITY(h, aux1);
  data{'LOCALITY'} = h;
  tag = find_xml_local(x[2], 'REGION', 1);
  h =  hash [];
  parse_cdm_REGION(h, aux1);
  data{'REGION'} = h;
  tag = find_xml_local(x[2], 'PCODE', 1);
  h =  hash [];
  parse_cdm_PCODE(h, aux1);
  data{'PCODE'} = h;
  tag = find_xml_local(x[2], 'CTRY', 1);
  h =  hash [];
  parse_cdm_CTRY(h, aux1);
  data{'CTRY'} = h;

}

function build_cdm_ADR(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  PUSHTAG_RAW(body, 'HOME', data.HOME);
  PUSHTAG_RAW(body, 'WORK', data.WORK);
  PUSHTAG_RAW(body, 'POSTAL', data.POSTAL);
  PUSHTAG_RAW(body, 'PARCEL', data.PARCEL);
  PUSHTAG_RAW(body, 'DOM', data.DOM);
  PUSHTAG_RAW(body, 'INTL', data.INTL);
  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_POBOX(data{'POBOX'});
  push body, build_cdm_EXTADR(data{'EXTADR'});
  push body, build_cdm_STREET(data{'STREET'});
  push body, build_cdm_LOCALITY(data{'LOCALITY'});
  push body, build_cdm_REGION(data{'REGION'});
  push body, build_cdm_PCODE(data{'PCODE'});
  push body, build_cdm_CTRY(data{'CTRY'});

  return TAG('cdm:ADR', attr, body);
}




function parse_cdm_AGENT(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'vCard', 1);
  h =  hash [];
  parse_cdm_vCard(h, aux1);
  data{'vCard'} = h;
  tag = find_xml_local(x[2], 'EXTVAL', 1);
  h =  hash [];
  parse_cdm_EXTVAL(h, aux1);
  data{'EXTVAL'} = h;

}

function build_cdm_AGENT(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_vCard(data{'vCard'});
  push body, build_cdm_EXTVAL(data{'EXTVAL'});

  return TAG('cdm:AGENT', attr, body);
}




function parse_cdm_BDAY(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_BDAY(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:BDAY', attr, body);
}




function parse_cdm_BINVAL(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_BINVAL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:BINVAL', attr, body);
}




function parse_cdm_CALADRURI(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);

  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'URI', 1);
  h =  hash [];
  parse_cdm_URI(h, aux1);
  data{'URI'} = h;

}

function build_cdm_CALADRURI(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);

  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_URI(data{'URI'});

  return TAG('cdm:CALADRURI', attr, body);
}




function parse_cdm_CALURI(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);

  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'URI', 1);
  h =  hash [];
  parse_cdm_URI(h, aux1);
  data{'URI'} = h;

}

function build_cdm_CALURI(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);

  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_URI(data{'URI'});

  return TAG('cdm:CALURI', attr, body);
}




function parse_cdm_CAPURI(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);

  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'URI', 1);
  h =  hash [];
  parse_cdm_URI(h, aux1);
  data{'URI'} = h;

}

function build_cdm_CAPURI(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);

  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_URI(data{'URI'});

  return TAG('cdm:CAPURI', attr, body);
}




function parse_cdm_CATEGORIES(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  for (i=1; tag = find_xml_local(x[2], 'KEYWORD', i); ++i) {
    h =  hash [];
    parse_cdm_KEYWORD(h, tag);
    push data{'KEYWORD'}, h;
  }

}

function build_cdm_CATEGORIES(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  for d(data{'KEYWORD'}) push body,build_cdm_KEYWORD(d);

  return TAG('cdm:CATEGORIES', attr, body);
}




function parse_cdm_CLASS(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);

  POPTAG_RAW(x[2],  'PUBLIC', data.PUBLIC);
  POPTAG_RAW(x[2],  'PRIVATE', data.PRIVATE);
  POPTAG_RAW(x[2],  'CONFIDENTIAL', data.CONFIDENTIAL);

}

function build_cdm_CLASS(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);

  PUSHTAG_RAW(body, 'PUBLIC', data.PUBLIC);
  PUSHTAG_RAW(body, 'PRIVATE', data.PRIVATE);
  PUSHTAG_RAW(body, 'CONFIDENTIAL', data.CONFIDENTIAL);

  return TAG('cdm:CLASS', attr, body);
}




function parse_cdm_CRED(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_CRED(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:CRED', attr, body);
}




function parse_cdm_CTRY(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_CTRY(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:CTRY', attr, body);
}




function parse_cdm_DESC(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_DESC(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:DESC', attr, body);
}




function parse_cdm_EMAIL(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  POPTAG_RAW(x[2],  'HOME', data.HOME);
  POPTAG_RAW(x[2],  'WORK', data.WORK);
  POPTAG_RAW(x[2],  'INTERNET', data.INTERNET);
  POPTAG_RAW(x[2],  'PREF', data.PREF);
  POPTAG_RAW(x[2],  'X400', data.X400);
  tag = find_xml_local(x[2], 'USERID', 1);
  h =  hash [];
  parse_cdm_USERID(h, aux1);
  data{'USERID'} = h;

}

function build_cdm_EMAIL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  PUSHTAG_RAW(body, 'HOME', data.HOME);
  PUSHTAG_RAW(body, 'WORK', data.WORK);
  PUSHTAG_RAW(body, 'INTERNET', data.INTERNET);
  PUSHTAG_RAW(body, 'PREF', data.PREF);
  PUSHTAG_RAW(body, 'X400', data.X400);
  push body, build_cdm_USERID(data{'USERID'});

  return TAG('cdm:EMAIL', attr, body);
}




function parse_cdm_EXTADR(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_EXTADR(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:EXTADR', attr, body);
}




function parse_cdm_EXTVAL(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_EXTVAL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:EXTVAL', attr, body);
}




function parse_cdm_FAMILY(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_FAMILY(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:FAMILY', attr, body);
}




function parse_cdm_FBURL(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);

  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'URI', 1);
  h =  hash [];
  parse_cdm_URI(h, aux1);
  data{'URI'} = h;

}

function build_cdm_FBURL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);

  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_URI(data{'URI'});

  return TAG('cdm:FBURL', attr, body);
}




function parse_cdm_FN(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_FN(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:FN', attr, body);
}




function parse_cdm_GEO(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'LAT', 1);
  h =  hash [];
  parse_cdm_LAT(h, aux1);
  data{'LAT'} = h;
  tag = find_xml_local(x[2], 'LON', 1);
  h =  hash [];
  parse_cdm_LON(h, aux1);
  data{'LON'} = h;

}

function build_cdm_GEO(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_LAT(data{'LAT'});
  push body, build_cdm_LON(data{'LON'});

  return TAG('cdm:GEO', attr, body);
}




function parse_cdm_GIVEN(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_GIVEN(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:GIVEN', attr, body);
}




function parse_cdm_JABBERID(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_JABBERID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:JABBERID', attr, body);
}




function parse_cdm_KEY(data, x) {

  tag = find_xml_local(x[2], 'TYPE', 1);
  h =  hash [];
  parse_cdm_TYPE(h, aux1);
  data{'TYPE'} = h;
  tag = find_xml_local(x[2], 'CRED', 1);
  h =  hash [];
  parse_cdm_CRED(h, aux1);
  data{'CRED'} = h;

}

function build_cdm_KEY(data) {
  attr = [];
  body = [];

  push body, build_cdm_TYPE(data{'TYPE'});
  push body, build_cdm_CRED(data{'CRED'});

  return TAG('cdm:KEY', attr, body);
}




function parse_cdm_KEYWORD(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_KEYWORD(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:KEYWORD', attr, body);
}




function parse_cdm_LABEL(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  POPTAG_RAW(x[2],  'HOME', data.HOME);
  POPTAG_RAW(x[2],  'WORK', data.WORK);
  POPTAG_RAW(x[2],  'POSTAL', data.POSTAL);
  POPTAG_RAW(x[2],  'PARCEL', data.PARCEL);
  POPTAG_RAW(x[2],  'DOM', data.DOM);
  POPTAG_RAW(x[2],  'INTL', data.INTL);
  POPTAG_RAW(x[2],  'PREF', data.PREF);
  for (i=1; tag = find_xml_local(x[2], 'LINE', i); ++i) {
    h =  hash [];
    parse_cdm_LINE(h, tag);
    push data{'LINE'}, h;
  }

}

function build_cdm_LABEL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  PUSHTAG_RAW(body, 'HOME', data.HOME);
  PUSHTAG_RAW(body, 'WORK', data.WORK);
  PUSHTAG_RAW(body, 'POSTAL', data.POSTAL);
  PUSHTAG_RAW(body, 'PARCEL', data.PARCEL);
  PUSHTAG_RAW(body, 'DOM', data.DOM);
  PUSHTAG_RAW(body, 'INTL', data.INTL);
  PUSHTAG_RAW(body, 'PREF', data.PREF);
  for d(data{'LINE'}) push body,build_cdm_LINE(d);

  return TAG('cdm:LABEL', attr, body);
}




function parse_cdm_LAT(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_LAT(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:LAT', attr, body);
}




function parse_cdm_LINE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_LINE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:LINE', attr, body);
}




function parse_cdm_LISTMEMBER(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_LISTMEMBER(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:LISTMEMBER', attr, body);
}




function parse_cdm_LOCALITY(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_LOCALITY(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:LOCALITY', attr, body);
}




function parse_cdm_LOGO(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'TYPE', 1);
  h =  hash [];
  parse_cdm_TYPE(h, aux1);
  data{'TYPE'} = h;
  tag = find_xml_local(x[2], 'BINVAL', 1);
  h =  hash [];
  parse_cdm_BINVAL(h, aux1);
  data{'BINVAL'} = h;
  tag = find_xml_local(x[2], 'EXTVAL', 1);
  h =  hash [];
  parse_cdm_EXTVAL(h, aux1);
  data{'EXTVAL'} = h;

}

function build_cdm_LOGO(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_TYPE(data{'TYPE'});
  push body, build_cdm_BINVAL(data{'BINVAL'});
  push body, build_cdm_EXTVAL(data{'EXTVAL'});

  return TAG('cdm:LOGO', attr, body);
}




function parse_cdm_LON(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_LON(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:LON', attr, body);
}




function parse_cdm_MAILER(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_MAILER(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:MAILER', attr, body);
}




function parse_cdm_MIDDLE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_MIDDLE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:MIDDLE', attr, body);
}




function parse_cdm_N(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'FAMILY', 1);
  h =  hash [];
  parse_cdm_FAMILY(h, aux1);
  data{'FAMILY'} = h;
  tag = find_xml_local(x[2], 'GIVEN', 1);
  h =  hash [];
  parse_cdm_GIVEN(h, aux1);
  data{'GIVEN'} = h;
  tag = find_xml_local(x[2], 'MIDDLE', 1);
  h =  hash [];
  parse_cdm_MIDDLE(h, aux1);
  data{'MIDDLE'} = h;
  tag = find_xml_local(x[2], 'PREFIX', 1);
  h =  hash [];
  parse_cdm_PREFIX(h, aux1);
  data{'PREFIX'} = h;
  tag = find_xml_local(x[2], 'SUFFIX', 1);
  h =  hash [];
  parse_cdm_SUFFIX(h, aux1);
  data{'SUFFIX'} = h;

}

function build_cdm_N(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_FAMILY(data{'FAMILY'});
  push body, build_cdm_GIVEN(data{'GIVEN'});
  push body, build_cdm_MIDDLE(data{'MIDDLE'});
  push body, build_cdm_PREFIX(data{'PREFIX'});
  push body, build_cdm_SUFFIX(data{'SUFFIX'});

  return TAG('cdm:N', attr, body);
}




function parse_cdm_NICKNAME(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_NICKNAME(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:NICKNAME', attr, body);
}




function parse_cdm_NOTE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_NOTE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:NOTE', attr, body);
}




function parse_cdm_NUMBER(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_NUMBER(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:NUMBER', attr, body);
}




function parse_cdm_ORG(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'ORGNAME', 1);
  h =  hash [];
  parse_cdm_ORGNAME(h, aux1);
  data{'ORGNAME'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ORGUNIT', i); ++i) {
    h =  hash [];
    parse_cdm_ORGUNIT(h, tag);
    push data{'ORGUNIT'}, h;
  }

}

function build_cdm_ORG(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_ORGNAME(data{'ORGNAME'});
  for d(data{'ORGUNIT'}) push body,build_cdm_ORGUNIT(d);

  return TAG('cdm:ORG', attr, body);
}




function parse_cdm_ORGNAME(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_ORGNAME(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:ORGNAME', attr, body);
}




function parse_cdm_ORGUNIT(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_ORGUNIT(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:ORGUNIT', attr, body);
}




function parse_cdm_PCODE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_PCODE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:PCODE', attr, body);
}




function parse_cdm_PHONETIC(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_PHONETIC(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:PHONETIC', attr, body);
}




function parse_cdm_PHOTO(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'TYPE', 1);
  h =  hash [];
  parse_cdm_TYPE(h, aux1);
  data{'TYPE'} = h;
  tag = find_xml_local(x[2], 'BINVAL', 1);
  h =  hash [];
  parse_cdm_BINVAL(h, aux1);
  data{'BINVAL'} = h;
  tag = find_xml_local(x[2], 'EXTVAL', 1);
  h =  hash [];
  parse_cdm_EXTVAL(h, aux1);
  data{'EXTVAL'} = h;

}

function build_cdm_PHOTO(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_TYPE(data{'TYPE'});
  push body, build_cdm_BINVAL(data{'BINVAL'});
  push body, build_cdm_EXTVAL(data{'EXTVAL'});

  return TAG('cdm:PHOTO', attr, body);
}




function parse_cdm_PHYSICALACCESS(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_PHYSICALACCESS(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:PHYSICALACCESS', attr, body);
}




function parse_cdm_POBOX(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_POBOX(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:POBOX', attr, body);
}




function parse_cdm_PREFIX(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_PREFIX(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:PREFIX', attr, body);
}




function parse_cdm_PRODID(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_PRODID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:PRODID', attr, body);
}




function parse_cdm_REGION(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_REGION(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:REGION', attr, body);
}




function parse_cdm_REV(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_REV(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:REV', attr, body);
}




function parse_cdm_ROLE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_ROLE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:ROLE', attr, body);
}




function parse_cdm_SORT_STRING(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_SORT_STRING(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:SORT_STRING', attr, body);
}




function parse_cdm_SOUND(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'PHONETIC', 1);
  h =  hash [];
  parse_cdm_PHONETIC(h, aux1);
  data{'PHONETIC'} = h;
  tag = find_xml_local(x[2], 'BINVAL', 1);
  h =  hash [];
  parse_cdm_BINVAL(h, aux1);
  data{'BINVAL'} = h;
  tag = find_xml_local(x[2], 'EXTVAL', 1);
  h =  hash [];
  parse_cdm_EXTVAL(h, aux1);
  data{'EXTVAL'} = h;

}

function build_cdm_SOUND(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_PHONETIC(data{'PHONETIC'});
  push body, build_cdm_BINVAL(data{'BINVAL'});
  push body, build_cdm_EXTVAL(data{'EXTVAL'});

  return TAG('cdm:SOUND', attr, body);
}




function parse_cdm_STREET(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_STREET(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:STREET', attr, body);
}




function parse_cdm_SUFFIX(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_SUFFIX(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:SUFFIX', attr, body);
}




function parse_cdm_TEL(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  POPTAG_RAW(x[2],  'HOME', data.HOME);
  POPTAG_RAW(x[2],  'WORK', data.WORK);
  POPTAG_RAW(x[2],  'VOICE', data.VOICE);
  POPTAG_RAW(x[2],  'FAX', data.FAX);
  POPTAG_RAW(x[2],  'PAGER', data.PAGER);
  POPTAG_RAW(x[2],  'MSG', data.MSG);
  POPTAG_RAW(x[2],  'CELL', data.CELL);
  POPTAG_RAW(x[2],  'VIDEO', data.VIDEO);
  POPTAG_RAW(x[2],  'BBS', data.BBS);
  POPTAG_RAW(x[2],  'MODEM', data.MODEM);
  POPTAG_RAW(x[2],  'ISDN', data.ISDN);
  POPTAG_RAW(x[2],  'PCS', data.PCS);
  POPTAG_RAW(x[2],  'PREF', data.PREF);
  tag = find_xml_local(x[2], 'NUMBER', 1);
  h =  hash [];
  parse_cdm_NUMBER(h, aux1);
  data{'NUMBER'} = h;

}

function build_cdm_TEL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  PUSHTAG_RAW(body, 'HOME', data.HOME);
  PUSHTAG_RAW(body, 'WORK', data.WORK);
  PUSHTAG_RAW(body, 'VOICE', data.VOICE);
  PUSHTAG_RAW(body, 'FAX', data.FAX);
  PUSHTAG_RAW(body, 'PAGER', data.PAGER);
  PUSHTAG_RAW(body, 'MSG', data.MSG);
  PUSHTAG_RAW(body, 'CELL', data.CELL);
  PUSHTAG_RAW(body, 'VIDEO', data.VIDEO);
  PUSHTAG_RAW(body, 'BBS', data.BBS);
  PUSHTAG_RAW(body, 'MODEM', data.MODEM);
  PUSHTAG_RAW(body, 'ISDN', data.ISDN);
  PUSHTAG_RAW(body, 'PCS', data.PCS);
  PUSHTAG_RAW(body, 'PREF', data.PREF);
  push body, build_cdm_NUMBER(data{'NUMBER'});

  return TAG('cdm:TEL', attr, body);
}




function parse_cdm_TITLE(data, x) {
  POPATTR(x[1], 'cb_group', data.cb_group);


}

function build_cdm_TITLE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_group', data.cb_group);


  return TAG('cdm:TITLE', attr, body);
}




function parse_cdm_TYPE(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_TYPE(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:TYPE', attr, body);
}




function parse_cdm_TZ(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_TZ(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:TZ', attr, body);
}




function parse_cdm_UID(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_UID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:UID', attr, body);
}




function parse_cdm_URI(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_URI(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:URI', attr, body);
}




function parse_cdm_URL(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_URL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:URL', attr, body);
}




function parse_cdm_USERID(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_USERID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:USERID', attr, body);
}




function parse_cdm_VERSION(data, x) {
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cdm_VERSION(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cdm:VERSION', attr, body);
}




function parse_cdm_vCard(data, x) {
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);

  tag = find_xml_local(x[2], 'VERSION_is_Perl_MakeMaker_gobbled', 1);
  h =  hash [];
  parse_cdm_VERSION(h, aux1);
  data{'VERSION_is_Perl_MakeMaker_gobbled'} = h;
  POPTAG_RAW(x[2],  'CARDID', data.CARDID);
  POPTAG_RAW(x[2],  'DISTRIBUTIONLIST', data.DISTRIBUTIONLIST);
  POPTAG_RAW(x[2],  'SELF', data.SELF);
  POPTAG_RAW(x[2],  'FAVORITE', data.FAVORITE);
  for (i=1; tag = find_xml_local(x[2], 'FN', i); ++i) {
    h =  hash [];
    parse_cdm_FN(h, tag);
    push data{'FN'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'N', i); ++i) {
    h =  hash [];
    parse_cdm_N(h, tag);
    push data{'N'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'LISTMEMBER', i); ++i) {
    h =  hash [];
    parse_cdm_LISTMEMBER(h, tag);
    push data{'LISTMEMBER'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NICKNAME', i); ++i) {
    h =  hash [];
    parse_cdm_NICKNAME(h, tag);
    push data{'NICKNAME'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PHOTO', i); ++i) {
    h =  hash [];
    parse_cdm_PHOTO(h, tag);
    push data{'PHOTO'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'BDAY', i); ++i) {
    h =  hash [];
    parse_cdm_BDAY(h, tag);
    push data{'BDAY'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ADR', i); ++i) {
    h =  hash [];
    parse_cdm_ADR(h, tag);
    push data{'ADR'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'LABEL', i); ++i) {
    h =  hash [];
    parse_cdm_LABEL(h, tag);
    push data{'LABEL'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'TEL', i); ++i) {
    h =  hash [];
    parse_cdm_TEL(h, tag);
    push data{'TEL'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EMAIL', i); ++i) {
    h =  hash [];
    parse_cdm_EMAIL(h, tag);
    push data{'EMAIL'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'JABBERID', i); ++i) {
    h =  hash [];
    parse_cdm_JABBERID(h, tag);
    push data{'JABBERID'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'MAILER', i); ++i) {
    h =  hash [];
    parse_cdm_MAILER(h, tag);
    push data{'MAILER'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'TZ', i); ++i) {
    h =  hash [];
    parse_cdm_TZ(h, tag);
    push data{'TZ'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'GEO', i); ++i) {
    h =  hash [];
    parse_cdm_GEO(h, tag);
    push data{'GEO'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'TITLE', i); ++i) {
    h =  hash [];
    parse_cdm_TITLE(h, tag);
    push data{'TITLE'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ROLE', i); ++i) {
    h =  hash [];
    parse_cdm_ROLE(h, tag);
    push data{'ROLE'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'LOGO', i); ++i) {
    h =  hash [];
    parse_cdm_LOGO(h, tag);
    push data{'LOGO'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AGENT', i); ++i) {
    h =  hash [];
    parse_cdm_AGENT(h, tag);
    push data{'AGENT'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ORG', i); ++i) {
    h =  hash [];
    parse_cdm_ORG(h, tag);
    push data{'ORG'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CATEGORIES', i); ++i) {
    h =  hash [];
    parse_cdm_CATEGORIES(h, tag);
    push data{'CATEGORIES'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NOTE', i); ++i) {
    h =  hash [];
    parse_cdm_NOTE(h, tag);
    push data{'NOTE'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PRODID', i); ++i) {
    h =  hash [];
    parse_cdm_PRODID(h, tag);
    push data{'PRODID'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'REV', i); ++i) {
    h =  hash [];
    parse_cdm_REV(h, tag);
    push data{'REV'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SORT_STRING', i); ++i) {
    h =  hash [];
    parse_cdm_SORT_STRING(h, tag);
    push data{'SORT_STRING'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SOUND', i); ++i) {
    h =  hash [];
    parse_cdm_SOUND(h, tag);
    push data{'SOUND'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'UID', i); ++i) {
    h =  hash [];
    parse_cdm_UID(h, tag);
    push data{'UID'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'URL', i); ++i) {
    h =  hash [];
    parse_cdm_URL(h, tag);
    push data{'URL'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CLASS', i); ++i) {
    h =  hash [];
    parse_cdm_CLASS(h, tag);
    push data{'CLASS'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'KEY', i); ++i) {
    h =  hash [];
    parse_cdm_KEY(h, tag);
    push data{'KEY'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DESC', i); ++i) {
    h =  hash [];
    parse_cdm_DESC(h, tag);
    push data{'DESC'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PHYSICALACCESS', i); ++i) {
    h =  hash [];
    parse_cdm_PHYSICALACCESS(h, tag);
    push data{'PHYSICALACCESS'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CALURI', i); ++i) {
    h =  hash [];
    parse_cdm_CALURI(h, tag);
    push data{'CALURI'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CAPURI', i); ++i) {
    h =  hash [];
    parse_cdm_CAPURI(h, tag);
    push data{'CAPURI'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CALADRURI', i); ++i) {
    h =  hash [];
    parse_cdm_CALADRURI(h, tag);
    push data{'CALADRURI'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'FBURL', i); ++i) {
    h =  hash [];
    parse_cdm_FBURL(h, tag);
    push data{'FBURL'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cdm_vCard(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);

  push body, build_cdm_VERSION(data{'VERSION_is_Perl_MakeMaker_gobbled'});
  PUSHTAG_RAW(body, 'CARDID', data.CARDID);
  PUSHTAG_RAW(body, 'DISTRIBUTIONLIST', data.DISTRIBUTIONLIST);
  PUSHTAG_RAW(body, 'SELF', data.SELF);
  PUSHTAG_RAW(body, 'FAVORITE', data.FAVORITE);
  for d(data{'FN'}) push body,build_cdm_FN(d);
  for d(data{'N'}) push body,build_cdm_N(d);
  for d(data{'LISTMEMBER'}) push body,build_cdm_LISTMEMBER(d);
  for d(data{'NICKNAME'}) push body,build_cdm_NICKNAME(d);
  for d(data{'PHOTO'}) push body,build_cdm_PHOTO(d);
  for d(data{'BDAY'}) push body,build_cdm_BDAY(d);
  for d(data{'ADR'}) push body,build_cdm_ADR(d);
  for d(data{'LABEL'}) push body,build_cdm_LABEL(d);
  for d(data{'TEL'}) push body,build_cdm_TEL(d);
  for d(data{'EMAIL'}) push body,build_cdm_EMAIL(d);
  for d(data{'JABBERID'}) push body,build_cdm_JABBERID(d);
  for d(data{'MAILER'}) push body,build_cdm_MAILER(d);
  for d(data{'TZ'}) push body,build_cdm_TZ(d);
  for d(data{'GEO'}) push body,build_cdm_GEO(d);
  for d(data{'TITLE'}) push body,build_cdm_TITLE(d);
  for d(data{'ROLE'}) push body,build_cdm_ROLE(d);
  for d(data{'LOGO'}) push body,build_cdm_LOGO(d);
  for d(data{'AGENT'}) push body,build_cdm_AGENT(d);
  for d(data{'ORG'}) push body,build_cdm_ORG(d);
  for d(data{'CATEGORIES'}) push body,build_cdm_CATEGORIES(d);
  for d(data{'NOTE'}) push body,build_cdm_NOTE(d);
  for d(data{'PRODID'}) push body,build_cdm_PRODID(d);
  for d(data{'REV'}) push body,build_cdm_REV(d);
  for d(data{'SORT_STRING'}) push body,build_cdm_SORT_STRING(d);
  for d(data{'SOUND'}) push body,build_cdm_SOUND(d);
  for d(data{'UID'}) push body,build_cdm_UID(d);
  for d(data{'URL'}) push body,build_cdm_URL(d);
  for d(data{'CLASS'}) push body,build_cdm_CLASS(d);
  for d(data{'KEY'}) push body,build_cdm_KEY(d);
  for d(data{'DESC'}) push body,build_cdm_DESC(d);
  for d(data{'PHYSICALACCESS'}) push body,build_cdm_PHYSICALACCESS(d);
  for d(data{'CALURI'}) push body,build_cdm_CALURI(d);
  for d(data{'CAPURI'}) push body,build_cdm_CAPURI(d);
  for d(data{'CALADRURI'}) push body,build_cdm_CALADRURI(d);
  for d(data{'FBURL'}) push body,build_cdm_FBURL(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cdm:vCard', attr, body);
}


/* EOF -- c/zx-cdm.ds */
