/* c/zx-xa.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_xa_Action(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ActionMatch', i); ++i) {
    h =  hash [];
    parse_xa_ActionMatch(h, tag);
    push data{'ActionMatch'}, h;
  }

}

function build_xa_Action(data) {
  attr = [];
  body = [];

  for d(data{'ActionMatch'}) push body,build_xa_ActionMatch(d);

  return TAG('xa:Action', attr, body);
}




function parse_xa_ActionAttributeDesignator(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MustBePresent', data.MustBePresent);


}

function build_xa_ActionAttributeDesignator(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MustBePresent', data.MustBePresent);


  return TAG('xa:ActionAttributeDesignator', attr, body);
}




function parse_xa_ActionMatch(data, x) {
  POPATTR(x[1], 'MatchId', data.MatchId);

  tag = find_xml_local(x[2], 'AttributeValue', 1);
  h =  hash [];
  parse_xa_AttributeValue(h, aux1);
  data{'AttributeValue'} = h;
  tag = find_xml_local(x[2], 'ActionAttributeDesignator', 1);
  h =  hash [];
  parse_xa_ActionAttributeDesignator(h, aux1);
  data{'ActionAttributeDesignator'} = h;
  tag = find_xml_local(x[2], 'AttributeSelector', 1);
  h =  hash [];
  parse_xa_AttributeSelector(h, aux1);
  data{'AttributeSelector'} = h;

}

function build_xa_ActionMatch(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'MatchId', data.MatchId);

  push body, build_xa_AttributeValue(data{'AttributeValue'});
  push body, build_xa_ActionAttributeDesignator(data{'ActionAttributeDesignator'});
  push body, build_xa_AttributeSelector(data{'AttributeSelector'});

  return TAG('xa:ActionMatch', attr, body);
}




function parse_xa_Actions(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_xa_Action(h, tag);
    push data{'Action'}, h;
  }

}

function build_xa_Actions(data) {
  attr = [];
  body = [];

  for d(data{'Action'}) push body,build_xa_Action(d);

  return TAG('xa:Actions', attr, body);
}




function parse_xa_Apply(data, x) {
  POPATTR(x[1], 'FunctionId', data.FunctionId);

  for (i=1; tag = find_xml_local(x[2], 'Expression', i); ++i)
    push data{'Expression'}, tag[2];

}

function build_xa_Apply(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'FunctionId', data.FunctionId);

  for d(data{'Expression'})PUSHTAG_RAW(body,'Expression',d);

  return TAG('xa:Apply', attr, body);
}




function parse_xa_AttributeAssignment(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);


}

function build_xa_AttributeAssignment(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);


  return TAG('xa:AttributeAssignment', attr, body);
}




function parse_xa_AttributeSelector(data, x) {
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'MustBePresent', data.MustBePresent);
  POPATTR(x[1], 'RequestContextPath', data.RequestContextPath);


}

function build_xa_AttributeSelector(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'MustBePresent', data.MustBePresent);
  PUSHATTR(attr, 'RequestContextPath', data.RequestContextPath);


  return TAG('xa:AttributeSelector', attr, body);
}




function parse_xa_AttributeValue(data, x) {
  POPATTR(x[1], 'DataType', data.DataType);


}

function build_xa_AttributeValue(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'DataType', data.DataType);


  return TAG('xa:AttributeValue', attr, body);
}




function parse_xa_CombinerParameter(data, x) {
  POPATTR(x[1], 'ParameterName', data.ParameterName);

  tag = find_xml_local(x[2], 'AttributeValue', 1);
  h =  hash [];
  parse_xa_AttributeValue(h, aux1);
  data{'AttributeValue'} = h;

}

function build_xa_CombinerParameter(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ParameterName', data.ParameterName);

  push body, build_xa_AttributeValue(data{'AttributeValue'});

  return TAG('xa:CombinerParameter', attr, body);
}




function parse_xa_CombinerParameters(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'CombinerParameter', i); ++i) {
    h =  hash [];
    parse_xa_CombinerParameter(h, tag);
    push data{'CombinerParameter'}, h;
  }

}

function build_xa_CombinerParameters(data) {
  attr = [];
  body = [];

  for d(data{'CombinerParameter'}) push body,build_xa_CombinerParameter(d);

  return TAG('xa:CombinerParameters', attr, body);
}




function parse_xa_Condition(data, x) {

  POPTAG_RAW(x[2],  'Expression', data.Expression);

}

function build_xa_Condition(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'Expression', data.Expression);

  return TAG('xa:Condition', attr, body);
}




function parse_xa_Environment(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'EnvironmentMatch', i); ++i) {
    h =  hash [];
    parse_xa_EnvironmentMatch(h, tag);
    push data{'EnvironmentMatch'}, h;
  }

}

function build_xa_Environment(data) {
  attr = [];
  body = [];

  for d(data{'EnvironmentMatch'}) push body,build_xa_EnvironmentMatch(d);

  return TAG('xa:Environment', attr, body);
}




function parse_xa_EnvironmentAttributeDesignator(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MustBePresent', data.MustBePresent);


}

function build_xa_EnvironmentAttributeDesignator(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MustBePresent', data.MustBePresent);


  return TAG('xa:EnvironmentAttributeDesignator', attr, body);
}




function parse_xa_EnvironmentMatch(data, x) {
  POPATTR(x[1], 'MatchId', data.MatchId);

  tag = find_xml_local(x[2], 'AttributeValue', 1);
  h =  hash [];
  parse_xa_AttributeValue(h, aux1);
  data{'AttributeValue'} = h;
  tag = find_xml_local(x[2], 'EnvironmentAttributeDesignator', 1);
  h =  hash [];
  parse_xa_EnvironmentAttributeDesignator(h, aux1);
  data{'EnvironmentAttributeDesignator'} = h;
  tag = find_xml_local(x[2], 'AttributeSelector', 1);
  h =  hash [];
  parse_xa_AttributeSelector(h, aux1);
  data{'AttributeSelector'} = h;

}

function build_xa_EnvironmentMatch(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'MatchId', data.MatchId);

  push body, build_xa_AttributeValue(data{'AttributeValue'});
  push body, build_xa_EnvironmentAttributeDesignator(data{'EnvironmentAttributeDesignator'});
  push body, build_xa_AttributeSelector(data{'AttributeSelector'});

  return TAG('xa:EnvironmentMatch', attr, body);
}




function parse_xa_Environments(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Environment', i); ++i) {
    h =  hash [];
    parse_xa_Environment(h, tag);
    push data{'Environment'}, h;
  }

}

function build_xa_Environments(data) {
  attr = [];
  body = [];

  for d(data{'Environment'}) push body,build_xa_Environment(d);

  return TAG('xa:Environments', attr, body);
}




function parse_xa_Function(data, x) {
  POPATTR(x[1], 'FunctionId', data.FunctionId);


}

function build_xa_Function(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'FunctionId', data.FunctionId);


  return TAG('xa:Function', attr, body);
}




function parse_xa_Obligation(data, x) {
  POPATTR(x[1], 'FulfillOn', data.FulfillOn);
  POPATTR(x[1], 'ObligationId', data.ObligationId);

  for (i=1; tag = find_xml_local(x[2], 'AttributeAssignment', i); ++i) {
    h =  hash [];
    parse_xa_AttributeAssignment(h, tag);
    push data{'AttributeAssignment'}, h;
  }

}

function build_xa_Obligation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'FulfillOn', data.FulfillOn);
  PUSHATTR(attr, 'ObligationId', data.ObligationId);

  for d(data{'AttributeAssignment'}) push body,build_xa_AttributeAssignment(d);

  return TAG('xa:Obligation', attr, body);
}




function parse_xa_Obligations(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Obligation', i); ++i) {
    h =  hash [];
    parse_xa_Obligation(h, tag);
    push data{'Obligation'}, h;
  }

}

function build_xa_Obligations(data) {
  attr = [];
  body = [];

  for d(data{'Obligation'}) push body,build_xa_Obligation(d);

  return TAG('xa:Obligations', attr, body);
}




function parse_xa_Policy(data, x) {
  POPATTR(x[1], 'PolicyId', data.PolicyId);
  POPATTR(x[1], 'RuleCombiningAlgId', data.RuleCombiningAlgId);
  POPATTR(x[1], 'Version', data.Version);

  POPTAG_RAW(x[2],  'Description', data.Description);
  tag = find_xml_local(x[2], 'PolicyDefaults', 1);
  h =  hash [];
  parse_xa_PolicyDefaults(h, aux1);
  data{'PolicyDefaults'} = h;
  tag = find_xml_local(x[2], 'Target', 1);
  h =  hash [];
  parse_xa_Target(h, aux1);
  data{'Target'} = h;
  tag = find_xml_local(x[2], 'CombinerParameters', 1);
  h =  hash [];
  parse_xa_CombinerParameters(h, aux1);
  data{'CombinerParameters'} = h;
  tag = find_xml_local(x[2], 'RuleCombinerParameters', 1);
  h =  hash [];
  parse_xa_RuleCombinerParameters(h, aux1);
  data{'RuleCombinerParameters'} = h;
  tag = find_xml_local(x[2], 'VariableDefinition', 1);
  h =  hash [];
  parse_xa_VariableDefinition(h, aux1);
  data{'VariableDefinition'} = h;
  tag = find_xml_local(x[2], 'Rule', 1);
  h =  hash [];
  parse_xa_Rule(h, aux1);
  data{'Rule'} = h;
  tag = find_xml_local(x[2], 'Obligations', 1);
  h =  hash [];
  parse_xa_Obligations(h, aux1);
  data{'Obligations'} = h;

}

function build_xa_Policy(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'PolicyId', data.PolicyId);
  PUSHATTR(attr, 'RuleCombiningAlgId', data.RuleCombiningAlgId);
  PUSHATTR(attr, 'Version', data.Version);

  PUSHTAG_RAW(body, 'Description', data.Description);
  push body, build_xa_PolicyDefaults(data{'PolicyDefaults'});
  push body, build_xa_Target(data{'Target'});
  push body, build_xa_CombinerParameters(data{'CombinerParameters'});
  push body, build_xa_RuleCombinerParameters(data{'RuleCombinerParameters'});
  push body, build_xa_VariableDefinition(data{'VariableDefinition'});
  push body, build_xa_Rule(data{'Rule'});
  push body, build_xa_Obligations(data{'Obligations'});

  return TAG('xa:Policy', attr, body);
}




function parse_xa_PolicyCombinerParameters(data, x) {
  POPATTR(x[1], 'PolicyIdRef', data.PolicyIdRef);

  for (i=1; tag = find_xml_local(x[2], 'CombinerParameter', i); ++i) {
    h =  hash [];
    parse_xa_CombinerParameter(h, tag);
    push data{'CombinerParameter'}, h;
  }

}

function build_xa_PolicyCombinerParameters(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'PolicyIdRef', data.PolicyIdRef);

  for d(data{'CombinerParameter'}) push body,build_xa_CombinerParameter(d);

  return TAG('xa:PolicyCombinerParameters', attr, body);
}




function parse_xa_PolicyDefaults(data, x) {

  POPTAG_RAW(x[2],  'XPathVersion', data.XPathVersion);

}

function build_xa_PolicyDefaults(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'XPathVersion', data.XPathVersion);

  return TAG('xa:PolicyDefaults', attr, body);
}




function parse_xa_PolicyIdReference(data, x) {
  POPATTR(x[1], 'EarliestVersion', data.EarliestVersion);
  POPATTR(x[1], 'LatestVersion', data.LatestVersion);
  POPATTR(x[1], 'Version', data.Version);


}

function build_xa_PolicyIdReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'EarliestVersion', data.EarliestVersion);
  PUSHATTR(attr, 'LatestVersion', data.LatestVersion);
  PUSHATTR(attr, 'Version', data.Version);


  return TAG('xa:PolicyIdReference', attr, body);
}




function parse_xa_PolicySet(data, x) {
  POPATTR(x[1], 'PolicyCombiningAlgId', data.PolicyCombiningAlgId);
  POPATTR(x[1], 'PolicySetId', data.PolicySetId);
  POPATTR(x[1], 'Version', data.Version);

  POPTAG_RAW(x[2],  'Description', data.Description);
  tag = find_xml_local(x[2], 'PolicySetDefaults', 1);
  h =  hash [];
  parse_xa_PolicySetDefaults(h, aux1);
  data{'PolicySetDefaults'} = h;
  tag = find_xml_local(x[2], 'Target', 1);
  h =  hash [];
  parse_xa_Target(h, aux1);
  data{'Target'} = h;
  tag = find_xml_local(x[2], 'PolicySet', 1);
  h =  hash [];
  parse_xa_PolicySet(h, aux1);
  data{'PolicySet'} = h;
  tag = find_xml_local(x[2], 'Policy', 1);
  h =  hash [];
  parse_xa_Policy(h, aux1);
  data{'Policy'} = h;
  tag = find_xml_local(x[2], 'PolicySetIdReference', 1);
  h =  hash [];
  parse_xa_PolicySetIdReference(h, aux1);
  data{'PolicySetIdReference'} = h;
  tag = find_xml_local(x[2], 'PolicyIdReference', 1);
  h =  hash [];
  parse_xa_PolicyIdReference(h, aux1);
  data{'PolicyIdReference'} = h;
  tag = find_xml_local(x[2], 'CombinerParameters', 1);
  h =  hash [];
  parse_xa_CombinerParameters(h, aux1);
  data{'CombinerParameters'} = h;
  tag = find_xml_local(x[2], 'PolicyCombinerParameters', 1);
  h =  hash [];
  parse_xa_PolicyCombinerParameters(h, aux1);
  data{'PolicyCombinerParameters'} = h;
  tag = find_xml_local(x[2], 'PolicySetCombinerParameters', 1);
  h =  hash [];
  parse_xa_PolicySetCombinerParameters(h, aux1);
  data{'PolicySetCombinerParameters'} = h;
  tag = find_xml_local(x[2], 'Obligations', 1);
  h =  hash [];
  parse_xa_Obligations(h, aux1);
  data{'Obligations'} = h;

}

function build_xa_PolicySet(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'PolicyCombiningAlgId', data.PolicyCombiningAlgId);
  PUSHATTR(attr, 'PolicySetId', data.PolicySetId);
  PUSHATTR(attr, 'Version', data.Version);

  PUSHTAG_RAW(body, 'Description', data.Description);
  push body, build_xa_PolicySetDefaults(data{'PolicySetDefaults'});
  push body, build_xa_Target(data{'Target'});
  push body, build_xa_PolicySet(data{'PolicySet'});
  push body, build_xa_Policy(data{'Policy'});
  push body, build_xa_PolicySetIdReference(data{'PolicySetIdReference'});
  push body, build_xa_PolicyIdReference(data{'PolicyIdReference'});
  push body, build_xa_CombinerParameters(data{'CombinerParameters'});
  push body, build_xa_PolicyCombinerParameters(data{'PolicyCombinerParameters'});
  push body, build_xa_PolicySetCombinerParameters(data{'PolicySetCombinerParameters'});
  push body, build_xa_Obligations(data{'Obligations'});

  return TAG('xa:PolicySet', attr, body);
}




function parse_xa_PolicySetCombinerParameters(data, x) {
  POPATTR(x[1], 'PolicySetIdRef', data.PolicySetIdRef);

  for (i=1; tag = find_xml_local(x[2], 'CombinerParameter', i); ++i) {
    h =  hash [];
    parse_xa_CombinerParameter(h, tag);
    push data{'CombinerParameter'}, h;
  }

}

function build_xa_PolicySetCombinerParameters(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'PolicySetIdRef', data.PolicySetIdRef);

  for d(data{'CombinerParameter'}) push body,build_xa_CombinerParameter(d);

  return TAG('xa:PolicySetCombinerParameters', attr, body);
}




function parse_xa_PolicySetDefaults(data, x) {

  POPTAG_RAW(x[2],  'XPathVersion', data.XPathVersion);

}

function build_xa_PolicySetDefaults(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'XPathVersion', data.XPathVersion);

  return TAG('xa:PolicySetDefaults', attr, body);
}




function parse_xa_PolicySetIdReference(data, x) {
  POPATTR(x[1], 'EarliestVersion', data.EarliestVersion);
  POPATTR(x[1], 'LatestVersion', data.LatestVersion);
  POPATTR(x[1], 'Version', data.Version);


}

function build_xa_PolicySetIdReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'EarliestVersion', data.EarliestVersion);
  PUSHATTR(attr, 'LatestVersion', data.LatestVersion);
  PUSHATTR(attr, 'Version', data.Version);


  return TAG('xa:PolicySetIdReference', attr, body);
}




function parse_xa_Resource(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ResourceMatch', i); ++i) {
    h =  hash [];
    parse_xa_ResourceMatch(h, tag);
    push data{'ResourceMatch'}, h;
  }

}

function build_xa_Resource(data) {
  attr = [];
  body = [];

  for d(data{'ResourceMatch'}) push body,build_xa_ResourceMatch(d);

  return TAG('xa:Resource', attr, body);
}




function parse_xa_ResourceAttributeDesignator(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MustBePresent', data.MustBePresent);


}

function build_xa_ResourceAttributeDesignator(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MustBePresent', data.MustBePresent);


  return TAG('xa:ResourceAttributeDesignator', attr, body);
}




function parse_xa_ResourceMatch(data, x) {
  POPATTR(x[1], 'MatchId', data.MatchId);

  tag = find_xml_local(x[2], 'AttributeValue', 1);
  h =  hash [];
  parse_xa_AttributeValue(h, aux1);
  data{'AttributeValue'} = h;
  tag = find_xml_local(x[2], 'ResourceAttributeDesignator', 1);
  h =  hash [];
  parse_xa_ResourceAttributeDesignator(h, aux1);
  data{'ResourceAttributeDesignator'} = h;
  tag = find_xml_local(x[2], 'AttributeSelector', 1);
  h =  hash [];
  parse_xa_AttributeSelector(h, aux1);
  data{'AttributeSelector'} = h;

}

function build_xa_ResourceMatch(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'MatchId', data.MatchId);

  push body, build_xa_AttributeValue(data{'AttributeValue'});
  push body, build_xa_ResourceAttributeDesignator(data{'ResourceAttributeDesignator'});
  push body, build_xa_AttributeSelector(data{'AttributeSelector'});

  return TAG('xa:ResourceMatch', attr, body);
}




function parse_xa_Resources(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Resource', i); ++i) {
    h =  hash [];
    parse_xa_Resource(h, tag);
    push data{'Resource'}, h;
  }

}

function build_xa_Resources(data) {
  attr = [];
  body = [];

  for d(data{'Resource'}) push body,build_xa_Resource(d);

  return TAG('xa:Resources', attr, body);
}




function parse_xa_Rule(data, x) {
  POPATTR(x[1], 'Effect', data.Effect);
  POPATTR(x[1], 'RuleId', data.RuleId);

  POPTAG_RAW(x[2],  'Description', data.Description);
  tag = find_xml_local(x[2], 'Target', 1);
  h =  hash [];
  parse_xa_Target(h, aux1);
  data{'Target'} = h;
  tag = find_xml_local(x[2], 'Condition', 1);
  h =  hash [];
  parse_xa_Condition(h, aux1);
  data{'Condition'} = h;

}

function build_xa_Rule(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Effect', data.Effect);
  PUSHATTR(attr, 'RuleId', data.RuleId);

  PUSHTAG_RAW(body, 'Description', data.Description);
  push body, build_xa_Target(data{'Target'});
  push body, build_xa_Condition(data{'Condition'});

  return TAG('xa:Rule', attr, body);
}




function parse_xa_RuleCombinerParameters(data, x) {
  POPATTR(x[1], 'RuleIdRef', data.RuleIdRef);

  for (i=1; tag = find_xml_local(x[2], 'CombinerParameter', i); ++i) {
    h =  hash [];
    parse_xa_CombinerParameter(h, tag);
    push data{'CombinerParameter'}, h;
  }

}

function build_xa_RuleCombinerParameters(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'RuleIdRef', data.RuleIdRef);

  for d(data{'CombinerParameter'}) push body,build_xa_CombinerParameter(d);

  return TAG('xa:RuleCombinerParameters', attr, body);
}




function parse_xa_Subject(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SubjectMatch', i); ++i) {
    h =  hash [];
    parse_xa_SubjectMatch(h, tag);
    push data{'SubjectMatch'}, h;
  }

}

function build_xa_Subject(data) {
  attr = [];
  body = [];

  for d(data{'SubjectMatch'}) push body,build_xa_SubjectMatch(d);

  return TAG('xa:Subject', attr, body);
}




function parse_xa_SubjectAttributeDesignator(data, x) {
  POPATTR(x[1], 'AttributeId', data.AttributeId);
  POPATTR(x[1], 'DataType', data.DataType);
  POPATTR(x[1], 'Issuer', data.Issuer);
  POPATTR(x[1], 'MustBePresent', data.MustBePresent);
  POPATTR(x[1], 'SubjectCategory', data.SubjectCategory);


}

function build_xa_SubjectAttributeDesignator(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AttributeId', data.AttributeId);
  PUSHATTR(attr, 'DataType', data.DataType);
  PUSHATTR(attr, 'Issuer', data.Issuer);
  PUSHATTR(attr, 'MustBePresent', data.MustBePresent);
  PUSHATTR(attr, 'SubjectCategory', data.SubjectCategory);


  return TAG('xa:SubjectAttributeDesignator', attr, body);
}




function parse_xa_SubjectMatch(data, x) {
  POPATTR(x[1], 'MatchId', data.MatchId);

  tag = find_xml_local(x[2], 'AttributeValue', 1);
  h =  hash [];
  parse_xa_AttributeValue(h, aux1);
  data{'AttributeValue'} = h;
  tag = find_xml_local(x[2], 'SubjectAttributeDesignator', 1);
  h =  hash [];
  parse_xa_SubjectAttributeDesignator(h, aux1);
  data{'SubjectAttributeDesignator'} = h;
  tag = find_xml_local(x[2], 'AttributeSelector', 1);
  h =  hash [];
  parse_xa_AttributeSelector(h, aux1);
  data{'AttributeSelector'} = h;

}

function build_xa_SubjectMatch(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'MatchId', data.MatchId);

  push body, build_xa_AttributeValue(data{'AttributeValue'});
  push body, build_xa_SubjectAttributeDesignator(data{'SubjectAttributeDesignator'});
  push body, build_xa_AttributeSelector(data{'AttributeSelector'});

  return TAG('xa:SubjectMatch', attr, body);
}




function parse_xa_Subjects(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Subject', i); ++i) {
    h =  hash [];
    parse_xa_Subject(h, tag);
    push data{'Subject'}, h;
  }

}

function build_xa_Subjects(data) {
  attr = [];
  body = [];

  for d(data{'Subject'}) push body,build_xa_Subject(d);

  return TAG('xa:Subjects', attr, body);
}




function parse_xa_Target(data, x) {

  tag = find_xml_local(x[2], 'Subjects', 1);
  h =  hash [];
  parse_xa_Subjects(h, aux1);
  data{'Subjects'} = h;
  tag = find_xml_local(x[2], 'Resources', 1);
  h =  hash [];
  parse_xa_Resources(h, aux1);
  data{'Resources'} = h;
  tag = find_xml_local(x[2], 'Actions', 1);
  h =  hash [];
  parse_xa_Actions(h, aux1);
  data{'Actions'} = h;
  tag = find_xml_local(x[2], 'Environments', 1);
  h =  hash [];
  parse_xa_Environments(h, aux1);
  data{'Environments'} = h;

}

function build_xa_Target(data) {
  attr = [];
  body = [];

  push body, build_xa_Subjects(data{'Subjects'});
  push body, build_xa_Resources(data{'Resources'});
  push body, build_xa_Actions(data{'Actions'});
  push body, build_xa_Environments(data{'Environments'});

  return TAG('xa:Target', attr, body);
}




function parse_xa_VariableDefinition(data, x) {
  POPATTR(x[1], 'VariableId', data.VariableId);

  POPTAG_RAW(x[2],  'Expression', data.Expression);

}

function build_xa_VariableDefinition(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'VariableId', data.VariableId);

  PUSHTAG_RAW(body, 'Expression', data.Expression);

  return TAG('xa:VariableDefinition', attr, body);
}




function parse_xa_VariableReference(data, x) {
  POPATTR(x[1], 'VariableId', data.VariableId);


}

function build_xa_VariableReference(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'VariableId', data.VariableId);


  return TAG('xa:VariableReference', attr, body);
}


/* EOF -- c/zx-xa.ds */
