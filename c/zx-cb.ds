/* c/zx-cb.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_cb_By(data, x) {
  POPATTR(x[1], 'cb_sortAlg', data.cb_sortAlg);
  POPATTR(x[1], 'cb_sortWeight', data.cb_sortWeight);


}

function build_cb_By(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_sortAlg', data.cb_sortAlg);
  PUSHATTR(attr, 'cb_sortWeight', data.cb_sortWeight);


  return TAG('cb:By', attr, body);
}




function parse_cb_Create(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_cb_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_cb_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_cb_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'CreateItem', i); ++i) {
    h =  hash [];
    parse_cb_CreateItem(h, tag);
    push data{'CreateItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_cb_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Create(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_ResourceID(data{'ResourceID'});
  push body, build_cb_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_cb_Subscription(d);
  for d(data{'CreateItem'}) push body,build_cb_CreateItem(d);
  for d(data{'ItemSelection'}) push body,build_cb_ItemSelection(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Create', attr, body);
}




function parse_cb_CreateItem(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'objectType', data.objectType);

  tag = find_xml_local(x[2], 'NewData', 1);
  h =  hash [];
  parse_cb_NewData(h, aux1);
  data{'NewData'} = h;

}

function build_cb_CreateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'objectType', data.objectType);

  push body, build_cb_NewData(data{'NewData'});

  return TAG('cb:CreateItem', attr, body);
}




function parse_cb_CreateResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_cb_ItemData(h, tag);
    push data{'ItemData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_CreateResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_cb_Status(data{'Status'});
  for d(data{'ItemData'}) push body,build_cb_ItemData(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:CreateResponse', attr, body);
}




function parse_cb_Credential(data, x) {
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);

  tag = find_xml_local(x[2], 'Assertion', 1);
  h =  hash [];
  parse_sa_Assertion(h, aux1);
  data{'Assertion'} = h;

}

function build_cb_Credential(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);

  push body, build_sa_Assertion(data{'Assertion'});

  return TAG('cb:Credential', attr, body);
}




function parse_cb_Data(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'nextOffset', data.nextOffset);
  POPATTR(x[1], 'notSorted', data.notSorted);
  POPATTR(x[1], 'remaining', data.remaining);
  POPATTR(x[1], 'setID', data.setID);
  POPATTR(x[1], 'cb_changeFormat', data.cb_changeFormat);

  for (i=1; tag = find_xml_local(x[2], 'Card', i); ++i)
    push data{'Card'}, tag[2];

}

function build_cb_Data(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'nextOffset', data.nextOffset);
  PUSHATTR(attr, 'notSorted', data.notSorted);
  PUSHATTR(attr, 'remaining', data.remaining);
  PUSHATTR(attr, 'setID', data.setID);
  PUSHATTR(attr, 'cb_changeFormat', data.cb_changeFormat);

  for d(data{'Card'})PUSHTAG_RAW(body,'Card',d);

  return TAG('cb:Data', attr, body);
}




function parse_cb_Delete(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_cb_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_cb_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'DeleteItem', i); ++i) {
    h =  hash [];
    parse_cb_DeleteItem(h, tag);
    push data{'DeleteItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Delete(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_ResourceID(data{'ResourceID'});
  push body, build_cb_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'DeleteItem'}) push body,build_cb_DeleteItem(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Delete', attr, body);
}




function parse_cb_DeleteItem(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'notChangedSince', data.notChangedSince);
  POPATTR(x[1], 'objectType', data.objectType);
  POPATTR(x[1], 'predefined', data.predefined);

  POPTAG_RAW(x[2],  'Select', data.Select);

}

function build_cb_DeleteItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'notChangedSince', data.notChangedSince);
  PUSHATTR(attr, 'objectType', data.objectType);
  PUSHATTR(attr, 'predefined', data.predefined);

  PUSHTAG_RAW(body, 'Select', data.Select);

  return TAG('cb:DeleteItem', attr, body);
}




function parse_cb_DeleteResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_DeleteResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:DeleteResponse', attr, body);
}




function parse_cb_EncryptedResourceID(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  tag = find_xml_local(x[2], 'EncryptedKey', 1);
  h =  hash [];
  parse_xenc_EncryptedKey(h, aux1);
  data{'EncryptedKey'} = h;

}

function build_cb_EncryptedResourceID(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  push body, build_xenc_EncryptedKey(data{'EncryptedKey'});

  return TAG('cb:EncryptedResourceID', attr, body);
}




function parse_cb_Extension(data, x) {


}

function build_cb_Extension(data) {
  attr = [];
  body = [];


  return TAG('cb:Extension', attr, body);
}




function parse_cb_ItemData(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'notSorted', data.notSorted);
  POPATTR(x[1], 'cb_changeFormat', data.cb_changeFormat);

  for (i=1; tag = find_xml_local(x[2], 'Card', i); ++i)
    push data{'Card'}, tag[2];

}

function build_cb_ItemData(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'notSorted', data.notSorted);
  PUSHATTR(attr, 'cb_changeFormat', data.cb_changeFormat);

  for d(data{'Card'})PUSHTAG_RAW(body,'Card',d);

  return TAG('cb:ItemData', attr, body);
}




function parse_cb_ItemSelection(data, x) {
  POPATTR(x[1], 'cb_format', data.cb_format);


}

function build_cb_ItemSelection(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'cb_format', data.cb_format);


  return TAG('cb:ItemSelection', attr, body);
}




function parse_cb_Modification(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemID', data.itemID);
  POPATTR(x[1], 'notChangedSince', data.notChangedSince);
  POPATTR(x[1], 'objectType', data.objectType);
  POPATTR(x[1], 'overrideAllowed', data.overrideAllowed);

  POPTAG_RAW(x[2],  'Select', data.Select);
  tag = find_xml_local(x[2], 'NewData', 1);
  h =  hash [];
  parse_cb_NewData(h, aux1);
  data{'NewData'} = h;

}

function build_cb_Modification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemID', data.itemID);
  PUSHATTR(attr, 'notChangedSince', data.notChangedSince);
  PUSHATTR(attr, 'objectType', data.objectType);
  PUSHATTR(attr, 'overrideAllowed', data.overrideAllowed);

  PUSHTAG_RAW(body, 'Select', data.Select);
  push body, build_cb_NewData(data{'NewData'});

  return TAG('cb:Modification', attr, body);
}




function parse_cb_Modify(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_cb_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_cb_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_cb_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Modification', i); ++i) {
    h =  hash [];
    parse_cb_Modification(h, tag);
    push data{'Modification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_cb_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Modify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_ResourceID(data{'ResourceID'});
  push body, build_cb_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_cb_Subscription(d);
  for d(data{'Modification'}) push body,build_cb_Modification(d);
  for d(data{'ItemSelection'}) push body,build_cb_ItemSelection(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Modify', attr, body);
}




function parse_cb_ModifyResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_cb_ItemData(h, tag);
    push data{'ItemData'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_ModifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_cb_Status(data{'Status'});
  for d(data{'ItemData'}) push body,build_cb_ItemData(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:ModifyResponse', attr, body);
}




function parse_cb_NewData(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Card', i); ++i)
    push data{'Card'}, tag[2];

}

function build_cb_NewData(data) {
  attr = [];
  body = [];

  for d(data{'Card'})PUSHTAG_RAW(body,'Card',d);

  return TAG('cb:NewData', attr, body);
}




function parse_cb_Notification(data, x) {
  POPATTR(x[1], 'endReason', data.endReason);
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'ItemData', i); ++i) {
    h =  hash [];
    parse_cb_ItemData(h, tag);
    push data{'ItemData'}, h;
  }

}

function build_cb_Notification(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'endReason', data.endReason);
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'ItemData'}) push body,build_cb_ItemData(d);

  return TAG('cb:Notification', attr, body);
}




function parse_cb_Notify(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  for (i=1; tag = find_xml_local(x[2], 'Notification', i); ++i) {
    h =  hash [];
    parse_cb_Notification(h, tag);
    push data{'Notification'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Notify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  for d(data{'Notification'}) push body,build_cb_Notification(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Notify', attr, body);
}




function parse_cb_NotifyAdminTo(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Credential', i); ++i) {
    h =  hash [];
    parse_cb_Credential(h, tag);
    push data{'Credential'}, h;
  }
  POPTAG_RAW(x[2],  'Endpoint', data.Endpoint);

}

function build_cb_NotifyAdminTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Credential'}) push body,build_cb_Credential(d);
  PUSHTAG_RAW(body, 'Endpoint', data.Endpoint);

  return TAG('cb:NotifyAdminTo', attr, body);
}




function parse_cb_NotifyResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_NotifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_Status(data{'Status'});
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:NotifyResponse', attr, body);
}




function parse_cb_NotifyTo(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Credential', i); ++i) {
    h =  hash [];
    parse_cb_Credential(h, tag);
    push data{'Credential'}, h;
  }
  POPTAG_RAW(x[2],  'Endpoint', data.Endpoint);

}

function build_cb_NotifyTo(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'Credential'}) push body,build_cb_Credential(d);
  PUSHTAG_RAW(body, 'Endpoint', data.Endpoint);

  return TAG('cb:NotifyTo', attr, body);
}




function parse_cb_Query(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_cb_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_cb_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Subscription', i); ++i) {
    h =  hash [];
    parse_cb_Subscription(h, tag);
    push data{'Subscription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'QueryItem', i); ++i) {
    h =  hash [];
    parse_cb_QueryItem(h, tag);
    push data{'QueryItem'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Query(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_ResourceID(data{'ResourceID'});
  push body, build_cb_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'Subscription'}) push body,build_cb_Subscription(d);
  for d(data{'QueryItem'}) push body,build_cb_QueryItem(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Query', attr, body);
}




function parse_cb_QueryItem(data, x) {
  POPATTR(x[1], 'count', data.count);
  POPATTR(x[1], 'offset', data.offset);
  POPATTR(x[1], 'setID', data.setID);
  POPATTR(x[1], 'setReq', data.setReq);
  POPATTR(x[1], 'cb_format', data.cb_format);


}

function build_cb_QueryItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'count', data.count);
  PUSHATTR(attr, 'offset', data.offset);
  PUSHATTR(attr, 'setID', data.setID);
  PUSHATTR(attr, 'setReq', data.setReq);
  PUSHATTR(attr, 'cb_format', data.cb_format);


  return TAG('cb:QueryItem', attr, body);
}




function parse_cb_QueryResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'itemIDRef', data.itemIDRef);
  POPATTR(x[1], 'timeStamp', data.timeStamp);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'Data', i); ++i) {
    h =  hash [];
    parse_cb_Data(h, tag);
    push data{'Data'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_QueryResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'itemIDRef', data.itemIDRef);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);

  push body, build_cb_Status(data{'Status'});
  for d(data{'Data'}) push body,build_cb_Data(d);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:QueryResponse', attr, body);
}




function parse_cb_RefItem(data, x) {
  POPATTR(x[1], 'ItemIDRef', data.ItemIDRef);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);


}

function build_cb_RefItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ItemIDRef', data.ItemIDRef);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);


  return TAG('cb:RefItem', attr, body);
}




function parse_cb_ReportUsage(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_cb_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_cb_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  POPTAG_RAW(x[2],  'CARDID', data.CARDID);
  for (i=1; tag = find_xml_local(x[2], 'UsageType', i); ++i) {
    h =  hash [];
    parse_cb_UsageType(h, tag);
    push data{'UsageType'}, h;
  }

}

function build_cb_ReportUsage(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_ResourceID(data{'ResourceID'});
  push body, build_cb_EncryptedResourceID(data{'EncryptedResourceID'});
  PUSHTAG_RAW(body, 'CARDID', data.CARDID);
  for d(data{'UsageType'}) push body,build_cb_UsageType(d);

  return TAG('cb:ReportUsage', attr, body);
}




function parse_cb_ReportUsageResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_cb_Status(h, aux1);
  data{'Status'} = h;

}

function build_cb_ReportUsageResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_cb_Status(data{'Status'});

  return TAG('cb:ReportUsageResponse', attr, body);
}




function parse_cb_ResourceID(data, x) {
  POPATTR(x[1], 'id', data.id);


}

function build_cb_ResourceID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);


  return TAG('cb:ResourceID', attr, body);
}




function parse_cb_Status(data, x) {
  POPATTR(x[1], 'code', data.code);
  POPATTR(x[1], 'comment', data.comment);
  POPATTR(x[1], 'ref', data.ref);

  for (i=1; tag = find_xml_local(x[2], 'Status', i); ++i) {
    h =  hash [];
    parse_cb_Status(h, tag);
    push data{'Status'}, h;
  }

}

function build_cb_Status(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'code', data.code);
  PUSHATTR(attr, 'comment', data.comment);
  PUSHATTR(attr, 'ref', data.ref);

  for d(data{'Status'}) push body,build_cb_Status(d);

  return TAG('cb:Status', attr, body);
}




function parse_cb_Subscription(data, x) {
  POPATTR(x[1], 'expires', data.expires);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'includeData', data.includeData);
  POPATTR(x[1], 'starts', data.starts);
  POPATTR(x[1], 'subscriptionID', data.subscriptionID);

  for (i=1; tag = find_xml_local(x[2], 'ItemSelection', i); ++i) {
    h =  hash [];
    parse_cb_ItemSelection(h, tag);
    push data{'ItemSelection'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RefItem', i); ++i) {
    h =  hash [];
    parse_cb_RefItem(h, tag);
    push data{'RefItem'}, h;
  }
  tag = find_xml_local(x[2], 'NotifyTo', 1);
  h =  hash [];
  parse_cb_NotifyTo(h, aux1);
  data{'NotifyTo'} = h;
  tag = find_xml_local(x[2], 'NotifyAdminTo', 1);
  h =  hash [];
  parse_cb_NotifyAdminTo(h, aux1);
  data{'NotifyAdminTo'} = h;
  POPTAG_RAW(x[2],  'Aggregation', data.Aggregation);
  POPTAG_RAW(x[2],  'Trigger', data.Trigger);
  for (i=1; tag = find_xml_local(x[2], 'Extension', i); ++i) {
    h =  hash [];
    parse_cb_Extension(h, tag);
    push data{'Extension'}, h;
  }

}

function build_cb_Subscription(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'expires', data.expires);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'includeData', data.includeData);
  PUSHATTR(attr, 'starts', data.starts);
  PUSHATTR(attr, 'subscriptionID', data.subscriptionID);

  for d(data{'ItemSelection'}) push body,build_cb_ItemSelection(d);
  for d(data{'RefItem'}) push body,build_cb_RefItem(d);
  push body, build_cb_NotifyTo(data{'NotifyTo'});
  push body, build_cb_NotifyAdminTo(data{'NotifyAdminTo'});
  PUSHTAG_RAW(body, 'Aggregation', data.Aggregation);
  PUSHTAG_RAW(body, 'Trigger', data.Trigger);
  for d(data{'Extension'}) push body,build_cb_Extension(d);

  return TAG('cb:Subscription', attr, body);
}




function parse_cb_UsageType(data, x) {
  POPATTR(x[1], 'success', data.success);
  POPATTR(x[1], 'cb_ACC', data.cb_ACC);
  POPATTR(x[1], 'cb_ACCTime', data.cb_ACCTime);
  POPATTR(x[1], 'cb_id', data.cb_id);
  POPATTR(x[1], 'cb_modificationTime', data.cb_modificationTime);
  POPATTR(x[1], 'cb_modifier', data.cb_modifier);


}

function build_cb_UsageType(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'success', data.success);
  PUSHATTR(attr, 'cb_ACC', data.cb_ACC);
  PUSHATTR(attr, 'cb_ACCTime', data.cb_ACCTime);
  PUSHATTR(attr, 'cb_id', data.cb_id);
  PUSHATTR(attr, 'cb_modificationTime', data.cb_modificationTime);
  PUSHATTR(attr, 'cb_modifier', data.cb_modifier);


  return TAG('cb:UsageType', attr, body);
}


/* EOF -- c/zx-cb.ds */
