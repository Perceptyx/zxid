/* c/zx-md.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_md_AdditionalMetadataLocation(data, x) {
  POPATTR(x[1], 'namespace', data.namespace);


}

function build_md_AdditionalMetadataLocation(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'namespace', data.namespace);


  return TAG('md:AdditionalMetadataLocation', attr, body);
}




function parse_md_AffiliationDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'affiliationOwnerID', data.affiliationOwnerID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'AffiliateMember', i); ++i)
    push data{'AffiliateMember'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }

}

function build_md_AffiliationDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'affiliationOwnerID', data.affiliationOwnerID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'AffiliateMember'})PUSHTAG_RAW(body,'AffiliateMember',d);
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);

  return TAG('md:AffiliationDescriptor', attr, body);
}




function parse_md_ArtifactResolutionService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_ArtifactResolutionService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:ArtifactResolutionService', attr, body);
}




function parse_md_AssertionConsumerService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_AssertionConsumerService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:AssertionConsumerService', attr, body);
}




function parse_md_AssertionIDRequestService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_AssertionIDRequestService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:AssertionIDRequestService', attr, body);
}




function parse_md_AttributeAuthorityDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeService', i); ++i) {
    h =  hash [];
    parse_md_AttributeService(h, tag);
    push data{'AttributeService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDRequestService', i); ++i) {
    h =  hash [];
    parse_md_AssertionIDRequestService(h, tag);
    push data{'AssertionIDRequestService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDFormat', i); ++i)
    push data{'NameIDFormat'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AttributeProfile', i); ++i)
    push data{'AttributeProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_sa_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_md_AttributeAuthorityDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'AttributeService'}) push body,build_md_AttributeService(d);
  for d(data{'AssertionIDRequestService'}) push body,build_md_AssertionIDRequestService(d);
  for d(data{'NameIDFormat'})PUSHTAG_RAW(body,'NameIDFormat',d);
  for d(data{'AttributeProfile'})PUSHTAG_RAW(body,'AttributeProfile',d);
  for d(data{'Attribute'}) push body,build_sa_Attribute(d);

  return TAG('md:AttributeAuthorityDescriptor', attr, body);
}




function parse_md_AttributeConsumingService(data, x) {
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);

  for (i=1; tag = find_xml_local(x[2], 'ServiceName', i); ++i) {
    h =  hash [];
    parse_md_ServiceName(h, tag);
    push data{'ServiceName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ServiceDescription', i); ++i) {
    h =  hash [];
    parse_md_ServiceDescription(h, tag);
    push data{'ServiceDescription'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RequestedAttribute', i); ++i) {
    h =  hash [];
    parse_md_RequestedAttribute(h, tag);
    push data{'RequestedAttribute'}, h;
  }

}

function build_md_AttributeConsumingService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);

  for d(data{'ServiceName'}) push body,build_md_ServiceName(d);
  for d(data{'ServiceDescription'}) push body,build_md_ServiceDescription(d);
  for d(data{'RequestedAttribute'}) push body,build_md_RequestedAttribute(d);

  return TAG('md:AttributeConsumingService', attr, body);
}




function parse_md_AttributeService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_AttributeService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:AttributeService', attr, body);
}




function parse_md_AuthnAuthorityDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthnQueryService', i); ++i) {
    h =  hash [];
    parse_md_AuthnQueryService(h, tag);
    push data{'AuthnQueryService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDRequestService', i); ++i) {
    h =  hash [];
    parse_md_AssertionIDRequestService(h, tag);
    push data{'AssertionIDRequestService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDFormat', i); ++i)
    push data{'NameIDFormat'}, tag[2];

}

function build_md_AuthnAuthorityDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'AuthnQueryService'}) push body,build_md_AuthnQueryService(d);
  for d(data{'AssertionIDRequestService'}) push body,build_md_AssertionIDRequestService(d);
  for d(data{'NameIDFormat'})PUSHTAG_RAW(body,'NameIDFormat',d);

  return TAG('md:AuthnAuthorityDescriptor', attr, body);
}




function parse_md_AuthnQueryService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_AuthnQueryService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:AuthnQueryService', attr, body);
}




function parse_md_AuthzService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_AuthzService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:AuthzService', attr, body);
}




function parse_md_ContactPerson(data, x) {
  POPATTR(x[1], 'contactType', data.contactType);

  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  POPTAG_RAW(x[2],  'Company', data.Company);
  POPTAG_RAW(x[2],  'GivenName', data.GivenName);
  POPTAG_RAW(x[2],  'SurName', data.SurName);
  for (i=1; tag = find_xml_local(x[2], 'EmailAddress', i); ++i)
    push data{'EmailAddress'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'TelephoneNumber', i); ++i)
    push data{'TelephoneNumber'}, tag[2];

}

function build_md_ContactPerson(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'contactType', data.contactType);

  push body, build_md_Extensions(data{'Extensions'});
  PUSHTAG_RAW(body, 'Company', data.Company);
  PUSHTAG_RAW(body, 'GivenName', data.GivenName);
  PUSHTAG_RAW(body, 'SurName', data.SurName);
  for d(data{'EmailAddress'})PUSHTAG_RAW(body,'EmailAddress',d);
  for d(data{'TelephoneNumber'})PUSHTAG_RAW(body,'TelephoneNumber',d);

  return TAG('md:ContactPerson', attr, body);
}




function parse_md_EncryptionMethod(data, x) {
  POPATTR(x[1], 'Algorithm', data.Algorithm);

  POPTAG_RAW(x[2],  'KeySize', data.KeySize);
  POPTAG_RAW(x[2],  'OAEPparams', data.OAEPparams);

}

function build_md_EncryptionMethod(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Algorithm', data.Algorithm);

  PUSHTAG_RAW(body, 'KeySize', data.KeySize);
  PUSHTAG_RAW(body, 'OAEPparams', data.OAEPparams);

  return TAG('md:EncryptionMethod', attr, body);
}




function parse_md_EntitiesDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'Name', data.Name);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EntityDescriptor', i); ++i) {
    h =  hash [];
    parse_md_EntityDescriptor(h, tag);
    push data{'EntityDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'EntitiesDescriptor', i); ++i) {
    h =  hash [];
    parse_md_EntitiesDescriptor(h, tag);
    push data{'EntitiesDescriptor'}, h;
  }

}

function build_md_EntitiesDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'Name', data.Name);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'EntityDescriptor'}) push body,build_md_EntityDescriptor(d);
  for d(data{'EntitiesDescriptor'}) push body,build_md_EntitiesDescriptor(d);

  return TAG('md:EntitiesDescriptor', attr, body);
}




function parse_md_EntityDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'entityID', data.entityID);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'RoleDescriptor', i); ++i) {
    h =  hash [];
    parse_md_RoleDescriptor(h, tag);
    push data{'RoleDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'IDPSSODescriptor', i); ++i) {
    h =  hash [];
    parse_md_IDPSSODescriptor(h, tag);
    push data{'IDPSSODescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SPSSODescriptor', i); ++i) {
    h =  hash [];
    parse_md_SPSSODescriptor(h, tag);
    push data{'SPSSODescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthnAuthorityDescriptor', i); ++i) {
    h =  hash [];
    parse_md_AuthnAuthorityDescriptor(h, tag);
    push data{'AuthnAuthorityDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeAuthorityDescriptor', i); ++i) {
    h =  hash [];
    parse_md_AttributeAuthorityDescriptor(h, tag);
    push data{'AttributeAuthorityDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'PDPDescriptor', i); ++i) {
    h =  hash [];
    parse_md_PDPDescriptor(h, tag);
    push data{'PDPDescriptor'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AffiliationDescriptor', i); ++i) {
    h =  hash [];
    parse_md_AffiliationDescriptor(h, tag);
    push data{'AffiliationDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AdditionalMetadataLocation', i); ++i) {
    h =  hash [];
    parse_md_AdditionalMetadataLocation(h, tag);
    push data{'AdditionalMetadataLocation'}, h;
  }

}

function build_md_EntityDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'entityID', data.entityID);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'RoleDescriptor'}) push body,build_md_RoleDescriptor(d);
  for d(data{'IDPSSODescriptor'}) push body,build_md_IDPSSODescriptor(d);
  for d(data{'SPSSODescriptor'}) push body,build_md_SPSSODescriptor(d);
  for d(data{'AuthnAuthorityDescriptor'}) push body,build_md_AuthnAuthorityDescriptor(d);
  for d(data{'AttributeAuthorityDescriptor'}) push body,build_md_AttributeAuthorityDescriptor(d);
  for d(data{'PDPDescriptor'}) push body,build_md_PDPDescriptor(d);
  for d(data{'AffiliationDescriptor'}) push body,build_md_AffiliationDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'AdditionalMetadataLocation'}) push body,build_md_AdditionalMetadataLocation(d);

  return TAG('md:EntityDescriptor', attr, body);
}




function parse_md_Extensions(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Scope', i); ++i) {
    h =  hash [];
    parse_shibmd_Scope(h, tag);
    push data{'Scope'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'KeyAuthority', i); ++i) {
    h =  hash [];
    parse_shibmd_KeyAuthority(h, tag);
    push data{'KeyAuthority'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'DiscoveryResponse', i); ++i) {
    h =  hash [];
    parse_idpdisc_DiscoveryResponse(h, tag);
    push data{'DiscoveryResponse'}, h;
  }

}

function build_md_Extensions(data) {
  attr = [];
  body = [];

  for d(data{'Scope'}) push body,build_shibmd_Scope(d);
  for d(data{'KeyAuthority'}) push body,build_shibmd_KeyAuthority(d);
  for d(data{'DiscoveryResponse'}) push body,build_idpdisc_DiscoveryResponse(d);

  return TAG('md:Extensions', attr, body);
}




function parse_md_IDPSSODescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'WantAuthnRequestsSigned', data.WantAuthnRequestsSigned);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ArtifactResolutionService', i); ++i) {
    h =  hash [];
    parse_md_ArtifactResolutionService(h, tag);
    push data{'ArtifactResolutionService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SingleLogoutService', i); ++i) {
    h =  hash [];
    parse_md_SingleLogoutService(h, tag);
    push data{'SingleLogoutService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ManageNameIDService', i); ++i) {
    h =  hash [];
    parse_md_ManageNameIDService(h, tag);
    push data{'ManageNameIDService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDFormat', i); ++i)
    push data{'NameIDFormat'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'SingleSignOnService', i); ++i) {
    h =  hash [];
    parse_md_SingleSignOnService(h, tag);
    push data{'SingleSignOnService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDMappingService', i); ++i) {
    h =  hash [];
    parse_md_NameIDMappingService(h, tag);
    push data{'NameIDMappingService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDRequestService', i); ++i) {
    h =  hash [];
    parse_md_AssertionIDRequestService(h, tag);
    push data{'AssertionIDRequestService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeProfile', i); ++i)
    push data{'AttributeProfile'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'Attribute', i); ++i) {
    h =  hash [];
    parse_sa_Attribute(h, tag);
    push data{'Attribute'}, h;
  }

}

function build_md_IDPSSODescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'WantAuthnRequestsSigned', data.WantAuthnRequestsSigned);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'ArtifactResolutionService'}) push body,build_md_ArtifactResolutionService(d);
  for d(data{'SingleLogoutService'}) push body,build_md_SingleLogoutService(d);
  for d(data{'ManageNameIDService'}) push body,build_md_ManageNameIDService(d);
  for d(data{'NameIDFormat'})PUSHTAG_RAW(body,'NameIDFormat',d);
  for d(data{'SingleSignOnService'}) push body,build_md_SingleSignOnService(d);
  for d(data{'NameIDMappingService'}) push body,build_md_NameIDMappingService(d);
  for d(data{'AssertionIDRequestService'}) push body,build_md_AssertionIDRequestService(d);
  for d(data{'AttributeProfile'})PUSHTAG_RAW(body,'AttributeProfile',d);
  for d(data{'Attribute'}) push body,build_sa_Attribute(d);

  return TAG('md:IDPSSODescriptor', attr, body);
}




function parse_md_KeyDescriptor(data, x) {
  POPATTR(x[1], 'use', data.use);

  tag = find_xml_local(x[2], 'KeyInfo', 1);
  h =  hash [];
  parse_ds_KeyInfo(h, aux1);
  data{'KeyInfo'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EncryptionMethod', i); ++i) {
    h =  hash [];
    parse_md_EncryptionMethod(h, tag);
    push data{'EncryptionMethod'}, h;
  }

}

function build_md_KeyDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'use', data.use);

  push body, build_ds_KeyInfo(data{'KeyInfo'});
  for d(data{'EncryptionMethod'}) push body,build_md_EncryptionMethod(d);

  return TAG('md:KeyDescriptor', attr, body);
}




function parse_md_ManageNameIDService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_ManageNameIDService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:ManageNameIDService', attr, body);
}




function parse_md_NameIDMappingService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_NameIDMappingService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:NameIDMappingService', attr, body);
}




function parse_md_Organization(data, x) {

  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'OrganizationName', i); ++i) {
    h =  hash [];
    parse_md_OrganizationName(h, tag);
    push data{'OrganizationName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrganizationDisplayName', i); ++i) {
    h =  hash [];
    parse_md_OrganizationDisplayName(h, tag);
    push data{'OrganizationDisplayName'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'OrganizationURL', i); ++i) {
    h =  hash [];
    parse_md_OrganizationURL(h, tag);
    push data{'OrganizationURL'}, h;
  }

}

function build_md_Organization(data) {
  attr = [];
  body = [];

  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'OrganizationName'}) push body,build_md_OrganizationName(d);
  for d(data{'OrganizationDisplayName'}) push body,build_md_OrganizationDisplayName(d);
  for d(data{'OrganizationURL'}) push body,build_md_OrganizationURL(d);

  return TAG('md:Organization', attr, body);
}




function parse_md_OrganizationDisplayName(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_md_OrganizationDisplayName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('md:OrganizationDisplayName', attr, body);
}




function parse_md_OrganizationName(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_md_OrganizationName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('md:OrganizationName', attr, body);
}




function parse_md_OrganizationURL(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_md_OrganizationURL(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('md:OrganizationURL', attr, body);
}




function parse_md_PDPDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AuthzService', i); ++i) {
    h =  hash [];
    parse_md_AuthzService(h, tag);
    push data{'AuthzService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AssertionIDRequestService', i); ++i) {
    h =  hash [];
    parse_md_AssertionIDRequestService(h, tag);
    push data{'AssertionIDRequestService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDFormat', i); ++i)
    push data{'NameIDFormat'}, tag[2];

}

function build_md_PDPDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'AuthzService'}) push body,build_md_AuthzService(d);
  for d(data{'AssertionIDRequestService'}) push body,build_md_AssertionIDRequestService(d);
  for d(data{'NameIDFormat'})PUSHTAG_RAW(body,'NameIDFormat',d);

  return TAG('md:PDPDescriptor', attr, body);
}




function parse_md_RequestedAttribute(data, x) {
  POPATTR(x[1], 'FriendlyName', data.FriendlyName);
  POPATTR(x[1], 'Name', data.Name);
  POPATTR(x[1], 'NameFormat', data.NameFormat);
  POPATTR(x[1], 'isRequired', data.isRequired);

  for (i=1; tag = find_xml_local(x[2], 'AttributeValue', i); ++i) {
    h =  hash [];
    parse_sa_AttributeValue(h, tag);
    push data{'AttributeValue'}, h;
  }

}

function build_md_RequestedAttribute(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'FriendlyName', data.FriendlyName);
  PUSHATTR(attr, 'Name', data.Name);
  PUSHATTR(attr, 'NameFormat', data.NameFormat);
  PUSHATTR(attr, 'isRequired', data.isRequired);

  for d(data{'AttributeValue'}) push body,build_sa_AttributeValue(d);

  return TAG('md:RequestedAttribute', attr, body);
}




function parse_md_RoleDescriptor(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }

}

function build_md_RoleDescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);

  return TAG('md:RoleDescriptor', attr, body);
}




function parse_md_SPSSODescriptor(data, x) {
  POPATTR(x[1], 'AuthnRequestsSigned', data.AuthnRequestsSigned);
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'WantAssertionsSigned', data.WantAssertionsSigned);
  POPATTR(x[1], 'cacheDuration', data.cacheDuration);
  POPATTR(x[1], 'errorURL', data.errorURL);
  POPATTR(x[1], 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  POPATTR(x[1], 'validUntil', data.validUntil);

  tag = find_xml_local(x[2], 'Signature', 1);
  h =  hash [];
  parse_ds_Signature(h, aux1);
  data{'Signature'} = h;
  tag = find_xml_local(x[2], 'Extensions', 1);
  h =  hash [];
  parse_md_Extensions(h, aux1);
  data{'Extensions'} = h;
  for (i=1; tag = find_xml_local(x[2], 'KeyDescriptor', i); ++i) {
    h =  hash [];
    parse_md_KeyDescriptor(h, tag);
    push data{'KeyDescriptor'}, h;
  }
  tag = find_xml_local(x[2], 'Organization', 1);
  h =  hash [];
  parse_md_Organization(h, aux1);
  data{'Organization'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ContactPerson', i); ++i) {
    h =  hash [];
    parse_md_ContactPerson(h, tag);
    push data{'ContactPerson'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ArtifactResolutionService', i); ++i) {
    h =  hash [];
    parse_md_ArtifactResolutionService(h, tag);
    push data{'ArtifactResolutionService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'SingleLogoutService', i); ++i) {
    h =  hash [];
    parse_md_SingleLogoutService(h, tag);
    push data{'SingleLogoutService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'ManageNameIDService', i); ++i) {
    h =  hash [];
    parse_md_ManageNameIDService(h, tag);
    push data{'ManageNameIDService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'NameIDFormat', i); ++i)
    push data{'NameIDFormat'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'AssertionConsumerService', i); ++i) {
    h =  hash [];
    parse_md_AssertionConsumerService(h, tag);
    push data{'AssertionConsumerService'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'AttributeConsumingService', i); ++i) {
    h =  hash [];
    parse_md_AttributeConsumingService(h, tag);
    push data{'AttributeConsumingService'}, h;
  }

}

function build_md_SPSSODescriptor(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'AuthnRequestsSigned', data.AuthnRequestsSigned);
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'WantAssertionsSigned', data.WantAssertionsSigned);
  PUSHATTR(attr, 'cacheDuration', data.cacheDuration);
  PUSHATTR(attr, 'errorURL', data.errorURL);
  PUSHATTR(attr, 'protocolSupportEnumeration', data.protocolSupportEnumeration);
  PUSHATTR(attr, 'validUntil', data.validUntil);

  push body, build_ds_Signature(data{'Signature'});
  push body, build_md_Extensions(data{'Extensions'});
  for d(data{'KeyDescriptor'}) push body,build_md_KeyDescriptor(d);
  push body, build_md_Organization(data{'Organization'});
  for d(data{'ContactPerson'}) push body,build_md_ContactPerson(d);
  for d(data{'ArtifactResolutionService'}) push body,build_md_ArtifactResolutionService(d);
  for d(data{'SingleLogoutService'}) push body,build_md_SingleLogoutService(d);
  for d(data{'ManageNameIDService'}) push body,build_md_ManageNameIDService(d);
  for d(data{'NameIDFormat'})PUSHTAG_RAW(body,'NameIDFormat',d);
  for d(data{'AssertionConsumerService'}) push body,build_md_AssertionConsumerService(d);
  for d(data{'AttributeConsumingService'}) push body,build_md_AttributeConsumingService(d);

  return TAG('md:SPSSODescriptor', attr, body);
}




function parse_md_ServiceDescription(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_md_ServiceDescription(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('md:ServiceDescription', attr, body);
}




function parse_md_ServiceName(data, x) {
  POPATTR(x[1], 'xml_lang', data.xml_lang);


}

function build_md_ServiceName(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'xml_lang', data.xml_lang);


  return TAG('md:ServiceName', attr, body);
}




function parse_md_SingleLogoutService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_SingleLogoutService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:SingleLogoutService', attr, body);
}




function parse_md_SingleSignOnService(data, x) {
  POPATTR(x[1], 'Binding', data.Binding);
  POPATTR(x[1], 'Location', data.Location);
  POPATTR(x[1], 'ResponseLocation', data.ResponseLocation);
  POPATTR(x[1], 'index', data.index);
  POPATTR(x[1], 'isDefault', data.isDefault);


}

function build_md_SingleSignOnService(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'Binding', data.Binding);
  PUSHATTR(attr, 'Location', data.Location);
  PUSHATTR(attr, 'ResponseLocation', data.ResponseLocation);
  PUSHATTR(attr, 'index', data.index);
  PUSHATTR(attr, 'isDefault', data.isDefault);


  return TAG('md:SingleSignOnService', attr, body);
}


/* EOF -- c/zx-md.ds */
