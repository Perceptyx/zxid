/* c/zx-shps.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_shps_CallbackEPR(data, x) {
  POPATTR(x[1], 'ID', data.ID);
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'notOnOrAfter', data.notOnOrAfter);
  POPATTR(x[1], 'wsu_Id', data.wsu_Id);
  POPATTR(x[1], 'e_actor', data.e_actor);
  POPATTR(x[1], 'e_mustUnderstand', data.e_mustUnderstand);

  tag = find_xml_local(x[2], 'Address', 1);
  h =  hash [];
  parse_a_Address(h, aux1);
  data{'Address'} = h;
  tag = find_xml_local(x[2], 'ReferenceParameters', 1);
  h =  hash [];
  parse_a_ReferenceParameters(h, aux1);
  data{'ReferenceParameters'} = h;
  tag = find_xml_local(x[2], 'Metadata', 1);
  h =  hash [];
  parse_a_Metadata(h, aux1);
  data{'Metadata'} = h;

}

function build_shps_CallbackEPR(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ID', data.ID);
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'notOnOrAfter', data.notOnOrAfter);
  PUSHATTR(attr, 'wsu_Id', data.wsu_Id);
  PUSHATTR(attr, 'e_actor', data.e_actor);
  PUSHATTR(attr, 'e_mustUnderstand', data.e_mustUnderstand);

  push body, build_a_Address(data{'Address'});
  push body, build_a_ReferenceParameters(data{'ReferenceParameters'});
  push body, build_a_Metadata(data{'Metadata'});

  return TAG('shps:CallbackEPR', attr, body);
}




function parse_shps_Delete(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ServiceHandle', i); ++i)
    push data{'ServiceHandle'}, tag[2];

}

function build_shps_Delete(data) {
  attr = [];
  body = [];

  for d(data{'ServiceHandle'})PUSHTAG_RAW(body,'ServiceHandle',d);

  return TAG('shps:Delete', attr, body);
}




function parse_shps_DeleteResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_shps_DeleteResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('shps:DeleteResponse', attr, body);
}




function parse_shps_GetStatus(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ServiceHandle', i); ++i)
    push data{'ServiceHandle'}, tag[2];

}

function build_shps_GetStatus(data) {
  attr = [];
  body = [];

  for d(data{'ServiceHandle'})PUSHTAG_RAW(body,'ServiceHandle',d);

  return TAG('shps:GetStatus', attr, body);
}




function parse_shps_GetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'GetStatusResponseItem', i); ++i) {
    h =  hash [];
    parse_shps_GetStatusResponseItem(h, tag);
    push data{'GetStatusResponseItem'}, h;
  }

}

function build_shps_GetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'GetStatusResponseItem'}) push body,build_shps_GetStatusResponseItem(d);

  return TAG('shps:GetStatusResponse', attr, body);
}




function parse_shps_GetStatusResponseItem(data, x) {

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);
  POPTAG_RAW(x[2],  'ServiceStatus', data.ServiceStatus);

}

function build_shps_GetStatusResponseItem(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);
  PUSHTAG_RAW(body, 'ServiceStatus', data.ServiceStatus);

  return TAG('shps:GetStatusResponseItem', attr, body);
}




function parse_shps_InvocationContext(data, x) {

  POPTAG_RAW(x[2],  'InvokingProvider', data.InvokingProvider);
  POPTAG_RAW(x[2],  'InvokingPrincipal', data.InvokingPrincipal);
  POPTAG_RAW(x[2],  'SecurityMechID', data.SecurityMechID);

}

function build_shps_InvocationContext(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'InvokingProvider', data.InvokingProvider);
  PUSHTAG_RAW(body, 'InvokingPrincipal', data.InvokingPrincipal);
  PUSHTAG_RAW(body, 'SecurityMechID', data.SecurityMechID);

  return TAG('shps:InvocationContext', attr, body);
}




function parse_shps_InvokeItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);

}

function build_shps_InvokeItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);

  return TAG('shps:InvokeItem', attr, body);
}




function parse_shps_InvokeResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'InvokeResponseItem', i); ++i) {
    h =  hash [];
    parse_shps_InvokeResponseItem(h, tag);
    push data{'InvokeResponseItem'}, h;
  }

}

function build_shps_InvokeResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'InvokeResponseItem'}) push body,build_shps_InvokeResponseItem(d);

  return TAG('shps:InvokeResponse', attr, body);
}




function parse_shps_InvokeResponseItem(data, x) {
  POPATTR(x[1], 'ref', data.ref);


}

function build_shps_InvokeResponseItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ref', data.ref);


  return TAG('shps:InvokeResponseItem', attr, body);
}




function parse_shps_Poll(data, x) {
  POPATTR(x[1], 'wait', data.wait);

  for (i=1; tag = find_xml_local(x[2], 'Action', i); ++i) {
    h =  hash [];
    parse_a_Action(h, tag);
    push data{'Action'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'Response', i); ++i) {
    h =  hash [];
    parse_dp_Response(h, tag);
    push data{'Response'}, h;
  }

}

function build_shps_Poll(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'wait', data.wait);

  for d(data{'Action'}) push body,build_a_Action(d);
  for d(data{'Response'}) push body,build_dp_Response(d);

  return TAG('shps:Poll', attr, body);
}




function parse_shps_PollResponse(data, x) {
  POPATTR(x[1], 'nextPoll', data.nextPoll);

  for (i=1; tag = find_xml_local(x[2], 'Request', i); ++i) {
    h =  hash [];
    parse_dp_Request(h, tag);
    push data{'Request'}, h;
  }

}

function build_shps_PollResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'nextPoll', data.nextPoll);

  for d(data{'Request'}) push body,build_dp_Request(d);

  return TAG('shps:PollResponse', attr, body);
}




function parse_shps_ProxyInvoke(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ProxyInvokeItem', i); ++i) {
    h =  hash [];
    parse_shps_ProxyInvokeItem(h, tag);
    push data{'ProxyInvokeItem'}, h;
  }

}

function build_shps_ProxyInvoke(data) {
  attr = [];
  body = [];

  for d(data{'ProxyInvokeItem'}) push body,build_shps_ProxyInvokeItem(d);

  return TAG('shps:ProxyInvoke', attr, body);
}




function parse_shps_ProxyInvokeItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);
  tag = find_xml_local(x[2], 'InvocationContext', 1);
  h =  hash [];
  parse_shps_InvocationContext(h, aux1);
  data{'InvocationContext'} = h;
  POPTAG_RAW(x[2],  'RequestHeaders', data.RequestHeaders);

}

function build_shps_ProxyInvokeItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);
  push body, build_shps_InvocationContext(data{'InvocationContext'});
  PUSHTAG_RAW(body, 'RequestHeaders', data.RequestHeaders);

  return TAG('shps:ProxyInvokeItem', attr, body);
}




function parse_shps_ProxyInvokeResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ProxyInvokeResponseItem', i); ++i) {
    h =  hash [];
    parse_shps_ProxyInvokeResponseItem(h, tag);
    push data{'ProxyInvokeResponseItem'}, h;
  }

}

function build_shps_ProxyInvokeResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'ProxyInvokeResponseItem'}) push body,build_shps_ProxyInvokeResponseItem(d);

  return TAG('shps:ProxyInvokeResponse', attr, body);
}




function parse_shps_ProxyInvokeResponseItem(data, x) {
  POPATTR(x[1], 'ref', data.ref);

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);
  POPTAG_RAW(x[2],  'ResponseHeaders', data.ResponseHeaders);

}

function build_shps_ProxyInvokeResponseItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ref', data.ref);

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);
  PUSHTAG_RAW(body, 'ResponseHeaders', data.ResponseHeaders);

  return TAG('shps:ProxyInvokeResponseItem', attr, body);
}




function parse_shps_Query(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'RequestedService', i); ++i) {
    h =  hash [];
    parse_di_RequestedService(h, tag);
    push data{'RequestedService'}, h;
  }

}

function build_shps_Query(data) {
  attr = [];
  body = [];

  for d(data{'RequestedService'}) push body,build_di_RequestedService(d);

  return TAG('shps:Query', attr, body);
}




function parse_shps_QueryRegistered(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'ServiceHandle', i); ++i)
    push data{'ServiceHandle'}, tag[2];

}

function build_shps_QueryRegistered(data) {
  attr = [];
  body = [];

  for d(data{'ServiceHandle'})PUSHTAG_RAW(body,'ServiceHandle',d);

  return TAG('shps:QueryRegistered', attr, body);
}




function parse_shps_QueryRegisteredResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EndpointReference', i); ++i) {
    h =  hash [];
    parse_a_EndpointReference(h, tag);
    push data{'EndpointReference'}, h;
  }

}

function build_shps_QueryRegisteredResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'EndpointReference'}) push body,build_a_EndpointReference(d);

  return TAG('shps:QueryRegisteredResponse', attr, body);
}




function parse_shps_QueryResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'EndpointReference', i); ++i) {
    h =  hash [];
    parse_a_EndpointReference(h, tag);
    push data{'EndpointReference'}, h;
  }

}

function build_shps_QueryResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'EndpointReference'}) push body,build_a_EndpointReference(d);

  return TAG('shps:QueryResponse', attr, body);
}




function parse_shps_Register(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'EndpointReference', i); ++i) {
    h =  hash [];
    parse_a_EndpointReference(h, tag);
    push data{'EndpointReference'}, h;
  }

}

function build_shps_Register(data) {
  attr = [];
  body = [];

  for d(data{'EndpointReference'}) push body,build_a_EndpointReference(d);

  return TAG('shps:Register', attr, body);
}




function parse_shps_RegisterResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'RegisterResponseItem', i); ++i) {
    h =  hash [];
    parse_shps_RegisterResponseItem(h, tag);
    push data{'RegisterResponseItem'}, h;
  }

}

function build_shps_RegisterResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});
  for d(data{'RegisterResponseItem'}) push body,build_shps_RegisterResponseItem(d);

  return TAG('shps:RegisterResponse', attr, body);
}




function parse_shps_RegisterResponseItem(data, x) {
  POPATTR(x[1], 'ref', data.ref);

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);

}

function build_shps_RegisterResponseItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'ref', data.ref);

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);

  return TAG('shps:RegisterResponseItem', attr, body);
}




function parse_shps_SetStatus(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'SetStatusItem', i); ++i) {
    h =  hash [];
    parse_shps_SetStatusItem(h, tag);
    push data{'SetStatusItem'}, h;
  }

}

function build_shps_SetStatus(data) {
  attr = [];
  body = [];

  for d(data{'SetStatusItem'}) push body,build_shps_SetStatusItem(d);

  return TAG('shps:SetStatus', attr, body);
}




function parse_shps_SetStatusItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  POPTAG_RAW(x[2],  'ServiceStatus', data.ServiceStatus);
  for (i=1; tag = find_xml_local(x[2], 'ServiceHandle', i); ++i)
    push data{'ServiceHandle'}, tag[2];

}

function build_shps_SetStatusItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  PUSHTAG_RAW(body, 'ServiceStatus', data.ServiceStatus);
  for d(data{'ServiceHandle'})PUSHTAG_RAW(body,'ServiceHandle',d);

  return TAG('shps:SetStatusItem', attr, body);
}




function parse_shps_SetStatusResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_shps_SetStatusResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('shps:SetStatusResponse', attr, body);
}




function parse_shps_Update(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'UpdateItem', i); ++i) {
    h =  hash [];
    parse_shps_UpdateItem(h, tag);
    push data{'UpdateItem'}, h;
  }

}

function build_shps_Update(data) {
  attr = [];
  body = [];

  for d(data{'UpdateItem'}) push body,build_shps_UpdateItem(d);

  return TAG('shps:Update', attr, body);
}




function parse_shps_UpdateItem(data, x) {
  POPATTR(x[1], 'itemID', data.itemID);

  POPTAG_RAW(x[2],  'ServiceHandle', data.ServiceHandle);
  tag = find_xml_local(x[2], 'EndpointReference', 1);
  h =  hash [];
  parse_a_EndpointReference(h, aux1);
  data{'EndpointReference'} = h;

}

function build_shps_UpdateItem(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'itemID', data.itemID);

  PUSHTAG_RAW(body, 'ServiceHandle', data.ServiceHandle);
  push body, build_a_EndpointReference(data{'EndpointReference'});

  return TAG('shps:UpdateItem', attr, body);
}




function parse_shps_UpdateResponse(data, x) {

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_lu_Status(h, aux1);
  data{'Status'} = h;

}

function build_shps_UpdateResponse(data) {
  attr = [];
  body = [];

  push body, build_lu_Status(data{'Status'});

  return TAG('shps:UpdateResponse', attr, body);
}


/* EOF -- c/zx-shps.ds */
