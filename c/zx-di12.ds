/* c/zx-di12.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_di12_AuthenticateRequester(data, x) {
  POPATTR(x[1], 'descriptionIDRefs', data.descriptionIDRefs);


}

function build_di12_AuthenticateRequester(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'descriptionIDRefs', data.descriptionIDRefs);


  return TAG('di12:AuthenticateRequester', attr, body);
}




function parse_di12_AuthenticateSessionContext(data, x) {
  POPATTR(x[1], 'descriptionIDRefs', data.descriptionIDRefs);


}

function build_di12_AuthenticateSessionContext(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'descriptionIDRefs', data.descriptionIDRefs);


  return TAG('di12:AuthenticateSessionContext', attr, body);
}




function parse_di12_AuthorizeRequester(data, x) {
  POPATTR(x[1], 'descriptionIDRefs', data.descriptionIDRefs);


}

function build_di12_AuthorizeRequester(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'descriptionIDRefs', data.descriptionIDRefs);


  return TAG('di12:AuthorizeRequester', attr, body);
}




function parse_di12_Credentials(data, x) {


}

function build_di12_Credentials(data) {
  attr = [];
  body = [];


  return TAG('di12:Credentials', attr, body);
}




function parse_di12_Description(data, x) {
  POPATTR(x[1], 'id', data.id);

  for (i=1; tag = find_xml_local(x[2], 'SecurityMechID', i); ++i)
    push data{'SecurityMechID'}, tag[2];
  for (i=1; tag = find_xml_local(x[2], 'CredentialRef', i); ++i)
    push data{'CredentialRef'}, tag[2];
  POPTAG_RAW(x[2],  'WsdlURI', data.WsdlURI);
  POPTAG_RAW(x[2],  'ServiceNameRef', data.ServiceNameRef);
  POPTAG_RAW(x[2],  'Endpoint', data.Endpoint);
  POPTAG_RAW(x[2],  'SoapAction', data.SoapAction);

}

function build_di12_Description(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  for d(data{'SecurityMechID'})PUSHTAG_RAW(body,'SecurityMechID',d);
  for d(data{'CredentialRef'})PUSHTAG_RAW(body,'CredentialRef',d);
  PUSHTAG_RAW(body, 'WsdlURI', data.WsdlURI);
  PUSHTAG_RAW(body, 'ServiceNameRef', data.ServiceNameRef);
  PUSHTAG_RAW(body, 'Endpoint', data.Endpoint);
  PUSHTAG_RAW(body, 'SoapAction', data.SoapAction);

  return TAG('di12:Description', attr, body);
}




function parse_di12_EncryptResourceID(data, x) {
  POPATTR(x[1], 'descriptionIDRefs', data.descriptionIDRefs);


}

function build_di12_EncryptResourceID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'descriptionIDRefs', data.descriptionIDRefs);


  return TAG('di12:EncryptResourceID', attr, body);
}




function parse_di12_EncryptedResourceID(data, x) {

  tag = find_xml_local(x[2], 'EncryptedData', 1);
  h =  hash [];
  parse_xenc_EncryptedData(h, aux1);
  data{'EncryptedData'} = h;
  tag = find_xml_local(x[2], 'EncryptedKey', 1);
  h =  hash [];
  parse_xenc_EncryptedKey(h, aux1);
  data{'EncryptedKey'} = h;

}

function build_di12_EncryptedResourceID(data) {
  attr = [];
  body = [];

  push body, build_xenc_EncryptedData(data{'EncryptedData'});
  push body, build_xenc_EncryptedKey(data{'EncryptedKey'});

  return TAG('di12:EncryptedResourceID', attr, body);
}




function parse_di12_Extension(data, x) {


}

function build_di12_Extension(data) {
  attr = [];
  body = [];


  return TAG('di12:Extension', attr, body);
}




function parse_di12_InsertEntry(data, x) {

  tag = find_xml_local(x[2], 'ResourceOffering', 1);
  h =  hash [];
  parse_di12_ResourceOffering(h, aux1);
  data{'ResourceOffering'} = h;

}

function build_di12_InsertEntry(data) {
  attr = [];
  body = [];

  push body, build_di12_ResourceOffering(data{'ResourceOffering'});

  return TAG('di12:InsertEntry', attr, body);
}




function parse_di12_Modify(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_di12_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_di12_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'InsertEntry', i); ++i) {
    h =  hash [];
    parse_di12_InsertEntry(h, tag);
    push data{'InsertEntry'}, h;
  }
  for (i=1; tag = find_xml_local(x[2], 'RemoveEntry', i); ++i) {
    h =  hash [];
    parse_di12_RemoveEntry(h, tag);
    push data{'RemoveEntry'}, h;
  }

}

function build_di12_Modify(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_di12_ResourceID(data{'ResourceID'});
  push body, build_di12_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'InsertEntry'}) push body,build_di12_InsertEntry(d);
  for d(data{'RemoveEntry'}) push body,build_di12_RemoveEntry(d);

  return TAG('di12:Modify', attr, body);
}




function parse_di12_ModifyResponse(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'newEntryIDs', data.newEntryIDs);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_di12_Status(h, aux1);
  data{'Status'} = h;
  tag = find_xml_local(x[2], 'Extension', 1);
  h =  hash [];
  parse_di12_Extension(h, aux1);
  data{'Extension'} = h;

}

function build_di12_ModifyResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'newEntryIDs', data.newEntryIDs);

  push body, build_di12_Status(data{'Status'});
  push body, build_di12_Extension(data{'Extension'});

  return TAG('di12:ModifyResponse', attr, body);
}




function parse_di12_Options(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'Option', i); ++i)
    push data{'Option'}, tag[2];

}

function build_di12_Options(data) {
  attr = [];
  body = [];

  for d(data{'Option'})PUSHTAG_RAW(body,'Option',d);

  return TAG('di12:Options', attr, body);
}




function parse_di12_Query(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_di12_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_di12_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  for (i=1; tag = find_xml_local(x[2], 'RequestedServiceType', i); ++i) {
    h =  hash [];
    parse_di12_RequestedServiceType(h, tag);
    push data{'RequestedServiceType'}, h;
  }

}

function build_di12_Query(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_di12_ResourceID(data{'ResourceID'});
  push body, build_di12_EncryptedResourceID(data{'EncryptedResourceID'});
  for d(data{'RequestedServiceType'}) push body,build_di12_RequestedServiceType(d);

  return TAG('di12:Query', attr, body);
}




function parse_di12_QueryResponse(data, x) {
  POPATTR(x[1], 'id', data.id);

  tag = find_xml_local(x[2], 'Status', 1);
  h =  hash [];
  parse_di12_Status(h, aux1);
  data{'Status'} = h;
  for (i=1; tag = find_xml_local(x[2], 'ResourceOffering', i); ++i) {
    h =  hash [];
    parse_di12_ResourceOffering(h, tag);
    push data{'ResourceOffering'}, h;
  }
  tag = find_xml_local(x[2], 'Credentials', 1);
  h =  hash [];
  parse_di12_Credentials(h, aux1);
  data{'Credentials'} = h;

}

function build_di12_QueryResponse(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);

  push body, build_di12_Status(data{'Status'});
  for d(data{'ResourceOffering'}) push body,build_di12_ResourceOffering(d);
  push body, build_di12_Credentials(data{'Credentials'});

  return TAG('di12:QueryResponse', attr, body);
}




function parse_di12_RemoveEntry(data, x) {
  POPATTR(x[1], 'entryID', data.entryID);


}

function build_di12_RemoveEntry(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'entryID', data.entryID);


  return TAG('di12:RemoveEntry', attr, body);
}




function parse_di12_RequestedServiceType(data, x) {

  POPTAG_RAW(x[2],  'ServiceType', data.ServiceType);
  tag = find_xml_local(x[2], 'Options', 1);
  h =  hash [];
  parse_di12_Options(h, aux1);
  data{'Options'} = h;

}

function build_di12_RequestedServiceType(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'ServiceType', data.ServiceType);
  push body, build_di12_Options(data{'Options'});

  return TAG('di12:RequestedServiceType', attr, body);
}




function parse_di12_ResourceID(data, x) {
  POPATTR(x[1], 'id', data.id);


}

function build_di12_ResourceID(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);


  return TAG('di12:ResourceID', attr, body);
}




function parse_di12_ResourceOffering(data, x) {
  POPATTR(x[1], 'entryID', data.entryID);

  tag = find_xml_local(x[2], 'ResourceID', 1);
  h =  hash [];
  parse_di12_ResourceID(h, aux1);
  data{'ResourceID'} = h;
  tag = find_xml_local(x[2], 'EncryptedResourceID', 1);
  h =  hash [];
  parse_di12_EncryptedResourceID(h, aux1);
  data{'EncryptedResourceID'} = h;
  tag = find_xml_local(x[2], 'ServiceInstance', 1);
  h =  hash [];
  parse_di12_ServiceInstance(h, aux1);
  data{'ServiceInstance'} = h;
  tag = find_xml_local(x[2], 'Options', 1);
  h =  hash [];
  parse_di12_Options(h, aux1);
  data{'Options'} = h;
  POPTAG_RAW(x[2],  'Abstract', data.Abstract);

}

function build_di12_ResourceOffering(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'entryID', data.entryID);

  push body, build_di12_ResourceID(data{'ResourceID'});
  push body, build_di12_EncryptedResourceID(data{'EncryptedResourceID'});
  push body, build_di12_ServiceInstance(data{'ServiceInstance'});
  push body, build_di12_Options(data{'Options'});
  PUSHTAG_RAW(body, 'Abstract', data.Abstract);

  return TAG('di12:ResourceOffering', attr, body);
}




function parse_di12_ServiceInstance(data, x) {

  POPTAG_RAW(x[2],  'ServiceType', data.ServiceType);
  POPTAG_RAW(x[2],  'ProviderID', data.ProviderID);
  for (i=1; tag = find_xml_local(x[2], 'Description', i); ++i) {
    h =  hash [];
    parse_di12_Description(h, tag);
    push data{'Description'}, h;
  }

}

function build_di12_ServiceInstance(data) {
  attr = [];
  body = [];

  PUSHTAG_RAW(body, 'ServiceType', data.ServiceType);
  PUSHTAG_RAW(body, 'ProviderID', data.ProviderID);
  for d(data{'Description'}) push body,build_di12_Description(d);

  return TAG('di12:ServiceInstance', attr, body);
}




function parse_di12_Status(data, x) {
  POPATTR(x[1], 'code', data.code);
  POPATTR(x[1], 'comment', data.comment);
  POPATTR(x[1], 'ref', data.ref);

  for (i=1; tag = find_xml_local(x[2], 'Status', i); ++i) {
    h =  hash [];
    parse_di12_Status(h, tag);
    push data{'Status'}, h;
  }

}

function build_di12_Status(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'code', data.code);
  PUSHATTR(attr, 'comment', data.comment);
  PUSHATTR(attr, 'ref', data.ref);

  for d(data{'Status'}) push body,build_di12_Status(d);

  return TAG('di12:Status', attr, body);
}


/* EOF -- c/zx-di12.ds */
