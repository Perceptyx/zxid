/* c/zx-sec.ds - WARNING: This file was auto generated by xsd2sg.pl. DO NOT EDIT!
 * $Id$ */
/* Code generation design Copyright (c) 2006 Sampo Kellomaki (sampo@iki.fi),
 * All Rights Reserved. NO WARRANTY. See file COPYING for terms and conditions
 * of use. Some aspects of code generation were driven by schema
 * descriptions that were used as input and may be subject to their own copyright.
 * Code generation uses a template, whose copyright statement follows. */

/** ds-templ.c  -  DirectoryScript template, used in code generation
 ** Copyright (c) 2007 Symlabs (symlabs@symlabs.com), All Rights Reserved.
 ** Author: Sampo Kellomaki (sampo@iki.fi)
 ** This is confidential unpublished proprietary source code of the author.
 ** NO WARRANTY, not even implied warranties. Contains trade secrets.
 ** Distribution prohibited unless authorized in writing.
 ** Licensed under Apache License 2.0, see file COPYING.
 ** Id: ds-templ.c,v 1.1 2007-08-10 17:44:49 sampo Exp $
 **
 ** 6.6.2007, created, Sampo Kellomaki (sampo@iki.fi)
 **
 ** N.B: This template is meant to be processed by pd/xsd2sg.pl. Beware
 ** of special markers that xsd2sg.pl expects to find and understand.
 **/



function parse_sec_Token(data, x) {
  POPATTR(x[1], 'id', data.id);
  POPATTR(x[1], 'ref', data.ref);
  POPATTR(x[1], 'usage', data.usage);

  tag = find_xml_local(x[2], 'Assertion', 1);
  h =  hash [];
  parse_sa_Assertion(h, aux1);
  data{'Assertion'} = h;
  tag = find_xml_local(x[2], 'EncryptedAssertion', 1);
  h =  hash [];
  parse_sa_EncryptedAssertion(h, aux1);
  data{'EncryptedAssertion'} = h;
  tag = find_xml_local(x[2], 'sa11_Assertion', 1);
  h =  hash [];
  parse_sa11_Assertion(h, aux1);
  data{'sa11_Assertion'} = h;
  tag = find_xml_local(x[2], 'ff12_Assertion', 1);
  h =  hash [];
  parse_ff12_Assertion(h, aux1);
  data{'ff12_Assertion'} = h;

}

function build_sec_Token(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'id', data.id);
  PUSHATTR(attr, 'ref', data.ref);
  PUSHATTR(attr, 'usage', data.usage);

  push body, build_sa_Assertion(data{'Assertion'});
  push body, build_sa_EncryptedAssertion(data{'EncryptedAssertion'});
  push body, build_sa11_Assertion(data{'sa11_Assertion'});
  push body, build_ff12_Assertion(data{'ff12_Assertion'});

  return TAG('sec:Token', attr, body);
}




function parse_sec_TokenPolicy(data, x) {
  POPATTR(x[1], 'issueTo', data.issueTo);
  POPATTR(x[1], 'type', data.type);
  POPATTR(x[1], 'validUntil', data.validUntil);
  POPATTR(x[1], 'wantDSEPR', data.wantDSEPR);

  tag = find_xml_local(x[2], 'NameIDPolicy', 1);
  h =  hash [];
  parse_sp_NameIDPolicy(h, aux1);
  data{'NameIDPolicy'} = h;

}

function build_sec_TokenPolicy(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'issueTo', data.issueTo);
  PUSHATTR(attr, 'type', data.type);
  PUSHATTR(attr, 'validUntil', data.validUntil);
  PUSHATTR(attr, 'wantDSEPR', data.wantDSEPR);

  push body, build_sp_NameIDPolicy(data{'NameIDPolicy'});

  return TAG('sec:TokenPolicy', attr, body);
}




function parse_sec_TransitedProvider(data, x) {
  POPATTR(x[1], 'confirmationURI', data.confirmationURI);
  POPATTR(x[1], 'timeStamp', data.timeStamp);


}

function build_sec_TransitedProvider(data) {
  attr = [];
  body = [];
  PUSHATTR(attr, 'confirmationURI', data.confirmationURI);
  PUSHATTR(attr, 'timeStamp', data.timeStamp);


  return TAG('sec:TransitedProvider', attr, body);
}




function parse_sec_TransitedProviderPath(data, x) {

  for (i=1; tag = find_xml_local(x[2], 'TransitedProvider', i); ++i) {
    h =  hash [];
    parse_sec_TransitedProvider(h, tag);
    push data{'TransitedProvider'}, h;
  }

}

function build_sec_TransitedProviderPath(data) {
  attr = [];
  body = [];

  for d(data{'TransitedProvider'}) push body,build_sec_TransitedProvider(d);

  return TAG('sec:TransitedProviderPath', attr, body);
}


/* EOF -- c/zx-sec.ds */
