I recommend using mini_httpd for SSL use. I usually compile
it with dietlibc and link it statically. The following patch
changes the Makefile to accomplish that and also to
support PAOS http header needed for SAML 2.0 ECP operation.

N.B. As of relese 1.16 (20131110) the zxid distribution includes
an already patched (and further modified) version fo mini_httpd.

  mini_httpd_zxid -zx 'PATH=/var/zxid/&WSP_PAT=*.wsp&SSO_PAT=*&DEBUG=1' -p 8443 -c 'zxid*' -S -E /var/zxid/pem/enc-nopw-cert.pem

--Sampo

5 mini_httpd-1.19 receipe
=========================
http://www.acme.com/software/mini_httpd/

diff -u Makefile.orig Makefile
--- Makefile.orig       2005-01-10 01:18:11.000000000 -0500
+++ Makefile    2005-01-10 02:17:32.927714400 -0500
@@ -14,16 +14,16 @@
 # http://www.openssl.org/  Make sure the SSL_TREE definition points to the
 # tree with your OpenSSL installation - depending on how you installed it,
 # it may be in /usr/local instead of /usr/local/ssl.
-#SSL_TREE =    /usr/local/ssl
-#SSL_DEFS =    -DUSE_SSL
-#SSL_INC =     -I${SSL_TREE}/include
-#SSL_LIBS =    -L${SSL_TREE}/lib -lssl -lcrypto
+SSL_TREE =     /opt/diet
+SSL_DEFS =     -DUSE_SSL
+SSL_INC =      -I${SSL_TREE}/include
+SSL_LIBS =     -L${SSL_TREE}/lib -lssl -lcrypto -lz
 
 
-BINDIR =       /usr/local/sbin
-MANDIR =       /usr/local/man
-CC =           gcc
-CDEFS =                ${SSL_DEFS} ${SSL_INC}
+BINDIR =       /usr/sbin
+MANDIR =       /usr/man
+CC =           diet gcc
+CDEFS =                ${SSL_DEFS} ${SSL_INC} -DDIET
 CFLAGS =       -O ${CDEFS}
 #CFLAGS =      -g ${CDEFS}
 LDFLAGS =      -s

diff -u mini_httpd.c.orig mini_httpd.c
--- mini_httpd.c.orig   2007-02-07 20:37:26.000000000 -0800
+++ mini_httpd.c        2007-02-07 20:45:10.000000000 -0800
@@ -226,6 +226,7 @@
 static time_t if_modified_since;
 static char* referer;
 static char* useragent;
+static char* paos;
 
 static char* remoteuser;
 
@@ -562,6 +563,7 @@
        }
 #endif /* USE_SSL */
 
+#ifndef DIET
     if ( ! debug )
        {
        /* Make ourselves a daemon. */
@@ -590,6 +592,7 @@
 #endif
        }
     else
+#endif
        {
        /* Even if we don't daemonize, we still want to disown our parent
        ** process.
@@ -612,10 +615,10 @@
         (void) fprintf( pidfp, "%d\n", (int) getpid() );
         (void) fclose( pidfp );
         }
-
+#ifndef DIET
     /* Read zone info now, in case we chroot(). */
     tzset();
-
+#endif
     /* If we're root, start becoming someone else. */
     if ( getuid() == 0 )
        {
@@ -1159,6 +1162,7 @@
     if_modified_since = (time_t) -1;
     referer = "";
     useragent = "";
+    paos = "";
 
 #ifdef TCP_NOPUSH
     /* Set the TCP_NOPUSH socket option, to try and avoid the 0.2 second
@@ -1276,6 +1280,12 @@
            cp += strspn( cp, " \t" );
            useragent = cp;
            }
+       else if ( strncasecmp( line, "PAOS:", 5 ) == 0 )
+           {
+           cp = &line[11];
+           cp += strspn( cp, " \t" );
+           paos = cp;
+           }
        }
 
     if ( strcasecmp( method_str, get_method_str( METHOD_GET ) ) == 0 )
@@ -2148,6 +2158,12 @@
        envp[envn++] = build_env( "HTTP_REFERER=%s", referer );
     if ( useragent[0] != '\0' )
        envp[envn++] = build_env( "HTTP_USER_AGENT=%s", useragent );
+    if ( paos[0] != '\0' )
+       envp[envn++] = build_env( "HTTP_PAOS=%s", paos );
+    if ( getenv( "ZXID_PRE_CONF" ) != (char*) 0 )
+       envp[envn++] = build_env( "ZXID_PRE_CONF=%s", getenv( "ZXID_PRE_CONF" ) );
+    if ( getenv( "ZXID_CONF" ) != (char*) 0 )
+       envp[envn++] = build_env( "ZXID_CONF=%s", getenv( "ZXID_CONF" ) );
     if ( cookie != (char*) 0 )
        envp[envn++] = build_env( "HTTP_COOKIE=%s", cookie );
     if ( host != (char*) 0 )

make
make cert

# N.B. It is very important that the mini_httpd is made against openssl built against diet. Else
# endless linking problems will arise and solving them with ../provide_ctype.o is wrong!
# no-dso option to openssl/Configure seems promising, too.

./mini_httpd -p 443 -d /d/mn/ssl -c '**.x' -l /var/log/mini_https.log -S -E /etc/mini_httpd.pem -D

#!/bin/sh
exec 2>&1
exec envuidgid Gtinydns envdir ./env softlimit -d300000 /usr/bin/tinydns

